{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5","program":"/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","--edition=2018","/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=78d8a55c55cc4c9e","-C","extra-filename=-78d8a55c55cc4c9e","--out-dir","/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","-L","dependency=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","--extern","nix=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libnix-edd44b1f465b1860.rmeta","--extern","once_cell=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libonce_cell-6194ad0949375a41.rmeta","--extern","smallvec=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libsmallvec-8544fa198532a31d.rmeta","--extern","wayland_sys=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libwayland_sys-d7f3a8850a0b21c0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libwayland_commons-78d8a55c55cc4c9e.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[13445275926651774446,883900965068592236]},"crate_root":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src","external_crates":[{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":18,"id":{"name":"nix","disambiguator":[4569524650602227142,551932238479608188]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[16503337853515921412,15030973269971122297]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":20,"id":{"name":"cfg_if","disambiguator":[11748229077813686416,18120593503603249335]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":21,"id":{"name":"bitflags","disambiguator":[1486220796094162926,11566124556688293180]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":22,"id":{"name":"wayland_sys","disambiguator":[11079262054603126132,12276448021606978901]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":23,"id":{"name":"dlib","disambiguator":[9882124991062660302,4462745715485629460]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":24,"id":{"name":"libloading","disambiguator":[14273903365339308010,16332274797097113117]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","num":25,"id":{"name":"lazy_static","disambiguator":[4038955093903438243,10998562936998939215]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","num":26,"id":{"name":"once_cell","disambiguator":[12079841271607515704,14678360613980349448]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","num":27,"id":{"name":"smallvec","disambiguator":[12123569432201045790,1609040209808900757]}}],"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":0,"byte_end":7629,"line_start":1,"line_end":226,"column_start":1,"column_end":50}},"imports":[{"kind":"Use","ref_id":{"krate":27,"index":38},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":973,"byte_end":981,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"alias_span":null,"name":"smallvec","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":0,"byte_end":7629,"line_start":1,"line_end":226,"column_start":1,"column_end":50},"name":"","qualname":"::","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":15},{"krate":0,"index":48},{"krate":0,"index":88},{"krate":0,"index":154},{"krate":0,"index":247},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":331},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":349}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"/ Common definitions for wayland","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ `wayland-scanner` crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"/ trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/ to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/ this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ convenience.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Debugging helpers to handle `WAYLAND_DEBUG` env variable.\n","sig":null,"attributes":[{"value":"/ Debugging helpers to handle `WAYLAND_DEBUG` env variable.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":7631,"byte_end":7692,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":11},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":7888,"byte_end":7912,"line_start":10,"line_end":10,"column_start":8,"column_end":32},"name":"print_dispatched_message","qualname":"::debug::print_dispatched_message","value":"pub fn print_dispatched_message(&str, u32, &str, &[Argument])","parent":null,"children":[],"decl_id":null,"docs":" Print the dispatched message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the dispatched message to stderr in a following format:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":7764,"byte_end":7829,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":7830,"byte_end":7833,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [timestamp] <- interface@id.msg_name(args)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":7834,"byte_end":7880,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8340,"byte_end":8358,"line_start":27,"line_end":27,"column_start":8,"column_end":26},"name":"print_send_message","qualname":"::debug::print_send_message","value":"pub fn print_send_message(&str, u32, bool, &str, &[Argument])","parent":null,"children":[],"decl_id":null,"docs":" Print the send message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the send message to stderr in a following format:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8153,"byte_end":8212,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8213,"byte_end":8216,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [timestamp] -> interface@id.msg_name(args)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8217,"byte_end":8263,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8264,"byte_end":8267,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ If `is_alive` is `false` the `[ZOMBIE]` is added after `id`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/debug.rs","byte_start":8268,"byte_end":8332,"line_start":26,"line_end":26,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":30},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43}],"decl_id":null,"docs":" Filter\n","sig":null,"attributes":[{"value":"/ Filter","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9385,"byte_end":9395,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9945,"byte_end":9957,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"DispatchData","qualname":"::filter::DispatchData","value":"DispatchData {  }","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" Holder of global dispatch-related data","sig":null,"attributes":[{"value":"/ Holder of global dispatch-related data","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9455,"byte_end":9497,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9498,"byte_end":9501,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct serves as a dynamic container for the dispatch-time","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9502,"byte_end":9569,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ global data that you gave to the dispatch method, and is given as","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9570,"byte_end":9639,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ input to all your callbacks. It allows you to share global state","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9640,"byte_end":9708,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ between your filters.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9709,"byte_end":9734,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9735,"byte_end":9738,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The main method of interest is the `get` method, which allows you to","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9739,"byte_end":9811,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ access a `&mut _` reference to the global data itself. The other methods","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9812,"byte_end":9888,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ are mostly used internally by the crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":9889,"byte_end":9933,"line_start":14,"line_end":14,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10188,"byte_end":10191,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"get","qualname":"<DispatchData>::get","value":"pub fn get<T: std::any::Any>(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Access the dispatch data knowing its type","sig":null,"attributes":[{"value":"/ Access the dispatch data knowing its type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10036,"byte_end":10081,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10086,"byte_end":10089,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the provided type is not the correct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10094,"byte_end":10156,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/ inner type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10161,"byte_end":10176,"line_start":23,"line_end":23,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10400,"byte_end":10404,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"wrap","qualname":"<DispatchData>::wrap","value":"pub fn wrap<T: std::any::Any>(&'a mut T) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Wrap a mutable reference","sig":null,"attributes":[{"value":"/ Wrap a mutable reference","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10285,"byte_end":10313,"line_start":28,"line_end":28,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10318,"byte_end":10321,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This creates a new `DispatchData` from a mutable reference","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10326,"byte_end":10388,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10788,"byte_end":10796,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<DispatchData>::reborrow","value":"pub fn reborrow(&mut Self) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Reborrows this `DispatchData` to create a new one with the same content","sig":null,"attributes":[{"value":"/ Reborrows this `DispatchData` to create a new one with the same content","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10503,"byte_end":10578,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10583,"byte_end":10586,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This is a quick and cheap way to propagate the `DispatchData` down a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10591,"byte_end":10663,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ callback stack by value. It is basically a noop only there to ease","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10668,"byte_end":10738,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ work with the borrow checker.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10743,"byte_end":10776,"line_start":39,"line_end":39,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11676,"byte_end":11682,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"Filter","qualname":"::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" An event filter","sig":null,"attributes":[{"value":"/ An event filter","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11043,"byte_end":11062,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11063,"byte_end":11066,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Can be used in wayland-client and wayland-server to aggregate","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11067,"byte_end":11132,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ messages from different objects into the same closure.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11133,"byte_end":11191,"line_start":55,"line_end":55,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11192,"byte_end":11195,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ You need to provide it a closure of type `FnMut(E, &Filter<E>)`,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11196,"byte_end":11264,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ which will be called any time a message is sent to the filter","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11265,"byte_end":11330,"line_start":58,"line_end":58,"column_start":1,"column_end":66}},{"value":"/ via the `send(..)` method. Your closure also receives a handle","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11331,"byte_end":11397,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ to the filter as argument, so that you can use it from within","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11398,"byte_end":11463,"line_start":60,"line_end":60,"column_start":1,"column_end":66}},{"value":"/ the callback (to assign new wayland objects to this filter for","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11464,"byte_end":11530,"line_start":61,"line_end":61,"column_start":1,"column_end":67}},{"value":"/ example).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11531,"byte_end":11544,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11545,"byte_end":11548,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The `Filter` can be cloned, and all clones send messages to the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11549,"byte_end":11616,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ same closure. However it is not threadsafe.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11617,"byte_end":11664,"line_start":65,"line_end":65,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11916,"byte_end":11919,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<E>>::new","value":"pub fn new<F: FnMut(E, &Filter<E>, DispatchData) -> () + 'static>(F)\n-> Filter<E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new filter from given closure\n","sig":null,"attributes":[{"value":"/ Create a new filter from given closure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11862,"byte_end":11904,"line_start":77,"line_end":77,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":12176,"byte_end":12180,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"send","qualname":"<Filter<E>>::send","value":"pub fn send(&Self, E, DispatchData)","parent":null,"children":[],"decl_id":null,"docs":" Send a message to this filter\n","sig":null,"attributes":[{"value":"/ Send a message to this filter","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":12131,"byte_end":12164,"line_start":84,"line_end":84,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":351},{"krate":0,"index":360},{"krate":0,"index":59},{"krate":0,"index":68},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":71},{"krate":0,"index":84},{"krate":0,"index":86}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"/ Wayland objects map","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":12704,"byte_end":12727,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":54},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":12898,"byte_end":12913,"line_start":7,"line_end":7,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":12803,"byte_end":12887,"line_start":6,"line_end":6,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13037,"byte_end":13051,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":12935,"byte_end":12997,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":12998,"byte_end":13026,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13192,"byte_end":13197,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"pub fn child(&Self) -> Self","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13065,"byte_end":13107,"line_start":12,"line_end":12,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13112,"byte_end":13115,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13120,"byte_end":13184,"line_start":14,"line_end":14,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13344,"byte_end":13350,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13272,"byte_end":13315,"line_start":22,"line_end":22,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":353},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13421,"byte_end":13430,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13379,"byte_end":13412,"line_start":25,"line_end":25,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":354},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13485,"byte_end":13492,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13450,"byte_end":13476,"line_start":27,"line_end":27,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":355},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13558,"byte_end":13566,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13503,"byte_end":13549,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":356},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13662,"byte_end":13668,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13609,"byte_end":13653,"line_start":31,"line_end":31,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":357},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13792,"byte_end":13796,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13711,"byte_end":13783,"line_start":33,"line_end":33,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":358},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13944,"byte_end":13962,"line_start":37,"line_end":37,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13808,"byte_end":13886,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13891,"byte_end":13935,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":359},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14151,"byte_end":14171,"line_start":40,"line_end":40,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14013,"byte_end":14091,"line_start":38,"line_end":38,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14096,"byte_end":14142,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14344,"byte_end":14358,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"pub fn from_interface<I: Interface>(u32, Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14267,"byte_end":14332,"line_start":44,"line_end":44,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14865,"byte_end":14876,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"pub fn event_child(&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14740,"byte_end":14821,"line_start":57,"line_end":57,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14826,"byte_end":14853,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15129,"byte_end":15142,"line_start":65,"line_end":65,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"pub fn request_child(&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15002,"byte_end":15083,"line_start":63,"line_end":63,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15088,"byte_end":15117,"line_start":64,"line_end":64,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15333,"byte_end":15345,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"pub fn is_interface<I: Interface>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15270,"byte_end":15321,"line_start":69,"line_end":69,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15568,"byte_end":15579,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"pub fn placeholder(Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":15481,"byte_end":15556,"line_start":75,"line_end":75,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":363},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16266,"byte_end":16275,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16071,"byte_end":16120,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16121,"byte_end":16124,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16125,"byte_end":16182,"line_start":99,"line_end":99,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16183,"byte_end":16235,"line_start":100,"line_end":100,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16491,"byte_end":16494,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"pub fn new() -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16446,"byte_end":16479,"line_start":108,"line_end":108,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16649,"byte_end":16653,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"pub fn find(&Self, u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16606,"byte_end":16637,"line_start":113,"line_end":113,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17099,"byte_end":17105,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"pub fn remove(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16984,"byte_end":17019,"line_start":124,"line_end":124,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17024,"byte_end":17027,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17032,"byte_end":17087,"line_start":126,"line_end":126,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17785,"byte_end":17794,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"pub fn insert_at(&mut Self, u32, Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17488,"byte_end":17524,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17529,"byte_end":17532,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17537,"byte_end":17608,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17613,"byte_end":17657,"line_start":142,"line_end":142,"column_start":5,"column_end":49}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":17740,"byte_end":17773,"line_start":144,"line_end":144,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18219,"byte_end":18236,"line_start":156,"line_end":156,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"pub fn client_insert_new(&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18148,"byte_end":18207,"line_start":155,"line_end":155,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18417,"byte_end":18434,"line_start":161,"line_end":161,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"pub fn server_insert_new(&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18346,"byte_end":18405,"line_start":160,"line_end":160,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18725,"byte_end":18729,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"pub fn with<T, F: FnOnce(&mut Object<Meta>) -> T>(&mut Self, u32, F)\n-> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18558,"byte_end":18597,"line_start":165,"line_end":165,"column_start":5,"column_end":44}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":18680,"byte_end":18713,"line_start":167,"line_end":167,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":19379,"byte_end":19387,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"pub fn with_all<F: FnMut(u32, &mut Object<Meta>) -> ()>(&mut Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":19314,"byte_end":19367,"line_start":187,"line_end":187,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":139},{"krate":0,"index":144}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"/ Wayland socket manipulation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":20853,"byte_end":20884,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21174,"byte_end":21185,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21095,"byte_end":21163,"line_start":12,"line_end":12,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21281,"byte_end":21294,"line_start":15,"line_end":15,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21199,"byte_end":21270,"line_start":14,"line_end":14,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21361,"byte_end":21367,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21329,"byte_end":21349,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21735,"byte_end":21743,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"pub fn send_msg(&Self, &[u8], &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21406,"byte_end":21445,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21450,"byte_end":21453,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21458,"byte_end":21522,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21527,"byte_end":21530,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21535,"byte_end":21611,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21616,"byte_end":21691,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21696,"byte_end":21723,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22653,"byte_end":22660,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"pub fn rcv_msg(&Self, &mut [u8], &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22178,"byte_end":22222,"line_start":45,"line_end":45,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22227,"byte_end":22230,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22235,"byte_end":22306,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22311,"byte_end":22314,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22319,"byte_end":22375,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22380,"byte_end":22383,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22388,"byte_end":22453,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22458,"byte_end":22461,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22466,"byte_end":22542,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22547,"byte_end":22624,"line_start":54,"line_end":54,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":22629,"byte_end":22641,"line_start":55,"line_end":55,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23870,"byte_end":23884,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23748,"byte_end":23818,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23819,"byte_end":23858,"line_start":105,"line_end":105,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24096,"byte_end":24099,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"pub fn new(Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24044,"byte_end":24084,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24568,"byte_end":24578,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"pub fn get_socket(&mut Self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24510,"byte_end":24556,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24776,"byte_end":24787,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"pub fn into_socket(Self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24643,"byte_end":24690,"line_start":131,"line_end":131,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24695,"byte_end":24698,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24703,"byte_end":24764,"line_start":133,"line_end":133,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24910,"byte_end":24915,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"pub fn flush(&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24837,"byte_end":24898,"line_start":138,"line_end":138,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26603,"byte_end":26616,"line_start":188,"line_end":188,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"pub fn write_message(&mut Self, &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26341,"byte_end":26383,"line_start":182,"line_end":182,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26388,"byte_end":26391,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26396,"byte_end":26471,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26476,"byte_end":26479,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26484,"byte_end":26565,"line_start":186,"line_end":186,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":26570,"byte_end":26591,"line_start":187,"line_end":187,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":27247,"byte_end":27268,"line_start":204,"line_end":204,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"pub fn fill_incoming_buffers(&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":27140,"byte_end":27203,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":27208,"byte_end":27235,"line_start":203,"line_end":203,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":29141,"byte_end":29157,"line_start":246,"line_end":246,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"pub fn read_one_message<F>(&mut Self, F) -> Result<Message, MessageParseError>\nwhere F: FnMut(u32, u16) -> Option<&'static [ArgumentType]>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28239,"byte_end":28313,"line_start":231,"line_end":231,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28318,"byte_end":28321,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28326,"byte_end":28401,"line_start":233,"line_end":233,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28406,"byte_end":28484,"line_start":234,"line_end":234,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28489,"byte_end":28556,"line_start":235,"line_end":235,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28561,"byte_end":28632,"line_start":236,"line_end":236,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28637,"byte_end":28640,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28645,"byte_end":28691,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28696,"byte_end":28699,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28704,"byte_end":28763,"line_start":240,"line_end":240,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28768,"byte_end":28852,"line_start":241,"line_end":241,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28857,"byte_end":28933,"line_start":242,"line_end":242,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":28938,"byte_end":29019,"line_start":243,"line_end":243,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":29024,"byte_end":29110,"line_start":244,"line_end":244,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":29115,"byte_end":29129,"line_start":245,"line_end":245,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31700,"byte_end":31713,"line_start":303,"line_end":303,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"pub fn read_messages<F1, F2>(&mut Self, F1, F2)\n-> NixResult<Result<usize, MessageParseError>> where F1: FnMut(u32, u16) ->\nOption<&'static [ArgumentType]>, F2: FnMut(Message) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30343,"byte_end":30392,"line_start":278,"line_end":278,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30397,"byte_end":30400,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30405,"byte_end":30443,"line_start":280,"line_end":280,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30448,"byte_end":30451,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30456,"byte_end":30523,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30528,"byte_end":30595,"line_start":283,"line_end":283,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30600,"byte_end":30669,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30674,"byte_end":30740,"line_start":285,"line_end":285,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30745,"byte_end":30804,"line_start":286,"line_end":286,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30809,"byte_end":30852,"line_start":287,"line_end":287,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30857,"byte_end":30929,"line_start":288,"line_end":288,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":30934,"byte_end":30999,"line_start":289,"line_end":289,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31004,"byte_end":31007,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31012,"byte_end":31087,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31092,"byte_end":31167,"line_start":292,"line_end":292,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31172,"byte_end":31183,"line_start":293,"line_end":293,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31188,"byte_end":31191,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31196,"byte_end":31242,"line_start":295,"line_end":295,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31247,"byte_end":31250,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31255,"byte_end":31321,"line_start":297,"line_end":297,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31326,"byte_end":31408,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31413,"byte_end":31492,"line_start":299,"line_end":299,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31497,"byte_end":31578,"line_start":300,"line_end":300,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31583,"byte_end":31669,"line_start":301,"line_end":301,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":31674,"byte_end":31688,"line_start":302,"line_end":302,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"user_data","qualname":"::user_data","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":200},{"krate":0,"index":202}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"/ Various utilities used for other implementations","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":42977,"byte_end":43029,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43293,"byte_end":43301,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"UserData","qualname":"::user_data::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43175,"byte_end":43241,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43242,"byte_end":43281,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43759,"byte_end":43762,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<UserData>::new","value":"pub const fn new() -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new UserData instance\n","sig":null,"attributes":[{"value":"/ Create a new UserData instance","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43707,"byte_end":43741,"line_start":28,"line_end":28,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44012,"byte_end":44015,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"set","qualname":"<UserData>::set","value":"pub fn set<T: Any + 'static, F: FnOnce() -> T>(&Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43834,"byte_end":43872,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43877,"byte_end":43880,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43885,"byte_end":43941,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43946,"byte_end":44000,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44414,"byte_end":44428,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"set_threadsafe","qualname":"<UserData>::set_threadsafe","value":"pub fn set_threadsafe<T: Any + Send + Sync + 'static, F: FnOnce() ->\n                      T>(&Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given threadsafe value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given threadsafe value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44225,"byte_end":44274,"line_start":43,"line_end":43,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44279,"byte_end":44282,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44287,"byte_end":44343,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44348,"byte_end":44402,"line_start":46,"line_end":46,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44932,"byte_end":44935,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"pub fn get<T: 'static>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44582,"byte_end":44625,"line_start":51,"line_end":51,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44630,"byte_end":44633,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44638,"byte_end":44671,"line_start":53,"line_end":53,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44676,"byte_end":44679,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44684,"byte_end":44758,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44763,"byte_end":44845,"line_start":56,"line_end":56,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":44850,"byte_end":44920,"line_start":57,"line_end":57,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46025,"byte_end":46036,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::user_data::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":189}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":45896,"byte_end":45952,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":45953,"byte_end":46013,"line_start":89,"line_end":89,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46129,"byte_end":46132,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"pub fn new() -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46097,"byte_end":46117,"line_start":95,"line_end":95,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46413,"byte_end":46416,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"pub fn get<T: 'static>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46211,"byte_end":46270,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46275,"byte_end":46278,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46283,"byte_end":46361,"line_start":102,"line_end":102,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46366,"byte_end":46401,"line_start":103,"line_end":103,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47129,"byte_end":47146,"line_start":122,"line_end":122,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"pub fn insert_if_missing<T: 'static, F: FnOnce() -> T>(&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46626,"byte_end":46682,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46687,"byte_end":46690,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46695,"byte_end":46771,"line_start":115,"line_end":115,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46776,"byte_end":46857,"line_start":116,"line_end":116,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46862,"byte_end":46887,"line_start":117,"line_end":117,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46892,"byte_end":46895,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46900,"byte_end":46980,"line_start":119,"line_end":119,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46985,"byte_end":47066,"line_start":120,"line_end":120,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47071,"byte_end":47117,"line_start":121,"line_end":121,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47825,"byte_end":47853,"line_start":140,"line_end":140,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"pub fn insert_if_missing_threadsafe<T: Send + Sync + 'static, F: FnOnce() ->\n                                    T>(&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47394,"byte_end":47450,"line_start":132,"line_end":132,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47455,"byte_end":47458,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47463,"byte_end":47546,"line_start":134,"line_end":134,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47551,"byte_end":47583,"line_start":135,"line_end":135,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47588,"byte_end":47591,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47596,"byte_end":47676,"line_start":137,"line_end":137,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47681,"byte_end":47762,"line_start":138,"line_end":138,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":47767,"byte_end":47813,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":48788,"byte_end":48798,"line_start":181,"line_end":181,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::user_data::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":49394,"byte_end":49397,"line_start":202,"line_end":202,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":49473,"byte_end":49479,"line_start":206,"line_end":206,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"pub fn append(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":50237,"byte_end":50248,"line_start":231,"line_end":231,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"pub fn append_list(&Self, AppendList<T>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":50434,"byte_end":50438,"line_start":237,"line_end":237,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"pub fn iter(&Self) -> AppendListIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":50539,"byte_end":50547,"line_start":241,"line_end":241,"column_start":16,"column_end":24},"name":"iter_mut","qualname":"<AppendList<T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> AppendListMutIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":389},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51345,"byte_end":51363,"line_start":271,"line_end":271,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::user_data::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":398},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51850,"byte_end":51871,"line_start":290,"line_end":290,"column_start":16,"column_end":37},"name":"AppendListMutIterator","qualname":"::user_data::list::AppendListMutIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":247},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":407},{"krate":0,"index":416},{"krate":0,"index":414},{"krate":0,"index":412},{"krate":0,"index":417},{"krate":0,"index":441},{"krate":0,"index":439},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":434},{"krate":0,"index":442},{"krate":0,"index":473},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":467},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":475},{"krate":0,"index":486},{"krate":0,"index":484},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":488},{"krate":0,"index":496},{"krate":0,"index":494},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":498},{"krate":0,"index":507},{"krate":0,"index":505},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":282},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":292}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"/ Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":52687,"byte_end":52759,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53471,"byte_end":53482,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since, destructor }","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53393,"byte_end":53429,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":408},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53522,"byte_end":53526,"line_start":24,"line_end":24,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53489,"byte_end":53513,"line_start":23,"line_end":23,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":409},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53583,"byte_end":53592,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53546,"byte_end":53574,"line_start":25,"line_end":25,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":410},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53677,"byte_end":53682,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53623,"byte_end":53668,"line_start":27,"line_end":27,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":411},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53742,"byte_end":53752,"line_start":30,"line_end":30,"column_start":9,"column_end":19},"name":"destructor","qualname":"::wire::MessageDesc::destructor","value":"bool","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Whether this message is a destructor\n","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53693,"byte_end":53733,"line_start":29,"line_end":29,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":418},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53906,"byte_end":53909,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53894,"byte_end":53901,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":420},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53927,"byte_end":53931,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53915,"byte_end":53922,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":422},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53974,"byte_end":53979,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53937,"byte_end":53969,"line_start":40,"line_end":40,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":424},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54001,"byte_end":54004,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53985,"byte_end":53996,"line_start":42,"line_end":42,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":426},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54041,"byte_end":54047,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54010,"byte_end":54036,"line_start":44,"line_end":44,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":428},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54098,"byte_end":54103,"line_start":47,"line_end":47,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54053,"byte_end":54093,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":430},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54125,"byte_end":54130,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54109,"byte_end":54120,"line_start":48,"line_end":48,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":432},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54150,"byte_end":54152,"line_start":51,"line_end":51,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54136,"byte_end":54145,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":417},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53875,"byte_end":53887,"line_start":35,"line_end":35,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"pub enum ArgumentType {\n\n    /// i32\n    Int,\n\n    /// u32\n    Uint,\n\n    /// fixed point, 1/256 precision\n    Fixed,\n\n    /// CString\n    Str,\n\n    /// id of a wayland object\n    Object,\n\n    /// id of a newly created wayland object\n    NewId,\n\n    /// Vec<u8>\n    Array,\n\n    /// RawFd\n    Fd,\n}","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":53763,"byte_end":53824,"line_start":33,"line_end":33,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54328,"byte_end":54331,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54316,"byte_end":54323,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":446},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54354,"byte_end":54358,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54342,"byte_end":54349,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":449},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54406,"byte_end":54411,"line_start":63,"line_end":63,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54369,"byte_end":54401,"line_start":62,"line_end":62,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":452},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54611,"byte_end":54614,"line_start":68,"line_end":68,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(Box<CString>)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" CString","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54422,"byte_end":54433,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54438,"byte_end":54441,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54446,"byte_end":54522,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `string` arguments are pretty rare in the protocol.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54527,"byte_end":54606,"line_start":67,"line_end":67,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":455},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54665,"byte_end":54671,"line_start":70,"line_end":70,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54634,"byte_end":54660,"line_start":69,"line_end":69,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54727,"byte_end":54732,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54682,"byte_end":54722,"line_start":71,"line_end":71,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":461},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54931,"byte_end":54936,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Box<Vec<u8>>)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Vec<u8>","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54743,"byte_end":54754,"line_start":73,"line_end":73,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54759,"byte_end":54762,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54767,"byte_end":54843,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `array` arguments are pretty rare in the protocol.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54848,"byte_end":54926,"line_start":76,"line_end":76,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54970,"byte_end":54972,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54956,"byte_end":54965,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":442},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54301,"byte_end":54309,"line_start":57,"line_end":57,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"pub enum Argument {\n\n    /// i32\n    Int(i32),\n\n    /// u32\n    Uint(u32),\n\n    /// fixed point, 1/256 precision\n    Fixed(i32),\n\n    /// CString\n    ///\n    /// The value is boxed to reduce the stack size of Argument. The performance\n    /// impact is negligible as `string` arguments are pretty rare in the protocol.\n    Str(Box<CString>),\n\n    /// id of a wayland object\n    Object(u32),\n\n    /// id of a newly created wayland object\n    NewId(u32),\n\n    /// Vec<u8>\n    ///\n    /// The value is boxed to reduce the stack size of Argument. The performance\n    /// impact is negligible as `array` arguments are pretty rare in the protocol.\n    Array(Box<Vec<u8>>),\n\n    /// RawFd\n    Fd(RawFd),\n}","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54157,"byte_end":54230,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"allow(clippy :: box_vec)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54266,"byte_end":54291,"line_start":56,"line_end":56,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":55066,"byte_end":55074,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"pub fn get_type(&Self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":55004,"byte_end":55054,"line_start":83,"line_end":83,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":475},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56276,"byte_end":56283,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56211,"byte_end":56229,"line_start":113,"line_end":113,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":476},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56340,"byte_end":56349,"line_start":117,"line_end":117,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56290,"byte_end":56331,"line_start":116,"line_end":116,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":477},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56394,"byte_end":56400,"line_start":119,"line_end":119,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56360,"byte_end":56385,"line_start":118,"line_end":118,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":478},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56448,"byte_end":56452,"line_start":121,"line_end":121,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"smallvec::SmallVec<[wire::Argument; _]>","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56411,"byte_end":56439,"line_start":120,"line_end":120,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56678,"byte_end":56692,"line_start":128,"line_end":128,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56617,"byte_end":56673,"line_start":127,"line_end":127,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":491},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56757,"byte_end":56768,"line_start":130,"line_end":130,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56698,"byte_end":56752,"line_start":129,"line_end":129,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":488},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56593,"byte_end":56610,"line_start":126,"line_end":126,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"pub enum MessageWriteError {\n\n    /// The buffer is too small to hold the message contents\n    BufferTooSmall,\n\n    /// The message contains a FD that could not be dup-ed\n    DupFdFailed(::nix::Error),\n}","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":491}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56492,"byte_end":56559,"line_start":124,"line_end":124,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":499},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57515,"byte_end":57524,"line_start":152,"line_end":152,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57452,"byte_end":57510,"line_start":151,"line_end":151,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":501},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57585,"byte_end":57596,"line_start":154,"line_end":154,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57530,"byte_end":57580,"line_start":153,"line_end":153,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57656,"byte_end":57665,"line_start":156,"line_end":156,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57602,"byte_end":57651,"line_start":155,"line_end":155,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":498},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57428,"byte_end":57445,"line_start":150,"line_end":150,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"pub enum MessageParseError {\n\n    /// The message references a FD but the buffer FD is empty\n    MissingFD,\n\n    /// More data is needed to deserialize the message\n    MissingData,\n\n    /// The message is malformed and cannot be parsed\n    Malformed,\n}","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57325,"byte_end":57394,"line_start":148,"line_end":148,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58548,"byte_end":58564,"line_start":183,"line_end":183,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"pub fn write_to_buffers(&Self, &mut [u32], &mut [RawFd])\n-> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58334,"byte_end":58398,"line_start":178,"line_end":178,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58403,"byte_end":58406,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58411,"byte_end":58468,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58473,"byte_end":58476,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58481,"byte_end":58536,"line_start":182,"line_end":182,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62353,"byte_end":62361,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"pub fn from_raw<'a, 'b>(&'a [u32], &[ArgumentType], &'b [RawFd])\n-> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":61985,"byte_end":62057,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62062,"byte_end":62065,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62070,"byte_end":62150,"line_start":269,"line_end":269,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62155,"byte_end":62239,"line_start":270,"line_end":270,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62244,"byte_end":62289,"line_start":271,"line_end":271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62294,"byte_end":62297,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":62302,"byte_end":62341,"line_start":273,"line_end":273,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":65907,"byte_end":65921,"line_start":360,"line_end":360,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"pub fn dup_fd_cloexec(RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":65839,"byte_end":65899,"line_start":359,"line_end":359,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":296},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1279,"byte_end":1291,"line_start":40,"line_end":40,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":984,"byte_end":1007,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1008,"byte_end":1011,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1012,"byte_end":1095,"line_start":35,"line_end":35,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1096,"byte_end":1162,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1163,"byte_end":1166,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1167,"byte_end":1219,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1220,"byte_end":1268,"line_start":39,"line_end":39,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1360,"byte_end":1368,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1305,"byte_end":1349,"line_start":41,"line_end":41,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":298},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1541,"byte_end":1544,"line_start":45,"line_end":45,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1404,"byte_end":1473,"line_start":43,"line_end":43,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1478,"byte_end":1531,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1588,"byte_end":1594,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"pub fn opcode(&Self) -> u16","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1550,"byte_end":1580,"line_start":46,"line_end":46,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1756,"byte_end":1769,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"pub fn is_destructor(&Self) -> bool","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1614,"byte_end":1654,"line_start":48,"line_end":48,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1659,"byte_end":1662,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1667,"byte_end":1748,"line_start":50,"line_end":50,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1858,"byte_end":1863,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"since","qualname":"::MessageGroup::since","value":"pub fn since(&Self) -> u32","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The minimal object version for which this message exists\n","sig":null,"attributes":[{"value":"/ The minimal object version for which this message exists","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1790,"byte_end":1850,"line_start":52,"line_end":52,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1958,"byte_end":1963,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"pub fn child<Meta: self::map::ObjectMetadata>(u16, u32, &Meta)\n-> Option<crate::map::Object<Meta>>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1883,"byte_end":1950,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2284,"byte_end":2292,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"pub fn from_raw(wire::Message, &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2109,"byte_end":2160,"line_start":60,"line_end":60,"column_start":5,"column_end":56}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2243,"byte_end":2276,"line_start":62,"line_end":62,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2416,"byte_end":2424,"line_start":65,"line_end":65,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"pub fn into_raw(Self, u32) -> wire::Message","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2359,"byte_end":2408,"line_start":64,"line_end":64,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2801,"byte_end":2811,"line_start":74,"line_end":74,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"pub unsafe fn from_raw_c(*mut c_void, u32, *const syscom::wl_argument)\n-> Result<Self, ()>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation","sig":null,"attributes":[{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2467,"byte_end":2530,"line_start":66,"line_end":66,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2535,"byte_end":2538,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2543,"byte_end":2555,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2560,"byte_end":2563,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The pointers provided to this function must all be valid pointers from","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2568,"byte_end":2642,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ `libwayland-client`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2647,"byte_end":2670,"line_start":71,"line_end":71,"column_start":5,"column_end":28}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2753,"byte_end":2786,"line_start":73,"line_end":73,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3221,"byte_end":3232,"line_start":85,"line_end":85,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"pub fn as_raw_c_in<F, T>(Self, F) -> T where\nF: FnOnce(u32, &mut [syscom::wl_argument]) -> T","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"/ Build a C representation of this message","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2933,"byte_end":2977,"line_start":79,"line_end":79,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2982,"byte_end":2985,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":2990,"byte_end":3062,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3067,"byte_end":3083,"line_start":82,"line_end":82,"column_start":5,"column_end":21}},{"value":"allow(clippy :: clippy :: wrong_self_convention)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3166,"byte_end":3213,"line_start":84,"line_end":84,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3485,"byte_end":3494,"line_start":94,"line_end":94,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3326,"byte_end":3368,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3369,"byte_end":3372,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3373,"byte_end":3425,"line_start":92,"line_end":92,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3426,"byte_end":3474,"line_start":93,"line_end":93,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":311},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3636,"byte_end":3643,"line_start":98,"line_end":98,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3510,"byte_end":3558,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3563,"byte_end":3566,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3571,"byte_end":3626,"line_start":97,"line_end":97,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":312},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3795,"byte_end":3800,"line_start":102,"line_end":102,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3673,"byte_end":3719,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3724,"byte_end":3727,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3732,"byte_end":3785,"line_start":101,"line_end":101,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":313},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3867,"byte_end":3871,"line_start":104,"line_end":104,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3830,"byte_end":3856,"line_start":103,"line_end":103,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":314},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4404,"byte_end":4411,"line_start":114,"line_end":114,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3891,"byte_end":3938,"line_start":105,"line_end":105,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3943,"byte_end":3946,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is the maximum version supported by the protocol specification currently","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":3951,"byte_end":4032,"line_start":107,"line_end":107,"column_start":5,"column_end":86}},{"value":"/ used by this library, and should not be used as-is in your code, as a version","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4037,"byte_end":4118,"line_start":108,"line_end":108,"column_start":5,"column_end":86}},{"value":"/ change can subtly change the behavior of some objects.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4123,"byte_end":4181,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4186,"byte_end":4189,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Server are supposed to be able to handle all versions from 1 to the one they","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4194,"byte_end":4274,"line_start":111,"line_end":111,"column_start":5,"column_end":85}},{"value":"/ advertise through the registry, and clients can choose any version among the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4279,"byte_end":4359,"line_start":112,"line_end":112,"column_start":5,"column_end":85}},{"value":"/ ones the server supports.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4364,"byte_end":4393,"line_start":113,"line_end":113,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4483,"byte_end":4494,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"pub fn c_interface() -> *const syscom::wl_interface","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4422,"byte_end":4475,"line_start":115,"line_end":115,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":316},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4604,"byte_end":4613,"line_start":120,"line_end":120,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"pub enum NoMessage { }","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4532,"byte_end":4594,"line_start":119,"line_end":119,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":331},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5757,"byte_end":5768,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"ThreadGuard","qualname":"::ThreadGuard","value":"ThreadGuard {  }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" Stores a value in a threadafe container that\n only lets you access it from its owning thread","sig":null,"attributes":[{"value":"/ Stores a value in a threadafe container that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5544,"byte_end":5592,"line_start":159,"line_end":159,"column_start":1,"column_end":49}},{"value":"/ only lets you access it from its owning thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5593,"byte_end":5643,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5644,"byte_end":5647,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ If the ThreadGuard is dropped from the wrong thread,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5648,"byte_end":5704,"line_start":162,"line_end":162,"column_start":1,"column_end":57}},{"value":"/ the underlying value will be leaked.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5705,"byte_end":5745,"line_start":163,"line_end":163,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5933,"byte_end":5936,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<ThreadGuard<T>>::new","value":"pub fn new(T) -> ThreadGuard<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ThreadGuard wrapper\n","sig":null,"attributes":[{"value":"/ Create a new ThreadGuard wrapper","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5885,"byte_end":5921,"line_start":170,"line_end":170,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6204,"byte_end":6207,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"get","qualname":"<ThreadGuard<T>>::get","value":"pub fn get(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying value","sig":null,"attributes":[{"value":"/ Access the underlying value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6110,"byte_end":6141,"line_start":177,"line_end":177,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6146,"byte_end":6149,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6154,"byte_end":6192,"line_start":179,"line_end":179,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6435,"byte_end":6442,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ThreadGuard<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Mutably access the underlying value","sig":null,"attributes":[{"value":"/ Mutably access the underlying value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6333,"byte_end":6372,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6377,"byte_end":6380,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6385,"byte_end":6423,"line_start":186,"line_end":186,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6702,"byte_end":6709,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"try_get","qualname":"<ThreadGuard<T>>::try_get","value":"pub fn try_get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to access the underlying value","sig":null,"attributes":[{"value":"/ Try to access the underlying value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6593,"byte_end":6631,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6636,"byte_end":6639,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6644,"byte_end":6690,"line_start":194,"line_end":194,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6991,"byte_end":7002,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"try_get_mut","qualname":"<ThreadGuard<T>>::try_get_mut","value":"pub fn try_get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to mutably access the underlying value","sig":null,"attributes":[{"value":"/ Try to mutably access the underlying value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6874,"byte_end":6920,"line_start":203,"line_end":203,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6925,"byte_end":6928,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6933,"byte_end":6979,"line_start":205,"line_end":205,"column_start":5,"column_end":51}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10013,"byte_end":10025,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11737,"byte_end":11743,"line_start":70,"line_end":70,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11846,"byte_end":11852,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14248,"byte_end":14254,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16424,"byte_end":16433,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21393,"byte_end":21399,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23354,"byte_end":23360,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23460,"byte_end":23466,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23548,"byte_end":23554,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23632,"byte_end":23638,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24023,"byte_end":24037,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":33946,"byte_end":33952,"line_start":379,"line_end":379,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43641,"byte_end":43649,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43674,"byte_end":43682,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43692,"byte_end":43700,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":45480,"byte_end":45488,"line_start":74,"line_end":74,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46079,"byte_end":46090,"line_start":94,"line_end":94,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":48164,"byte_end":48175,"line_start":154,"line_end":154,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":48836,"byte_end":48846,"line_start":183,"line_end":183,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51154,"byte_end":51164,"line_start":264,"line_end":264,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51434,"byte_end":51452,"line_start":273,"line_end":273,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51946,"byte_end":51967,"line_start":292,"line_end":292,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54989,"byte_end":54997,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":55594,"byte_end":55602,"line_start":98,"line_end":98,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56814,"byte_end":56831,"line_start":133,"line_end":133,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56863,"byte_end":56880,"line_start":135,"line_end":135,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57697,"byte_end":57714,"line_start":159,"line_end":159,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57746,"byte_end":57763,"line_start":161,"line_end":161,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58320,"byte_end":58327,"line_start":177,"line_end":177,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":67107,"byte_end":67114,"line_start":397,"line_end":397,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":67329,"byte_end":67336,"line_start":409,"line_end":409,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4671,"byte_end":4680,"line_start":123,"line_end":123,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5864,"byte_end":5875,"line_start":169,"line_end":169,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6089,"byte_end":6100,"line_start":176,"line_end":176,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7202,"byte_end":7213,"line_start":215,"line_end":215,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7562,"byte_end":7573,"line_start":225,"line_end":225,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7612,"byte_end":7623,"line_start":226,"line_end":226,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":869,"byte_end":874,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":884,"byte_end":890,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":15}},{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":900,"byte_end":903,"line_start":26,"line_end":26,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":913,"byte_end":919,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":88}},{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":929,"byte_end":938,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":154}},{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":948,"byte_end":952,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":247}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":10013,"byte_end":10025,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11737,"byte_end":11743,"line_start":70,"line_end":70,"column_start":19,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/filter.rs","byte_start":11846,"byte_end":11852,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":13053,"byte_end":13058,"line_start":11,"line_end":11,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1762},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":14248,"byte_end":14254,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/map.rs","byte_start":16424,"byte_end":16433,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":21393,"byte_end":21399,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23354,"byte_end":23360,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8843}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23460,"byte_end":23466,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8841}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23548,"byte_end":23554,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8845}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":23632,"byte_end":23638,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":24023,"byte_end":24037,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/socket.rs","byte_start":33946,"byte_end":33952,"line_start":379,"line_end":379,"column_start":25,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43641,"byte_end":43649,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":2071}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43674,"byte_end":43682,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":2083}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":43692,"byte_end":43700,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":45480,"byte_end":45488,"line_start":74,"line_end":74,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":46079,"byte_end":46090,"line_start":94,"line_end":94,"column_start":6,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":48164,"byte_end":48175,"line_start":154,"line_end":154,"column_start":18,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":48836,"byte_end":48846,"line_start":183,"line_end":183,"column_start":13,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51154,"byte_end":51164,"line_start":264,"line_end":264,"column_start":22,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51434,"byte_end":51452,"line_start":273,"line_end":273,"column_start":34,"column_end":52},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":389},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/user_data.rs","byte_start":51946,"byte_end":51967,"line_start":292,"line_end":292,"column_start":34,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":398},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":54989,"byte_end":54997,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":55594,"byte_end":55602,"line_start":98,"line_end":98,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":442},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56814,"byte_end":56831,"line_start":133,"line_end":133,"column_start":28,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":488},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":56863,"byte_end":56880,"line_start":135,"line_end":135,"column_start":28,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57697,"byte_end":57714,"line_start":159,"line_end":159,"column_start":28,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":498},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":57746,"byte_end":57763,"line_start":161,"line_end":161,"column_start":28,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":498},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":58320,"byte_end":58327,"line_start":177,"line_end":177,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":67107,"byte_end":67114,"line_start":397,"line_end":397,"column_start":6,"column_end":13},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/wire.rs","byte_start":67329,"byte_end":67336,"line_start":409,"line_end":409,"column_start":15,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":286},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":1293,"byte_end":1298,"line_start":40,"line_end":40,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":296}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":4671,"byte_end":4680,"line_start":123,"line_end":123,"column_start":23,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":316},"to":{"krate":0,"index":296}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":5864,"byte_end":5875,"line_start":169,"line_end":169,"column_start":9,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":6089,"byte_end":6100,"line_start":176,"line_end":176,"column_start":17,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7202,"byte_end":7213,"line_start":215,"line_end":215,"column_start":26,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":331},"to":{"krate":2,"index":2295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7562,"byte_end":7573,"line_start":225,"line_end":225,"column_start":33,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":331},"to":{"krate":2,"index":2071}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.28.5/src/lib.rs","byte_start":7612,"byte_end":7623,"line_start":226,"line_end":226,"column_start":33,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":331},"to":{"krate":2,"index":2083}}]}