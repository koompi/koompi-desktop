{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2","program":"/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","safe_arch","--edition=2018","/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=9ae3d6428c82b0a3","-C","extra-filename=-9ae3d6428c82b0a3","--out-dir","/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","-L","dependency=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","--extern","bytemuck=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libbytemuck-d40d380c3f339def.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libsafe_arch-9ae3d6428c82b0a3.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[11038504263153580754,12091260226639344832]},"crate_root":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src","external_crates":[{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[13300038299743649120,10384484905238779108]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","num":6,"id":{"name":"bytemuck_derive","disambiguator":[6247392092230105806,8163925577197420074]}}],"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":833},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":41}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12442,"byte_end":12495,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12496,"byte_end":12499,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12500,"byte_end":12579,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12580,"byte_end":12653,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12654,"byte_end":12722,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12723,"byte_end":12739,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12740,"byte_end":12771,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12772,"byte_end":12775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12776,"byte_end":12788,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12789,"byte_end":12867,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12868,"byte_end":12934,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":12935,"byte_end":13003,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13004,"byte_end":13080,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13081,"byte_end":13124,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13125,"byte_end":13198,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13199,"byte_end":13279,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13280,"byte_end":13354,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13355,"byte_end":13430,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13431,"byte_end":13508,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13509,"byte_end":13512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13513,"byte_end":13530,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13531,"byte_end":13608,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13609,"byte_end":13683,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13684,"byte_end":13763,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13764,"byte_end":13820,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13821,"byte_end":13824,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13825,"byte_end":13895,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13896,"byte_end":13975,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":13976,"byte_end":14056,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14057,"byte_end":14120,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14121,"byte_end":14124,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14125,"byte_end":14199,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14200,"byte_end":14280,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14281,"byte_end":14355,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14356,"byte_end":14434,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14435,"byte_end":14497,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14498,"byte_end":14562,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14563,"byte_end":14566,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14567,"byte_end":14592,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14593,"byte_end":14669,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14670,"byte_end":14673,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14674,"byte_end":14713,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14714,"byte_end":14794,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14795,"byte_end":14875,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14876,"byte_end":14912,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14913,"byte_end":14954,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":14955,"byte_end":15029,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15030,"byte_end":15107,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15108,"byte_end":15187,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15188,"byte_end":15247,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15248,"byte_end":15293,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15294,"byte_end":15365,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15366,"byte_end":15422,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15423,"byte_end":15455,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15456,"byte_end":15535,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15536,"byte_end":15615,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15616,"byte_end":15673,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15674,"byte_end":15745,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15746,"byte_end":15813,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15814,"byte_end":15872,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15873,"byte_end":15951,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":15952,"byte_end":16031,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16032,"byte_end":16112,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16113,"byte_end":16191,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16192,"byte_end":16237,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16238,"byte_end":16318,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16319,"byte_end":16395,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16396,"byte_end":16408,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16409,"byte_end":16485,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16486,"byte_end":16564,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16565,"byte_end":16645,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16646,"byte_end":16665,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16666,"byte_end":16688,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16689,"byte_end":16766,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16767,"byte_end":16839,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16840,"byte_end":16920,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16921,"byte_end":16987,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":16988,"byte_end":17065,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17066,"byte_end":17114,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17115,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17194,"byte_end":17270,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17271,"byte_end":17350,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17351,"byte_end":17430,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17431,"byte_end":17492,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17493,"byte_end":17564,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17565,"byte_end":17602,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17603,"byte_end":17682,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17683,"byte_end":17763,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17764,"byte_end":17796,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17797,"byte_end":17861,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17862,"byte_end":17927,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17928,"byte_end":17997,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":17998,"byte_end":18075,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18076,"byte_end":18147,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18148,"byte_end":18225,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18226,"byte_end":18305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18306,"byte_end":18380,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18381,"byte_end":18393,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18394,"byte_end":18471,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18472,"byte_end":18551,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18552,"byte_end":18583,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18584,"byte_end":18659,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18660,"byte_end":18730,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18731,"byte_end":18811,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18812,"byte_end":18891,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18892,"byte_end":18968,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":18969,"byte_end":19042,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19043,"byte_end":19123,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19124,"byte_end":19200,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19201,"byte_end":19279,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19280,"byte_end":19343,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19344,"byte_end":19420,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19421,"byte_end":19498,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19499,"byte_end":19578,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19579,"byte_end":19641,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19642,"byte_end":19718,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19719,"byte_end":19735,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19736,"byte_end":19815,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19816,"byte_end":19851,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19852,"byte_end":19926,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19927,"byte_end":19980,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":19981,"byte_end":20058,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20059,"byte_end":20139,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20140,"byte_end":20218,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20219,"byte_end":20284,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20285,"byte_end":20365,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20366,"byte_end":20444,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20445,"byte_end":20500,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20501,"byte_end":20581,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20582,"byte_end":20638,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20639,"byte_end":20719,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20720,"byte_end":20795,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20796,"byte_end":20873,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20874,"byte_end":20951,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":20952,"byte_end":21030,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21031,"byte_end":21098,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21099,"byte_end":21119,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21120,"byte_end":21200,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21201,"byte_end":21272,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21273,"byte_end":21352,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21353,"byte_end":21381,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21382,"byte_end":21408,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21409,"byte_end":21465,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21466,"byte_end":21543,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21544,"byte_end":21622,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21623,"byte_end":21682,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21683,"byte_end":21705,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21706,"byte_end":21785,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21786,"byte_end":21866,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21867,"byte_end":21945,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21946,"byte_end":21964,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":21965,"byte_end":22029,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22030,"byte_end":22107,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22108,"byte_end":22182,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22183,"byte_end":22222,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22223,"byte_end":22302,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22303,"byte_end":22383,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22384,"byte_end":22427,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22428,"byte_end":22507,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22508,"byte_end":22588,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22589,"byte_end":22666,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22667,"byte_end":22746,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22747,"byte_end":22770,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22771,"byte_end":22851,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/naming_conventions.rs","byte_start":22852,"byte_end":22898,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781733,"byte_end":6781737,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781410,"byte_end":6781470,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781471,"byte_end":6781474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781475,"byte_end":6781553,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781554,"byte_end":6781627,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781628,"byte_end":6781669,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781670,"byte_end":6781690,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781691,"byte_end":6781721,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":46},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781738,"byte_end":6781748,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782301,"byte_end":6782309,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782132,"byte_end":6782170,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782173,"byte_end":6782176,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782179,"byte_end":6782257,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782260,"byte_end":6782271,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782274,"byte_end":6782291,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782536,"byte_end":6782546,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782353,"byte_end":6782389,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782392,"byte_end":6782395,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782398,"byte_end":6782475,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782478,"byte_end":6782492,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782495,"byte_end":6782506,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782509,"byte_end":6782526,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782780,"byte_end":6782787,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782596,"byte_end":6782659,"line_start":53,"line_end":53,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782662,"byte_end":6782665,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782668,"byte_end":6782736,"line_start":55,"line_end":55,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782739,"byte_end":6782750,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782753,"byte_end":6782770,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783045,"byte_end":6783054,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782857,"byte_end":6782920,"line_start":62,"line_end":62,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782923,"byte_end":6782926,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782929,"byte_end":6783001,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783004,"byte_end":6783015,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783018,"byte_end":6783035,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788728,"byte_end":6788733,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788405,"byte_end":6788465,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788466,"byte_end":6788469,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788470,"byte_end":6788548,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788549,"byte_end":6788622,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788623,"byte_end":6788664,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788665,"byte_end":6788685,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788686,"byte_end":6788716,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":92},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788734,"byte_end":6788745,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789307,"byte_end":6789315,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789137,"byte_end":6789176,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789179,"byte_end":6789182,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789185,"byte_end":6789263,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789266,"byte_end":6789277,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789280,"byte_end":6789297,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789544,"byte_end":6789554,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789359,"byte_end":6789396,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789399,"byte_end":6789402,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789405,"byte_end":6789483,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789486,"byte_end":6789500,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789503,"byte_end":6789514,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789517,"byte_end":6789534,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789785,"byte_end":6789792,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789604,"byte_end":6789668,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789671,"byte_end":6789674,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789677,"byte_end":6789741,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789744,"byte_end":6789755,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789758,"byte_end":6789775,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790047,"byte_end":6790056,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789862,"byte_end":6789926,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789929,"byte_end":6789932,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789935,"byte_end":6790003,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790006,"byte_end":6790017,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790020,"byte_end":6790037,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":136},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795566,"byte_end":6795571,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795086,"byte_end":6795142,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795143,"byte_end":6795146,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795147,"byte_end":6795220,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795221,"byte_end":6795299,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795300,"byte_end":6795318,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795319,"byte_end":6795399,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795400,"byte_end":6795477,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795478,"byte_end":6795502,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795503,"byte_end":6795523,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795524,"byte_end":6795554,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":138},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795572,"byte_end":6795583,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803915,"byte_end":6803919,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803591,"byte_end":6803652,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803653,"byte_end":6803656,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803657,"byte_end":6803735,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803736,"byte_end":6803809,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803810,"byte_end":6803851,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803852,"byte_end":6803872,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803873,"byte_end":6803903,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":240},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803920,"byte_end":6803930,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804483,"byte_end":6804491,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804314,"byte_end":6804352,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804355,"byte_end":6804358,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804361,"byte_end":6804439,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804442,"byte_end":6804453,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804456,"byte_end":6804473,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804718,"byte_end":6804728,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804535,"byte_end":6804571,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804574,"byte_end":6804577,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804580,"byte_end":6804657,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804660,"byte_end":6804674,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804677,"byte_end":6804688,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804691,"byte_end":6804708,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804957,"byte_end":6804964,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804772,"byte_end":6804835,"line_start":51,"line_end":51,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804838,"byte_end":6804841,"line_start":52,"line_end":52,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804844,"byte_end":6804913,"line_start":53,"line_end":53,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804916,"byte_end":6804927,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804930,"byte_end":6804947,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805223,"byte_end":6805232,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805034,"byte_end":6805097,"line_start":60,"line_end":60,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805100,"byte_end":6805103,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805106,"byte_end":6805179,"line_start":62,"line_end":62,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805182,"byte_end":6805193,"line_start":63,"line_end":63,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805196,"byte_end":6805213,"line_start":64,"line_end":64,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811025,"byte_end":6811030,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810701,"byte_end":6810762,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810763,"byte_end":6810766,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810767,"byte_end":6810845,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810846,"byte_end":6810919,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810920,"byte_end":6810961,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810962,"byte_end":6810982,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6810983,"byte_end":6811013,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":286},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811031,"byte_end":6811042,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811604,"byte_end":6811612,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811434,"byte_end":6811473,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811476,"byte_end":6811479,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811482,"byte_end":6811560,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811563,"byte_end":6811574,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811577,"byte_end":6811594,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811841,"byte_end":6811851,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811656,"byte_end":6811693,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811696,"byte_end":6811699,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811702,"byte_end":6811780,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811783,"byte_end":6811797,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811800,"byte_end":6811811,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811814,"byte_end":6811831,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812082,"byte_end":6812089,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811901,"byte_end":6811965,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811968,"byte_end":6811971,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811974,"byte_end":6812038,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812041,"byte_end":6812052,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812055,"byte_end":6812072,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812344,"byte_end":6812353,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812159,"byte_end":6812223,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812226,"byte_end":6812229,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812232,"byte_end":6812300,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812303,"byte_end":6812314,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812317,"byte_end":6812334,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817863,"byte_end":6817868,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817383,"byte_end":6817439,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817440,"byte_end":6817443,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817444,"byte_end":6817517,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817518,"byte_end":6817596,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817597,"byte_end":6817615,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817616,"byte_end":6817696,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817697,"byte_end":6817774,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817775,"byte_end":6817799,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817800,"byte_end":6817820,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817821,"byte_end":6817851,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":332},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817869,"byte_end":6817880,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826165,"byte_end":6826173,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825825,"byte_end":6825846,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825847,"byte_end":6825854,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825855,"byte_end":6825878,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825879,"byte_end":6825930,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825931,"byte_end":6825982,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6825983,"byte_end":6826021,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826022,"byte_end":6826064,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826065,"byte_end":6826072,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826073,"byte_end":6826084,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826085,"byte_end":6826102,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826608,"byte_end":6826618,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826245,"byte_end":6826289,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826290,"byte_end":6826297,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826298,"byte_end":6826321,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826322,"byte_end":6826373,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826374,"byte_end":6826425,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826426,"byte_end":6826466,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826467,"byte_end":6826507,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826508,"byte_end":6826515,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826516,"byte_end":6826527,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826528,"byte_end":6826545,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":440},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827030,"byte_end":6827041,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826690,"byte_end":6826710,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826711,"byte_end":6826718,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826719,"byte_end":6826742,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826743,"byte_end":6826794,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826795,"byte_end":6826846,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826847,"byte_end":6826888,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826889,"byte_end":6826929,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826930,"byte_end":6826937,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826938,"byte_end":6826949,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6826950,"byte_end":6826967,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827459,"byte_end":6827473,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827113,"byte_end":6827136,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827137,"byte_end":6827144,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827145,"byte_end":6827168,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827169,"byte_end":6827220,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827221,"byte_end":6827272,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827273,"byte_end":6827317,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827318,"byte_end":6827358,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827359,"byte_end":6827366,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827367,"byte_end":6827378,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827379,"byte_end":6827396,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827921,"byte_end":6827937,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827548,"byte_end":6827570,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827571,"byte_end":6827574,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827575,"byte_end":6827591,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827592,"byte_end":6827599,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827600,"byte_end":6827623,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827624,"byte_end":6827675,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827676,"byte_end":6827727,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827728,"byte_end":6827773,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827774,"byte_end":6827820,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827821,"byte_end":6827828,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827829,"byte_end":6827840,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6827841,"byte_end":6827858,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828416,"byte_end":6828434,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828011,"byte_end":6828056,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828057,"byte_end":6828060,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828061,"byte_end":6828077,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828078,"byte_end":6828085,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828086,"byte_end":6828109,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828110,"byte_end":6828161,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828162,"byte_end":6828213,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828214,"byte_end":6828261,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828262,"byte_end":6828315,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828316,"byte_end":6828323,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828324,"byte_end":6828335,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828336,"byte_end":6828353,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828888,"byte_end":6828904,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828508,"byte_end":6828530,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828531,"byte_end":6828534,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828535,"byte_end":6828551,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828552,"byte_end":6828559,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828560,"byte_end":6828583,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828584,"byte_end":6828635,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828636,"byte_end":6828687,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828688,"byte_end":6828733,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828734,"byte_end":6828787,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828788,"byte_end":6828795,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828796,"byte_end":6828807,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828808,"byte_end":6828825,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829411,"byte_end":6829429,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6828978,"byte_end":6829023,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829024,"byte_end":6829027,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829028,"byte_end":6829044,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829045,"byte_end":6829052,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829053,"byte_end":6829076,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829077,"byte_end":6829128,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829129,"byte_end":6829180,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829181,"byte_end":6829228,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829229,"byte_end":6829310,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829311,"byte_end":6829318,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829319,"byte_end":6829330,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829331,"byte_end":6829348,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829875,"byte_end":6829891,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829503,"byte_end":6829524,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829525,"byte_end":6829528,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829529,"byte_end":6829545,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829546,"byte_end":6829553,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829554,"byte_end":6829577,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829578,"byte_end":6829629,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829630,"byte_end":6829681,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829682,"byte_end":6829727,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829728,"byte_end":6829774,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829775,"byte_end":6829782,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829783,"byte_end":6829794,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829795,"byte_end":6829812,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830397,"byte_end":6830415,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6829965,"byte_end":6830009,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830010,"byte_end":6830013,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830014,"byte_end":6830030,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830031,"byte_end":6830038,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830039,"byte_end":6830062,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830063,"byte_end":6830114,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830115,"byte_end":6830166,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830167,"byte_end":6830214,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830215,"byte_end":6830296,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830297,"byte_end":6830304,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830305,"byte_end":6830316,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830317,"byte_end":6830334,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":448},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830862,"byte_end":6830878,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830489,"byte_end":6830511,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830512,"byte_end":6830515,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830516,"byte_end":6830532,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830533,"byte_end":6830540,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830541,"byte_end":6830564,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830565,"byte_end":6830616,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830617,"byte_end":6830668,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830669,"byte_end":6830714,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830715,"byte_end":6830761,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830762,"byte_end":6830769,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830770,"byte_end":6830781,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830782,"byte_end":6830799,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":449},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831385,"byte_end":6831403,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830952,"byte_end":6830997,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6830998,"byte_end":6831001,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831002,"byte_end":6831018,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831019,"byte_end":6831026,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831027,"byte_end":6831050,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831051,"byte_end":6831102,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831103,"byte_end":6831154,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831155,"byte_end":6831202,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831203,"byte_end":6831284,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831285,"byte_end":6831292,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831293,"byte_end":6831304,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831305,"byte_end":6831322,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831842,"byte_end":6831858,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831477,"byte_end":6831498,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831499,"byte_end":6831502,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831503,"byte_end":6831519,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831520,"byte_end":6831527,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831528,"byte_end":6831551,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831552,"byte_end":6831603,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831604,"byte_end":6831655,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831656,"byte_end":6831701,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831702,"byte_end":6831741,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831742,"byte_end":6831749,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831750,"byte_end":6831761,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831762,"byte_end":6831779,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":451},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832364,"byte_end":6832382,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831932,"byte_end":6831976,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831977,"byte_end":6831980,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831981,"byte_end":6831997,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6831998,"byte_end":6832005,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832006,"byte_end":6832029,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832030,"byte_end":6832081,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832082,"byte_end":6832133,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832134,"byte_end":6832181,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832182,"byte_end":6832263,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832264,"byte_end":6832271,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832272,"byte_end":6832283,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832284,"byte_end":6832301,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":452},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832830,"byte_end":6832847,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832456,"byte_end":6832478,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832479,"byte_end":6832482,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832483,"byte_end":6832499,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832500,"byte_end":6832507,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832508,"byte_end":6832531,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832532,"byte_end":6832583,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832584,"byte_end":6832635,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832636,"byte_end":6832682,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832683,"byte_end":6832729,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832730,"byte_end":6832737,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832738,"byte_end":6832749,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832750,"byte_end":6832767,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833321,"byte_end":6833340,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832922,"byte_end":6832967,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832968,"byte_end":6832971,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832972,"byte_end":6832988,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832989,"byte_end":6832996,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6832997,"byte_end":6833020,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833021,"byte_end":6833072,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833073,"byte_end":6833124,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833125,"byte_end":6833173,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833174,"byte_end":6833220,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833221,"byte_end":6833228,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833229,"byte_end":6833240,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833241,"byte_end":6833258,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":454},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833785,"byte_end":6833802,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833415,"byte_end":6833440,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833441,"byte_end":6833444,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833445,"byte_end":6833461,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833462,"byte_end":6833469,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833470,"byte_end":6833493,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833494,"byte_end":6833545,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833546,"byte_end":6833597,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833598,"byte_end":6833644,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833645,"byte_end":6833684,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833685,"byte_end":6833692,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833693,"byte_end":6833704,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833705,"byte_end":6833722,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":455},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834307,"byte_end":6834326,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833877,"byte_end":6833925,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833926,"byte_end":6833929,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833930,"byte_end":6833946,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833947,"byte_end":6833954,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833955,"byte_end":6833978,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6833979,"byte_end":6834030,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834031,"byte_end":6834082,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834083,"byte_end":6834131,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834132,"byte_end":6834206,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834207,"byte_end":6834214,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834215,"byte_end":6834226,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834227,"byte_end":6834244,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834777,"byte_end":6834794,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834401,"byte_end":6834425,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834426,"byte_end":6834429,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834430,"byte_end":6834446,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834447,"byte_end":6834454,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834455,"byte_end":6834478,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834479,"byte_end":6834530,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834531,"byte_end":6834582,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834583,"byte_end":6834629,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834630,"byte_end":6834676,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834677,"byte_end":6834684,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834685,"byte_end":6834696,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834697,"byte_end":6834714,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835298,"byte_end":6835317,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834869,"byte_end":6834916,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834917,"byte_end":6834920,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834921,"byte_end":6834937,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834938,"byte_end":6834945,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834946,"byte_end":6834969,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6834970,"byte_end":6835021,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835022,"byte_end":6835073,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835074,"byte_end":6835122,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835123,"byte_end":6835197,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835198,"byte_end":6835205,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835206,"byte_end":6835217,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835218,"byte_end":6835235,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":458},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835769,"byte_end":6835786,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835392,"byte_end":6835417,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835418,"byte_end":6835421,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835422,"byte_end":6835438,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835439,"byte_end":6835446,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835447,"byte_end":6835470,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835471,"byte_end":6835522,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835523,"byte_end":6835574,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835575,"byte_end":6835621,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835622,"byte_end":6835668,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835669,"byte_end":6835676,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835677,"byte_end":6835688,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835689,"byte_end":6835706,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":459},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836291,"byte_end":6836310,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835861,"byte_end":6835909,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835910,"byte_end":6835913,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835914,"byte_end":6835930,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835931,"byte_end":6835938,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835939,"byte_end":6835962,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6835963,"byte_end":6836014,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836015,"byte_end":6836066,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836067,"byte_end":6836115,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836116,"byte_end":6836190,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836191,"byte_end":6836198,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836199,"byte_end":6836210,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836211,"byte_end":6836228,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836768,"byte_end":6836785,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836385,"byte_end":6836409,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836410,"byte_end":6836413,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836414,"byte_end":6836430,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836431,"byte_end":6836438,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836439,"byte_end":6836462,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836463,"byte_end":6836514,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836515,"byte_end":6836566,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836567,"byte_end":6836613,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836614,"byte_end":6836667,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836668,"byte_end":6836675,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836676,"byte_end":6836687,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836688,"byte_end":6836705,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":461},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837289,"byte_end":6837308,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836860,"byte_end":6836907,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836908,"byte_end":6836911,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836912,"byte_end":6836928,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836929,"byte_end":6836936,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836937,"byte_end":6836960,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6836961,"byte_end":6837012,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837013,"byte_end":6837064,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837065,"byte_end":6837113,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837114,"byte_end":6837188,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837189,"byte_end":6837196,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837197,"byte_end":6837208,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837209,"byte_end":6837226,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":462},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837798,"byte_end":6837820,"line_start":418,"line_end":418,"column_start":8,"column_end":30},"name":"cmp_ordinary_mask_m128","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128","value":"pub fn cmp_ordinary_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837383,"byte_end":6837428,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837429,"byte_end":6837432,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837433,"byte_end":6837449,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837450,"byte_end":6837457,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837458,"byte_end":6837481,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837482,"byte_end":6837543,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837544,"byte_end":6837605,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordinary_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837606,"byte_end":6837657,"line_start":412,"line_end":412,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837658,"byte_end":6837697,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837698,"byte_end":6837705,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837706,"byte_end":6837717,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837718,"byte_end":6837735,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":463},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838372,"byte_end":6838396,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"cmp_ordinary_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128_s","value":"pub fn cmp_ordinary_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837895,"byte_end":6837963,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837964,"byte_end":6837967,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837968,"byte_end":6837984,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837985,"byte_end":6837992,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6837993,"byte_end":6838016,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838017,"byte_end":6838068,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838069,"byte_end":6838135,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordinary_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838136,"byte_end":6838189,"line_start":429,"line_end":429,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838190,"byte_end":6838271,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838272,"byte_end":6838279,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838280,"byte_end":6838291,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838292,"byte_end":6838309,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":464},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838891,"byte_end":6838910,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838471,"byte_end":6838510,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838511,"byte_end":6838514,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838515,"byte_end":6838531,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838532,"byte_end":6838539,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838540,"byte_end":6838563,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838564,"byte_end":6838625,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838626,"byte_end":6838687,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838688,"byte_end":6838736,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838737,"byte_end":6838790,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838791,"byte_end":6838798,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838799,"byte_end":6838810,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838811,"byte_end":6838828,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":465},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839448,"byte_end":6839469,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6838987,"byte_end":6839049,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839050,"byte_end":6839053,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839054,"byte_end":6839070,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839071,"byte_end":6839078,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839079,"byte_end":6839102,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839103,"byte_end":6839154,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839155,"byte_end":6839221,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839222,"byte_end":6839272,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839273,"byte_end":6839347,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839348,"byte_end":6839355,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839356,"byte_end":6839367,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839368,"byte_end":6839385,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":466},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839875,"byte_end":6839892,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839546,"byte_end":6839568,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839569,"byte_end":6839572,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839573,"byte_end":6839590,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839591,"byte_end":6839598,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839599,"byte_end":6839622,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839623,"byte_end":6839674,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839675,"byte_end":6839726,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839727,"byte_end":6839774,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839775,"byte_end":6839782,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839783,"byte_end":6839794,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839795,"byte_end":6839812,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":467},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840305,"byte_end":6840322,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839960,"byte_end":6839998,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6839999,"byte_end":6840002,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840003,"byte_end":6840020,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840021,"byte_end":6840028,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840029,"byte_end":6840052,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840053,"byte_end":6840104,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840105,"byte_end":6840156,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840157,"byte_end":6840204,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840205,"byte_end":6840212,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840213,"byte_end":6840224,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840225,"byte_end":6840242,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":468},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840723,"byte_end":6840740,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840390,"byte_end":6840416,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840417,"byte_end":6840420,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840421,"byte_end":6840438,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840439,"byte_end":6840446,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840447,"byte_end":6840470,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840471,"byte_end":6840522,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840523,"byte_end":6840574,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840575,"byte_end":6840622,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840623,"byte_end":6840630,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840631,"byte_end":6840642,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840643,"byte_end":6840660,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":469},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841150,"byte_end":6841167,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840808,"byte_end":6840843,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840844,"byte_end":6840847,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840848,"byte_end":6840865,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840866,"byte_end":6840873,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840874,"byte_end":6840897,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840898,"byte_end":6840949,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6840950,"byte_end":6841001,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841002,"byte_end":6841049,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841050,"byte_end":6841057,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841058,"byte_end":6841069,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841070,"byte_end":6841087,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":470},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841565,"byte_end":6841582,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841235,"byte_end":6841258,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841259,"byte_end":6841262,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841263,"byte_end":6841280,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841281,"byte_end":6841288,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841289,"byte_end":6841312,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841313,"byte_end":6841364,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841365,"byte_end":6841416,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841417,"byte_end":6841464,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841465,"byte_end":6841472,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841473,"byte_end":6841484,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841485,"byte_end":6841502,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":471},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841984,"byte_end":6842002,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841650,"byte_end":6841676,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841677,"byte_end":6841680,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841681,"byte_end":6841698,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841699,"byte_end":6841706,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841707,"byte_end":6841730,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841731,"byte_end":6841782,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841783,"byte_end":6841834,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841835,"byte_end":6841883,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841884,"byte_end":6841891,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841892,"byte_end":6841903,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6841904,"byte_end":6841921,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":472},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842503,"byte_end":6842529,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842071,"byte_end":6842136,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842137,"byte_end":6842144,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842145,"byte_end":6842168,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842169,"byte_end":6842220,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842221,"byte_end":6842281,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842282,"byte_end":6842322,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842323,"byte_end":6842330,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842331,"byte_end":6842370,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842371,"byte_end":6842410,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842411,"byte_end":6842422,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6842423,"byte_end":6842440,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":473},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843440,"byte_end":6843459,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843157,"byte_end":6843208,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843209,"byte_end":6843216,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843217,"byte_end":6843240,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843241,"byte_end":6843292,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843293,"byte_end":6843339,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843340,"byte_end":6843347,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843348,"byte_end":6843359,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843360,"byte_end":6843377,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":474},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843816,"byte_end":6843835,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843513,"byte_end":6843584,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843585,"byte_end":6843592,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843593,"byte_end":6843616,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843617,"byte_end":6843668,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843669,"byte_end":6843715,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843716,"byte_end":6843723,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843724,"byte_end":6843735,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6843736,"byte_end":6843753,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":475},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844635,"byte_end":6844643,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844292,"byte_end":6844313,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844314,"byte_end":6844321,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844322,"byte_end":6844345,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844346,"byte_end":6844401,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844402,"byte_end":6844454,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844455,"byte_end":6844493,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844494,"byte_end":6844534,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844535,"byte_end":6844542,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844543,"byte_end":6844554,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844555,"byte_end":6844572,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":476},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845086,"byte_end":6845096,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844715,"byte_end":6844759,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844760,"byte_end":6844767,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844768,"byte_end":6844791,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844792,"byte_end":6844847,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844848,"byte_end":6844900,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844901,"byte_end":6844941,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844942,"byte_end":6844985,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844986,"byte_end":6844993,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6844994,"byte_end":6845005,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845006,"byte_end":6845023,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":477},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845466,"byte_end":6845475,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845168,"byte_end":6845208,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845209,"byte_end":6845216,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845217,"byte_end":6845240,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845241,"byte_end":6845296,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845297,"byte_end":6845323,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845324,"byte_end":6845365,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845366,"byte_end":6845373,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845374,"byte_end":6845385,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845386,"byte_end":6845403,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":478},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845932,"byte_end":6845951,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845562,"byte_end":6845621,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845622,"byte_end":6845629,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845630,"byte_end":6845653,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845654,"byte_end":6845670,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845671,"byte_end":6845707,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845708,"byte_end":6845786,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845787,"byte_end":6845794,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845795,"byte_end":6845806,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845807,"byte_end":6845824,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6845825,"byte_end":6845869,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":479},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846440,"byte_end":6846455,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846069,"byte_end":6846133,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846134,"byte_end":6846141,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846142,"byte_end":6846165,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846166,"byte_end":6846182,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846183,"byte_end":6846215,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846216,"byte_end":6846294,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846295,"byte_end":6846302,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846303,"byte_end":6846314,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846315,"byte_end":6846332,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846333,"byte_end":6846377,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":480},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846879,"byte_end":6846896,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846512,"byte_end":6846572,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846573,"byte_end":6846580,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846581,"byte_end":6846604,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846605,"byte_end":6846660,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846661,"byte_end":6846695,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846696,"byte_end":6846778,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846779,"byte_end":6846786,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846787,"byte_end":6846798,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846799,"byte_end":6846816,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":481},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847469,"byte_end":6847488,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6846984,"byte_end":6847024,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847025,"byte_end":6847028,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847029,"byte_end":6847107,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847108,"byte_end":6847188,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847189,"byte_end":6847201,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847202,"byte_end":6847209,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847210,"byte_end":6847233,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847234,"byte_end":6847271,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847272,"byte_end":6847308,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847309,"byte_end":6847368,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847369,"byte_end":6847376,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847377,"byte_end":6847388,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847389,"byte_end":6847406,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":484},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847928,"byte_end":6847936,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847584,"byte_end":6847609,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847610,"byte_end":6847617,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847618,"byte_end":6847641,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847642,"byte_end":6847694,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847695,"byte_end":6847746,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847747,"byte_end":6847785,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847786,"byte_end":6847827,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847828,"byte_end":6847835,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847836,"byte_end":6847847,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6847848,"byte_end":6847865,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":485},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848377,"byte_end":6848387,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848008,"byte_end":6848056,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848057,"byte_end":6848064,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848065,"byte_end":6848088,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848089,"byte_end":6848141,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848142,"byte_end":6848193,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848194,"byte_end":6848234,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848235,"byte_end":6848276,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848277,"byte_end":6848284,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848285,"byte_end":6848296,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848297,"byte_end":6848314,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848802,"byte_end":6848810,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848459,"byte_end":6848484,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848485,"byte_end":6848492,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848493,"byte_end":6848516,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848517,"byte_end":6848569,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848570,"byte_end":6848621,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848622,"byte_end":6848660,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848661,"byte_end":6848701,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848702,"byte_end":6848709,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848710,"byte_end":6848721,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848722,"byte_end":6848739,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":487},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849251,"byte_end":6849261,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848882,"byte_end":6848930,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848931,"byte_end":6848938,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848939,"byte_end":6848962,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6848963,"byte_end":6849015,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849016,"byte_end":6849067,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849068,"byte_end":6849108,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849109,"byte_end":6849150,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849151,"byte_end":6849158,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849159,"byte_end":6849170,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849171,"byte_end":6849188,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849714,"byte_end":6849725,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849333,"byte_end":6849392,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849393,"byte_end":6849400,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849401,"byte_end":6849424,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849425,"byte_end":6849477,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849478,"byte_end":6849529,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849530,"byte_end":6849571,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849572,"byte_end":6849613,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849614,"byte_end":6849621,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849622,"byte_end":6849633,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849634,"byte_end":6849651,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850204,"byte_end":6850222,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849798,"byte_end":6849876,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849877,"byte_end":6849884,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849885,"byte_end":6849908,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849909,"byte_end":6849961,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6849962,"byte_end":6850013,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850014,"byte_end":6850062,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850063,"byte_end":6850103,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850104,"byte_end":6850111,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850112,"byte_end":6850123,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850124,"byte_end":6850141,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850704,"byte_end":6850722,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850297,"byte_end":6850375,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850376,"byte_end":6850383,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850384,"byte_end":6850407,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850408,"byte_end":6850460,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850461,"byte_end":6850512,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850513,"byte_end":6850561,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850562,"byte_end":6850603,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850604,"byte_end":6850611,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850612,"byte_end":6850623,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850624,"byte_end":6850641,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851150,"byte_end":6851164,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850797,"byte_end":6850835,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850836,"byte_end":6850839,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850840,"byte_end":6850903,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850904,"byte_end":6850911,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850912,"byte_end":6850935,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850936,"byte_end":6850991,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6850992,"byte_end":6851022,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851023,"byte_end":6851049,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851050,"byte_end":6851057,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851058,"byte_end":6851069,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851070,"byte_end":6851087,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851561,"byte_end":6851569,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851220,"byte_end":6851241,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851242,"byte_end":6851249,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851250,"byte_end":6851273,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851274,"byte_end":6851325,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851326,"byte_end":6851377,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851378,"byte_end":6851416,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851417,"byte_end":6851460,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851461,"byte_end":6851468,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851469,"byte_end":6851480,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851481,"byte_end":6851498,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852004,"byte_end":6852014,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851641,"byte_end":6851685,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851686,"byte_end":6851693,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851694,"byte_end":6851717,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851718,"byte_end":6851769,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851770,"byte_end":6851821,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851822,"byte_end":6851862,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851863,"byte_end":6851903,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851904,"byte_end":6851911,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851912,"byte_end":6851923,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6851924,"byte_end":6851941,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852425,"byte_end":6852435,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852086,"byte_end":6852106,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852107,"byte_end":6852114,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852115,"byte_end":6852138,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852139,"byte_end":6852190,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852191,"byte_end":6852242,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852243,"byte_end":6852283,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852284,"byte_end":6852324,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852325,"byte_end":6852332,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852333,"byte_end":6852344,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852345,"byte_end":6852362,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852892,"byte_end":6852907,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852506,"byte_end":6852543,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852544,"byte_end":6852551,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852552,"byte_end":6852575,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852576,"byte_end":6852627,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852628,"byte_end":6852670,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852671,"byte_end":6852714,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852715,"byte_end":6852734,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852735,"byte_end":6852785,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852786,"byte_end":6852791,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852792,"byte_end":6852799,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852800,"byte_end":6852811,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852812,"byte_end":6852829,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853373,"byte_end":6853390,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6852965,"byte_end":6853025,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853026,"byte_end":6853033,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853034,"byte_end":6853057,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853058,"byte_end":6853109,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853110,"byte_end":6853154,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853155,"byte_end":6853195,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853196,"byte_end":6853215,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853216,"byte_end":6853266,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853267,"byte_end":6853272,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853273,"byte_end":6853280,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853281,"byte_end":6853292,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853293,"byte_end":6853310,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853849,"byte_end":6853869,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853448,"byte_end":6853491,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853492,"byte_end":6853499,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853500,"byte_end":6853523,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853524,"byte_end":6853577,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853578,"byte_end":6853625,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853626,"byte_end":6853671,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853672,"byte_end":6853691,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853692,"byte_end":6853742,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853743,"byte_end":6853748,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853749,"byte_end":6853756,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853757,"byte_end":6853768,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853769,"byte_end":6853786,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854352,"byte_end":6854374,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853929,"byte_end":6853995,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6853996,"byte_end":6854003,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854004,"byte_end":6854027,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854028,"byte_end":6854081,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854082,"byte_end":6854131,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854132,"byte_end":6854174,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854175,"byte_end":6854194,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854195,"byte_end":6854245,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854246,"byte_end":6854251,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854252,"byte_end":6854259,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854260,"byte_end":6854271,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854272,"byte_end":6854289,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854766,"byte_end":6854774,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854434,"byte_end":6854495,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854496,"byte_end":6854503,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854504,"byte_end":6854527,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854528,"byte_end":6854580,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854581,"byte_end":6854643,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854644,"byte_end":6854665,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854666,"byte_end":6854673,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854674,"byte_end":6854685,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854686,"byte_end":6854703,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855203,"byte_end":6855213,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854884,"byte_end":6854945,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854946,"byte_end":6854953,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854954,"byte_end":6854977,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6854978,"byte_end":6855017,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855018,"byte_end":6855080,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855081,"byte_end":6855102,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855103,"byte_end":6855110,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855111,"byte_end":6855122,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855123,"byte_end":6855140,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855568,"byte_end":6855582,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855272,"byte_end":6855306,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855307,"byte_end":6855314,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855315,"byte_end":6855338,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855339,"byte_end":6855382,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855383,"byte_end":6855445,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855446,"byte_end":6855467,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855468,"byte_end":6855475,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855476,"byte_end":6855487,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855488,"byte_end":6855505,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855982,"byte_end":6855999,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855642,"byte_end":6855702,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855703,"byte_end":6855710,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855711,"byte_end":6855734,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855735,"byte_end":6855796,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855797,"byte_end":6855859,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855860,"byte_end":6855881,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855882,"byte_end":6855889,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855890,"byte_end":6855901,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6855902,"byte_end":6855919,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856341,"byte_end":6856352,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856110,"byte_end":6856129,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856130,"byte_end":6856137,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856138,"byte_end":6856161,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856162,"byte_end":6856199,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856200,"byte_end":6856240,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856241,"byte_end":6856248,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856249,"byte_end":6856260,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6856261,"byte_end":6856278,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858494,"byte_end":6858503,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858206,"byte_end":6858229,"line_start":1095,"line_end":1095,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858230,"byte_end":6858237,"line_start":1096,"line_end":1096,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858238,"byte_end":6858261,"line_start":1097,"line_end":1097,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858262,"byte_end":6858315,"line_start":1098,"line_end":1098,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858316,"byte_end":6858352,"line_start":1099,"line_end":1099,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858353,"byte_end":6858393,"line_start":1100,"line_end":1100,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858394,"byte_end":6858401,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858402,"byte_end":6858413,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858414,"byte_end":6858431,"line_start":1103,"line_end":1103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858873,"byte_end":6858884,"line_start":1119,"line_end":1119,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858562,"byte_end":6858608,"line_start":1109,"line_end":1109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858609,"byte_end":6858616,"line_start":1110,"line_end":1110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858617,"byte_end":6858640,"line_start":1111,"line_end":1111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858641,"byte_end":6858692,"line_start":1112,"line_end":1112,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858693,"byte_end":6858731,"line_start":1113,"line_end":1113,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858732,"byte_end":6858772,"line_start":1114,"line_end":1114,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858773,"byte_end":6858780,"line_start":1115,"line_end":1115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858781,"byte_end":6858792,"line_start":1116,"line_end":1116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858793,"byte_end":6858810,"line_start":1117,"line_end":1117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859293,"byte_end":6859303,"line_start":1134,"line_end":1134,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858943,"byte_end":6858987,"line_start":1123,"line_end":1123,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858988,"byte_end":6858995,"line_start":1124,"line_end":1124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6858996,"byte_end":6859019,"line_start":1125,"line_end":1125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859020,"byte_end":6859075,"line_start":1126,"line_end":1126,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859076,"byte_end":6859106,"line_start":1127,"line_end":1127,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859107,"byte_end":6859133,"line_start":1128,"line_end":1128,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859134,"byte_end":6859159,"line_start":1129,"line_end":1129,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859160,"byte_end":6859204,"line_start":1130,"line_end":1130,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859205,"byte_end":6859212,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859213,"byte_end":6859230,"line_start":1132,"line_end":1132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859696,"byte_end":6859708,"line_start":1148,"line_end":1148,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859391,"byte_end":6859444,"line_start":1138,"line_end":1138,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859445,"byte_end":6859452,"line_start":1139,"line_end":1139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859453,"byte_end":6859476,"line_start":1140,"line_end":1140,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859477,"byte_end":6859532,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859533,"byte_end":6859553,"line_start":1142,"line_end":1142,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859554,"byte_end":6859582,"line_start":1143,"line_end":1143,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859583,"byte_end":6859607,"line_start":1144,"line_end":1144,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859608,"byte_end":6859615,"line_start":1145,"line_end":1145,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859616,"byte_end":6859633,"line_start":1146,"line_end":1146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860160,"byte_end":6860176,"line_start":1163,"line_end":1163,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859782,"byte_end":6859848,"line_start":1152,"line_end":1152,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859849,"byte_end":6859856,"line_start":1153,"line_end":1153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859857,"byte_end":6859880,"line_start":1154,"line_end":1154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859881,"byte_end":6859936,"line_start":1155,"line_end":1155,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859937,"byte_end":6859967,"line_start":1156,"line_end":1156,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6859968,"byte_end":6860000,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860001,"byte_end":6860026,"line_start":1158,"line_end":1158,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860027,"byte_end":6860071,"line_start":1159,"line_end":1159,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860072,"byte_end":6860079,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860080,"byte_end":6860097,"line_start":1161,"line_end":1161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860640,"byte_end":6860658,"line_start":1178,"line_end":1178,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860265,"byte_end":6860326,"line_start":1167,"line_end":1167,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860327,"byte_end":6860334,"line_start":1168,"line_end":1168,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860335,"byte_end":6860358,"line_start":1169,"line_end":1169,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860359,"byte_end":6860414,"line_start":1170,"line_end":1170,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860415,"byte_end":6860445,"line_start":1171,"line_end":1171,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860446,"byte_end":6860480,"line_start":1172,"line_end":1172,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860481,"byte_end":6860506,"line_start":1173,"line_end":1173,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860507,"byte_end":6860551,"line_start":1174,"line_end":1174,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860552,"byte_end":6860559,"line_start":1175,"line_end":1175,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860560,"byte_end":6860577,"line_start":1176,"line_end":1176,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861253,"byte_end":6861273,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860747,"byte_end":6860791,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860792,"byte_end":6860795,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860796,"byte_end":6860874,"line_start":1184,"line_end":1184,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860875,"byte_end":6860955,"line_start":1185,"line_end":1185,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860956,"byte_end":6860968,"line_start":1186,"line_end":1186,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860969,"byte_end":6860976,"line_start":1187,"line_end":1187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6860977,"byte_end":6861000,"line_start":1188,"line_end":1188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861001,"byte_end":6861056,"line_start":1189,"line_end":1189,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861057,"byte_end":6861082,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861083,"byte_end":6861119,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861120,"byte_end":6861164,"line_start":1192,"line_end":1192,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861165,"byte_end":6861172,"line_start":1193,"line_end":1193,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861173,"byte_end":6861190,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861695,"byte_end":6861703,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861353,"byte_end":6861374,"line_start":1200,"line_end":1200,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861375,"byte_end":6861382,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861383,"byte_end":6861406,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861407,"byte_end":6861458,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861459,"byte_end":6861511,"line_start":1204,"line_end":1204,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861512,"byte_end":6861550,"line_start":1205,"line_end":1205,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861551,"byte_end":6861594,"line_start":1206,"line_end":1206,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861595,"byte_end":6861602,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861603,"byte_end":6861614,"line_start":1208,"line_end":1208,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861615,"byte_end":6861632,"line_start":1209,"line_end":1209,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862140,"byte_end":6862150,"line_start":1226,"line_end":1226,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861775,"byte_end":6861819,"line_start":1215,"line_end":1215,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861820,"byte_end":6861827,"line_start":1216,"line_end":1216,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861828,"byte_end":6861851,"line_start":1217,"line_end":1217,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861852,"byte_end":6861903,"line_start":1218,"line_end":1218,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861904,"byte_end":6861956,"line_start":1219,"line_end":1219,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861957,"byte_end":6861997,"line_start":1220,"line_end":1220,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6861998,"byte_end":6862039,"line_start":1221,"line_end":1221,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862040,"byte_end":6862047,"line_start":1222,"line_end":1222,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862048,"byte_end":6862059,"line_start":1223,"line_end":1223,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862060,"byte_end":6862077,"line_start":1224,"line_end":1224,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862901,"byte_end":6862920,"line_start":1245,"line_end":1245,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862222,"byte_end":6862277,"line_start":1230,"line_end":1230,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862278,"byte_end":6862285,"line_start":1231,"line_end":1231,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862286,"byte_end":6862309,"line_start":1232,"line_end":1232,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862310,"byte_end":6862365,"line_start":1233,"line_end":1233,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862366,"byte_end":6862421,"line_start":1234,"line_end":1234,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862422,"byte_end":6862480,"line_start":1235,"line_end":1235,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862481,"byte_end":6862540,"line_start":1236,"line_end":1236,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862541,"byte_end":6862597,"line_start":1237,"line_end":1237,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862598,"byte_end":6862650,"line_start":1238,"line_end":1238,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862651,"byte_end":6862704,"line_start":1239,"line_end":1239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862705,"byte_end":6862758,"line_start":1240,"line_end":1240,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862759,"byte_end":6862812,"line_start":1241,"line_end":1241,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862813,"byte_end":6862820,"line_start":1242,"line_end":1242,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6862821,"byte_end":6862838,"line_start":1243,"line_end":1243,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863435,"byte_end":6863451,"line_start":1262,"line_end":1262,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863058,"byte_end":6863110,"line_start":1251,"line_end":1251,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863111,"byte_end":6863118,"line_start":1252,"line_end":1252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863119,"byte_end":6863142,"line_start":1253,"line_end":1253,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863143,"byte_end":6863194,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863195,"byte_end":6863246,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863247,"byte_end":6863293,"line_start":1256,"line_end":1256,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863294,"byte_end":6863334,"line_start":1257,"line_end":1257,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863335,"byte_end":6863342,"line_start":1258,"line_end":1258,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863343,"byte_end":6863354,"line_start":1259,"line_end":1259,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863355,"byte_end":6863372,"line_start":1260,"line_end":1260,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863903,"byte_end":6863918,"line_start":1277,"line_end":1277,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863528,"byte_end":6863579,"line_start":1266,"line_end":1266,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863580,"byte_end":6863587,"line_start":1267,"line_end":1267,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863588,"byte_end":6863611,"line_start":1268,"line_end":1268,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863612,"byte_end":6863663,"line_start":1269,"line_end":1269,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863664,"byte_end":6863715,"line_start":1270,"line_end":1270,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863716,"byte_end":6863761,"line_start":1271,"line_end":1271,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863762,"byte_end":6863802,"line_start":1272,"line_end":1272,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863803,"byte_end":6863810,"line_start":1273,"line_end":1273,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863811,"byte_end":6863822,"line_start":1274,"line_end":1274,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863823,"byte_end":6863840,"line_start":1275,"line_end":1275,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864335,"byte_end":6864346,"line_start":1292,"line_end":1292,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6863995,"byte_end":6864015,"line_start":1281,"line_end":1281,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864016,"byte_end":6864023,"line_start":1282,"line_end":1282,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864024,"byte_end":6864047,"line_start":1283,"line_end":1283,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864048,"byte_end":6864099,"line_start":1284,"line_end":1284,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864100,"byte_end":6864151,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864152,"byte_end":6864193,"line_start":1286,"line_end":1286,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864194,"byte_end":6864234,"line_start":1287,"line_end":1287,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864235,"byte_end":6864242,"line_start":1288,"line_end":1288,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864243,"byte_end":6864254,"line_start":1289,"line_end":1289,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6864255,"byte_end":6864272,"line_start":1290,"line_end":1290,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869645,"byte_end":6869657,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869123,"byte_end":6869163,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869164,"byte_end":6869171,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869172,"byte_end":6869195,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869196,"byte_end":6869207,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869208,"byte_end":6869285,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869286,"byte_end":6869311,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869312,"byte_end":6869382,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869383,"byte_end":6869390,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869391,"byte_end":6869439,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869440,"byte_end":6869455,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869456,"byte_end":6869464,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869465,"byte_end":6869536,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869537,"byte_end":6869543,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869544,"byte_end":6869551,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869552,"byte_end":6869563,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869564,"byte_end":6869581,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870135,"byte_end":6870148,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869735,"byte_end":6869776,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869777,"byte_end":6869784,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869785,"byte_end":6869808,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869809,"byte_end":6869867,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869868,"byte_end":6869929,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869930,"byte_end":6869979,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6869980,"byte_end":6870033,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870034,"byte_end":6870041,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870042,"byte_end":6870053,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870054,"byte_end":6870071,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870565,"byte_end":6870578,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870227,"byte_end":6870268,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870269,"byte_end":6870276,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870277,"byte_end":6870300,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870301,"byte_end":6870339,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870340,"byte_end":6870378,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870379,"byte_end":6870428,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870429,"byte_end":6870463,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870464,"byte_end":6870471,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870472,"byte_end":6870483,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870484,"byte_end":6870501,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870994,"byte_end":6871007,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870657,"byte_end":6870698,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870699,"byte_end":6870706,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870707,"byte_end":6870730,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870731,"byte_end":6870769,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870770,"byte_end":6870810,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870811,"byte_end":6870860,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870861,"byte_end":6870892,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870893,"byte_end":6870900,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870901,"byte_end":6870912,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6870913,"byte_end":6870930,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871406,"byte_end":6871415,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871086,"byte_end":6871107,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871108,"byte_end":6871115,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871116,"byte_end":6871139,"line_start":73,"line_end":73,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871140,"byte_end":6871184,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871185,"byte_end":6871230,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871231,"byte_end":6871270,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871271,"byte_end":6871304,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871305,"byte_end":6871312,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871313,"byte_end":6871324,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871325,"byte_end":6871342,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871839,"byte_end":6871850,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871491,"byte_end":6871536,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871537,"byte_end":6871544,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871545,"byte_end":6871568,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871569,"byte_end":6871613,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871614,"byte_end":6871661,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871662,"byte_end":6871703,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871704,"byte_end":6871737,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871738,"byte_end":6871745,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871746,"byte_end":6871757,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871758,"byte_end":6871775,"line_start":95,"line_end":95,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872573,"byte_end":6872596,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871926,"byte_end":6871977,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871978,"byte_end":6871985,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6871986,"byte_end":6872009,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872010,"byte_end":6872035,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872036,"byte_end":6872081,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872082,"byte_end":6872117,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872118,"byte_end":6872125,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872126,"byte_end":6872151,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872152,"byte_end":6872200,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872201,"byte_end":6872241,"line_start":110,"line_end":110,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872242,"byte_end":6872249,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872250,"byte_end":6872309,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872310,"byte_end":6872325,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872326,"byte_end":6872334,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872335,"byte_end":6872342,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872343,"byte_end":6872395,"line_start":116,"line_end":116,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872396,"byte_end":6872439,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872440,"byte_end":6872447,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872448,"byte_end":6872454,"line_start":119,"line_end":119,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872455,"byte_end":6872462,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872463,"byte_end":6872474,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872475,"byte_end":6872492,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872493,"byte_end":6872509,"line_start":123,"line_end":123,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":571},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873131,"byte_end":6873155,"line_start":140,"line_end":140,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872675,"byte_end":6872727,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872728,"byte_end":6872735,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872736,"byte_end":6872759,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872760,"byte_end":6872828,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872829,"byte_end":6872900,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872901,"byte_end":6872961,"line_start":134,"line_end":134,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6872962,"byte_end":6873029,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873030,"byte_end":6873037,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873038,"byte_end":6873049,"line_start":137,"line_end":137,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873050,"byte_end":6873067,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873844,"byte_end":6873867,"line_start":168,"line_end":168,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873235,"byte_end":6873286,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873287,"byte_end":6873294,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873295,"byte_end":6873318,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873319,"byte_end":6873344,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873345,"byte_end":6873382,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873383,"byte_end":6873414,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873415,"byte_end":6873422,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873423,"byte_end":6873448,"line_start":151,"line_end":151,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873449,"byte_end":6873488,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873489,"byte_end":6873524,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873525,"byte_end":6873532,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873533,"byte_end":6873592,"line_start":155,"line_end":155,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873593,"byte_end":6873608,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873609,"byte_end":6873617,"line_start":157,"line_end":157,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873618,"byte_end":6873625,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873626,"byte_end":6873670,"line_start":159,"line_end":159,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873671,"byte_end":6873710,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873711,"byte_end":6873718,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873719,"byte_end":6873725,"line_start":162,"line_end":162,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873726,"byte_end":6873733,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873734,"byte_end":6873745,"line_start":164,"line_end":164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873746,"byte_end":6873763,"line_start":165,"line_end":165,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873764,"byte_end":6873780,"line_start":166,"line_end":166,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":572},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874371,"byte_end":6874395,"line_start":183,"line_end":183,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873946,"byte_end":6873998,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6873999,"byte_end":6874006,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874007,"byte_end":6874030,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874031,"byte_end":6874088,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874089,"byte_end":6874150,"line_start":176,"line_end":176,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874151,"byte_end":6874211,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874212,"byte_end":6874269,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874270,"byte_end":6874277,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874278,"byte_end":6874289,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874290,"byte_end":6874307,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":573},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874789,"byte_end":6874801,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874475,"byte_end":6874495,"line_start":187,"line_end":187,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874496,"byte_end":6874503,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874504,"byte_end":6874527,"line_start":189,"line_end":189,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874528,"byte_end":6874570,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874571,"byte_end":6874613,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874614,"byte_end":6874656,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874657,"byte_end":6874687,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874688,"byte_end":6874695,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874696,"byte_end":6874707,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874708,"byte_end":6874725,"line_start":196,"line_end":196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875191,"byte_end":6875203,"line_start":213,"line_end":213,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874877,"byte_end":6874897,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874898,"byte_end":6874905,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874906,"byte_end":6874929,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874930,"byte_end":6874968,"line_start":205,"line_end":205,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6874969,"byte_end":6875007,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875008,"byte_end":6875056,"line_start":207,"line_end":207,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875057,"byte_end":6875089,"line_start":208,"line_end":208,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875090,"byte_end":6875097,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875098,"byte_end":6875109,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875110,"byte_end":6875127,"line_start":211,"line_end":211,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":575},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875602,"byte_end":6875617,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875282,"byte_end":6875305,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875306,"byte_end":6875313,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875314,"byte_end":6875337,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875338,"byte_end":6875380,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875381,"byte_end":6875423,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875424,"byte_end":6875469,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875470,"byte_end":6875500,"line_start":223,"line_end":223,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875501,"byte_end":6875508,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875509,"byte_end":6875520,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875521,"byte_end":6875538,"line_start":226,"line_end":226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":576},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876016,"byte_end":6876031,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875696,"byte_end":6875719,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875720,"byte_end":6875727,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875728,"byte_end":6875751,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875752,"byte_end":6875790,"line_start":235,"line_end":235,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875791,"byte_end":6875829,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875830,"byte_end":6875881,"line_start":237,"line_end":237,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875882,"byte_end":6875914,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875915,"byte_end":6875922,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875923,"byte_end":6875934,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6875935,"byte_end":6875952,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876697,"byte_end":6876713,"line_start":271,"line_end":271,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876113,"byte_end":6876153,"line_start":247,"line_end":247,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876154,"byte_end":6876161,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876162,"byte_end":6876185,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876186,"byte_end":6876211,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876212,"byte_end":6876249,"line_start":251,"line_end":251,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876250,"byte_end":6876281,"line_start":252,"line_end":252,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876282,"byte_end":6876289,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876290,"byte_end":6876315,"line_start":254,"line_end":254,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876316,"byte_end":6876355,"line_start":255,"line_end":255,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876356,"byte_end":6876391,"line_start":256,"line_end":256,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876392,"byte_end":6876399,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876400,"byte_end":6876452,"line_start":258,"line_end":258,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876453,"byte_end":6876468,"line_start":259,"line_end":259,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876469,"byte_end":6876477,"line_start":260,"line_end":260,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876478,"byte_end":6876485,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876486,"byte_end":6876528,"line_start":262,"line_end":262,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876529,"byte_end":6876563,"line_start":263,"line_end":263,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876564,"byte_end":6876571,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876572,"byte_end":6876578,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876579,"byte_end":6876586,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876587,"byte_end":6876598,"line_start":267,"line_end":267,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876599,"byte_end":6876616,"line_start":268,"line_end":268,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876617,"byte_end":6876633,"line_start":269,"line_end":269,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6877195,"byte_end":6877212,"line_start":286,"line_end":286,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876791,"byte_end":6876832,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876833,"byte_end":6876840,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876841,"byte_end":6876864,"line_start":277,"line_end":277,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876865,"byte_end":6876922,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876923,"byte_end":6876984,"line_start":279,"line_end":279,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6876985,"byte_end":6877038,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6877039,"byte_end":6877093,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6877094,"byte_end":6877101,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6877102,"byte_end":6877113,"line_start":283,"line_end":283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6877114,"byte_end":6877131,"line_start":284,"line_end":284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":580},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879064,"byte_end":6879087,"line_start":344,"line_end":344,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878730,"byte_end":6878776,"line_start":334,"line_end":334,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878777,"byte_end":6878784,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878785,"byte_end":6878808,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878809,"byte_end":6878851,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878852,"byte_end":6878911,"line_start":338,"line_end":338,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878912,"byte_end":6878962,"line_start":339,"line_end":339,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878963,"byte_end":6878970,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878971,"byte_end":6878982,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6878983,"byte_end":6879000,"line_start":342,"line_end":342,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":581},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879482,"byte_end":6879506,"line_start":358,"line_end":358,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879149,"byte_end":6879196,"line_start":348,"line_end":348,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879197,"byte_end":6879204,"line_start":349,"line_end":349,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879205,"byte_end":6879228,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879229,"byte_end":6879271,"line_start":351,"line_end":351,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879272,"byte_end":6879329,"line_start":352,"line_end":352,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879330,"byte_end":6879380,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879381,"byte_end":6879388,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879389,"byte_end":6879400,"line_start":355,"line_end":355,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879401,"byte_end":6879418,"line_start":356,"line_end":356,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":582},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879926,"byte_end":6879949,"line_start":372,"line_end":372,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879573,"byte_end":6879619,"line_start":362,"line_end":362,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879620,"byte_end":6879627,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879628,"byte_end":6879651,"line_start":364,"line_end":364,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879652,"byte_end":6879703,"line_start":365,"line_end":365,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879704,"byte_end":6879763,"line_start":366,"line_end":366,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879764,"byte_end":6879824,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879825,"byte_end":6879832,"line_start":368,"line_end":368,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879833,"byte_end":6879844,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6879845,"byte_end":6879862,"line_start":370,"line_end":370,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":583},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880370,"byte_end":6880393,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880012,"byte_end":6880058,"line_start":376,"line_end":376,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880059,"byte_end":6880066,"line_start":377,"line_end":377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880067,"byte_end":6880090,"line_start":378,"line_end":378,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880091,"byte_end":6880142,"line_start":379,"line_end":379,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880143,"byte_end":6880199,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880200,"byte_end":6880268,"line_start":381,"line_end":381,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880269,"byte_end":6880276,"line_start":382,"line_end":382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880277,"byte_end":6880288,"line_start":383,"line_end":383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880289,"byte_end":6880306,"line_start":384,"line_end":384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":584},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880787,"byte_end":6880811,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880459,"byte_end":6880506,"line_start":390,"line_end":390,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880507,"byte_end":6880514,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880515,"byte_end":6880538,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880539,"byte_end":6880577,"line_start":393,"line_end":393,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880578,"byte_end":6880638,"line_start":394,"line_end":394,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880639,"byte_end":6880685,"line_start":395,"line_end":395,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880686,"byte_end":6880693,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880694,"byte_end":6880705,"line_start":397,"line_end":397,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880706,"byte_end":6880723,"line_start":398,"line_end":398,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":585},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881190,"byte_end":6881213,"line_start":414,"line_end":414,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880878,"byte_end":6880924,"line_start":404,"line_end":404,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880925,"byte_end":6880932,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880933,"byte_end":6880956,"line_start":406,"line_end":406,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880957,"byte_end":6880995,"line_start":407,"line_end":407,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6880996,"byte_end":6881055,"line_start":408,"line_end":408,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881056,"byte_end":6881088,"line_start":409,"line_end":409,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881089,"byte_end":6881096,"line_start":410,"line_end":410,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881097,"byte_end":6881108,"line_start":411,"line_end":411,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881109,"byte_end":6881126,"line_start":412,"line_end":412,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":586},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881844,"byte_end":6881864,"line_start":434,"line_end":434,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881278,"byte_end":6881319,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881320,"byte_end":6881323,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881324,"byte_end":6881382,"line_start":420,"line_end":420,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881383,"byte_end":6881390,"line_start":421,"line_end":421,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881391,"byte_end":6881414,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881415,"byte_end":6881426,"line_start":423,"line_end":423,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881427,"byte_end":6881505,"line_start":424,"line_end":424,"column_start":1,"column_end":79}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881506,"byte_end":6881531,"line_start":425,"line_end":425,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881532,"byte_end":6881602,"line_start":426,"line_end":426,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881603,"byte_end":6881610,"line_start":427,"line_end":427,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881611,"byte_end":6881667,"line_start":428,"line_end":428,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881668,"byte_end":6881742,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881743,"byte_end":6881750,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881751,"byte_end":6881762,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881763,"byte_end":6881780,"line_start":432,"line_end":432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":587},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882410,"byte_end":6882431,"line_start":451,"line_end":451,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881944,"byte_end":6881986,"line_start":438,"line_end":438,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881987,"byte_end":6881990,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6881991,"byte_end":6882049,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882050,"byte_end":6882057,"line_start":441,"line_end":441,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882058,"byte_end":6882081,"line_start":442,"line_end":442,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882082,"byte_end":6882140,"line_start":443,"line_end":443,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882141,"byte_end":6882202,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882203,"byte_end":6882260,"line_start":445,"line_end":445,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882261,"byte_end":6882308,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882309,"byte_end":6882316,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882317,"byte_end":6882328,"line_start":448,"line_end":448,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882329,"byte_end":6882346,"line_start":449,"line_end":449,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":588},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882922,"byte_end":6882943,"line_start":468,"line_end":468,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882512,"byte_end":6882554,"line_start":455,"line_end":455,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882555,"byte_end":6882558,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882559,"byte_end":6882617,"line_start":457,"line_end":457,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882618,"byte_end":6882625,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882626,"byte_end":6882649,"line_start":459,"line_end":459,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882650,"byte_end":6882688,"line_start":460,"line_end":460,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882689,"byte_end":6882727,"line_start":461,"line_end":461,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882728,"byte_end":6882785,"line_start":462,"line_end":462,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882786,"byte_end":6882820,"line_start":463,"line_end":463,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882821,"byte_end":6882828,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882829,"byte_end":6882840,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6882841,"byte_end":6882858,"line_start":466,"line_end":466,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883381,"byte_end":6883398,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883024,"byte_end":6883059,"line_start":472,"line_end":472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883060,"byte_end":6883063,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883064,"byte_end":6883080,"line_start":474,"line_end":474,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883081,"byte_end":6883088,"line_start":475,"line_end":475,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883089,"byte_end":6883112,"line_start":476,"line_end":476,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883113,"byte_end":6883155,"line_start":477,"line_end":477,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883156,"byte_end":6883198,"line_start":478,"line_end":478,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883199,"byte_end":6883245,"line_start":479,"line_end":479,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883246,"byte_end":6883279,"line_start":480,"line_end":480,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883280,"byte_end":6883287,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883288,"byte_end":6883299,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883300,"byte_end":6883317,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883859,"byte_end":6883878,"line_start":502,"line_end":502,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883476,"byte_end":6883521,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883522,"byte_end":6883525,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883526,"byte_end":6883542,"line_start":491,"line_end":491,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883543,"byte_end":6883550,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883551,"byte_end":6883574,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883575,"byte_end":6883617,"line_start":494,"line_end":494,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883618,"byte_end":6883660,"line_start":495,"line_end":495,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883661,"byte_end":6883709,"line_start":496,"line_end":496,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883710,"byte_end":6883757,"line_start":497,"line_end":497,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883758,"byte_end":6883765,"line_start":498,"line_end":498,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883766,"byte_end":6883777,"line_start":499,"line_end":499,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883778,"byte_end":6883795,"line_start":500,"line_end":500,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":591},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884307,"byte_end":6884324,"line_start":519,"line_end":519,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883956,"byte_end":6883978,"line_start":506,"line_end":506,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883979,"byte_end":6883982,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6883983,"byte_end":6883999,"line_start":508,"line_end":508,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884000,"byte_end":6884007,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884008,"byte_end":6884031,"line_start":510,"line_end":510,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884032,"byte_end":6884074,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884075,"byte_end":6884117,"line_start":512,"line_end":512,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884118,"byte_end":6884164,"line_start":513,"line_end":513,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884165,"byte_end":6884205,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884206,"byte_end":6884213,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884214,"byte_end":6884225,"line_start":516,"line_end":516,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884226,"byte_end":6884243,"line_start":517,"line_end":517,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884785,"byte_end":6884804,"line_start":536,"line_end":536,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884402,"byte_end":6884447,"line_start":523,"line_end":523,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884448,"byte_end":6884451,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884452,"byte_end":6884468,"line_start":525,"line_end":525,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884469,"byte_end":6884476,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884477,"byte_end":6884500,"line_start":527,"line_end":527,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884501,"byte_end":6884543,"line_start":528,"line_end":528,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884544,"byte_end":6884586,"line_start":529,"line_end":529,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884587,"byte_end":6884635,"line_start":530,"line_end":530,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884636,"byte_end":6884683,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884684,"byte_end":6884691,"line_start":532,"line_end":532,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884692,"byte_end":6884703,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884704,"byte_end":6884721,"line_start":534,"line_end":534,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":593},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885453,"byte_end":6885473,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884882,"byte_end":6884922,"line_start":540,"line_end":540,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884923,"byte_end":6884926,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884927,"byte_end":6884985,"line_start":542,"line_end":542,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884986,"byte_end":6884993,"line_start":543,"line_end":543,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6884994,"byte_end":6885017,"line_start":544,"line_end":544,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885018,"byte_end":6885029,"line_start":545,"line_end":545,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885030,"byte_end":6885112,"line_start":546,"line_end":546,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885113,"byte_end":6885138,"line_start":547,"line_end":547,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885139,"byte_end":6885209,"line_start":548,"line_end":548,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885210,"byte_end":6885217,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885218,"byte_end":6885274,"line_start":550,"line_end":550,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885275,"byte_end":6885351,"line_start":551,"line_end":551,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885352,"byte_end":6885359,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885360,"byte_end":6885371,"line_start":553,"line_end":553,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885372,"byte_end":6885389,"line_start":554,"line_end":554,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":594},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886022,"byte_end":6886043,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885553,"byte_end":6885594,"line_start":560,"line_end":560,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885595,"byte_end":6885598,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885599,"byte_end":6885657,"line_start":562,"line_end":562,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885658,"byte_end":6885665,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885666,"byte_end":6885689,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885690,"byte_end":6885749,"line_start":565,"line_end":565,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885750,"byte_end":6885811,"line_start":566,"line_end":566,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885812,"byte_end":6885869,"line_start":567,"line_end":567,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885870,"byte_end":6885920,"line_start":568,"line_end":568,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885921,"byte_end":6885928,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885929,"byte_end":6885940,"line_start":570,"line_end":570,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6885941,"byte_end":6885958,"line_start":571,"line_end":571,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":595},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886535,"byte_end":6886556,"line_start":590,"line_end":590,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886124,"byte_end":6886165,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886166,"byte_end":6886169,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886170,"byte_end":6886228,"line_start":579,"line_end":579,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886229,"byte_end":6886236,"line_start":580,"line_end":580,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886237,"byte_end":6886260,"line_start":581,"line_end":581,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886261,"byte_end":6886301,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886302,"byte_end":6886340,"line_start":583,"line_end":583,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886341,"byte_end":6886398,"line_start":584,"line_end":584,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886399,"byte_end":6886433,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886434,"byte_end":6886441,"line_start":586,"line_end":586,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886442,"byte_end":6886453,"line_start":587,"line_end":587,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886454,"byte_end":6886471,"line_start":588,"line_end":588,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886980,"byte_end":6886997,"line_start":607,"line_end":607,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886637,"byte_end":6886658,"line_start":594,"line_end":594,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886659,"byte_end":6886662,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886663,"byte_end":6886679,"line_start":596,"line_end":596,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886680,"byte_end":6886687,"line_start":597,"line_end":597,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886688,"byte_end":6886711,"line_start":598,"line_end":598,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886712,"byte_end":6886754,"line_start":599,"line_end":599,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886755,"byte_end":6886797,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886798,"byte_end":6886844,"line_start":601,"line_end":601,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886845,"byte_end":6886878,"line_start":602,"line_end":602,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886879,"byte_end":6886886,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886887,"byte_end":6886898,"line_start":604,"line_end":604,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6886899,"byte_end":6886916,"line_start":605,"line_end":605,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887457,"byte_end":6887476,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887075,"byte_end":6887119,"line_start":611,"line_end":611,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887120,"byte_end":6887123,"line_start":612,"line_end":612,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887124,"byte_end":6887140,"line_start":613,"line_end":613,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887141,"byte_end":6887148,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887149,"byte_end":6887172,"line_start":615,"line_end":615,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887173,"byte_end":6887215,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887216,"byte_end":6887258,"line_start":617,"line_end":617,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887259,"byte_end":6887307,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887308,"byte_end":6887355,"line_start":619,"line_end":619,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887356,"byte_end":6887363,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887364,"byte_end":6887375,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887376,"byte_end":6887393,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":598},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887905,"byte_end":6887922,"line_start":641,"line_end":641,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887554,"byte_end":6887576,"line_start":628,"line_end":628,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887577,"byte_end":6887580,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887581,"byte_end":6887597,"line_start":630,"line_end":630,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887598,"byte_end":6887605,"line_start":631,"line_end":631,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887606,"byte_end":6887629,"line_start":632,"line_end":632,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887630,"byte_end":6887672,"line_start":633,"line_end":633,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887673,"byte_end":6887715,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887716,"byte_end":6887762,"line_start":635,"line_end":635,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887763,"byte_end":6887803,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887804,"byte_end":6887811,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887812,"byte_end":6887823,"line_start":638,"line_end":638,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6887824,"byte_end":6887841,"line_start":639,"line_end":639,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":599},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888383,"byte_end":6888402,"line_start":658,"line_end":658,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888000,"byte_end":6888045,"line_start":645,"line_end":645,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888046,"byte_end":6888049,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888050,"byte_end":6888066,"line_start":647,"line_end":647,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888067,"byte_end":6888074,"line_start":648,"line_end":648,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888075,"byte_end":6888098,"line_start":649,"line_end":649,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888099,"byte_end":6888141,"line_start":650,"line_end":650,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888142,"byte_end":6888184,"line_start":651,"line_end":651,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888185,"byte_end":6888233,"line_start":652,"line_end":652,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888234,"byte_end":6888281,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888282,"byte_end":6888289,"line_start":654,"line_end":654,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888290,"byte_end":6888301,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888302,"byte_end":6888319,"line_start":656,"line_end":656,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":600},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889051,"byte_end":6889071,"line_start":678,"line_end":678,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888480,"byte_end":6888520,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888521,"byte_end":6888524,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888525,"byte_end":6888583,"line_start":664,"line_end":664,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888584,"byte_end":6888591,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888592,"byte_end":6888615,"line_start":666,"line_end":666,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888616,"byte_end":6888627,"line_start":667,"line_end":667,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888628,"byte_end":6888710,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888711,"byte_end":6888736,"line_start":669,"line_end":669,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888737,"byte_end":6888807,"line_start":670,"line_end":670,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888808,"byte_end":6888815,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888816,"byte_end":6888872,"line_start":672,"line_end":672,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888873,"byte_end":6888949,"line_start":673,"line_end":673,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888950,"byte_end":6888957,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888958,"byte_end":6888969,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6888970,"byte_end":6888987,"line_start":676,"line_end":676,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":601},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889616,"byte_end":6889637,"line_start":695,"line_end":695,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889151,"byte_end":6889192,"line_start":682,"line_end":682,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889193,"byte_end":6889196,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889197,"byte_end":6889255,"line_start":684,"line_end":684,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889256,"byte_end":6889263,"line_start":685,"line_end":685,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889264,"byte_end":6889287,"line_start":686,"line_end":686,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889288,"byte_end":6889347,"line_start":687,"line_end":687,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889348,"byte_end":6889409,"line_start":688,"line_end":688,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889410,"byte_end":6889467,"line_start":689,"line_end":689,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889468,"byte_end":6889514,"line_start":690,"line_end":690,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889515,"byte_end":6889522,"line_start":691,"line_end":691,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889523,"byte_end":6889534,"line_start":692,"line_end":692,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889535,"byte_end":6889552,"line_start":693,"line_end":693,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890128,"byte_end":6890149,"line_start":712,"line_end":712,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889718,"byte_end":6889759,"line_start":699,"line_end":699,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889760,"byte_end":6889763,"line_start":700,"line_end":700,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889764,"byte_end":6889822,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889823,"byte_end":6889830,"line_start":702,"line_end":702,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889831,"byte_end":6889854,"line_start":703,"line_end":703,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889855,"byte_end":6889895,"line_start":704,"line_end":704,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889896,"byte_end":6889934,"line_start":705,"line_end":705,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889935,"byte_end":6889992,"line_start":706,"line_end":706,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6889993,"byte_end":6890026,"line_start":707,"line_end":707,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890027,"byte_end":6890034,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890035,"byte_end":6890046,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890047,"byte_end":6890064,"line_start":710,"line_end":710,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":603},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890573,"byte_end":6890590,"line_start":729,"line_end":729,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890230,"byte_end":6890251,"line_start":716,"line_end":716,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890252,"byte_end":6890255,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890256,"byte_end":6890272,"line_start":718,"line_end":718,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890273,"byte_end":6890280,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890281,"byte_end":6890304,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890305,"byte_end":6890347,"line_start":721,"line_end":721,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890348,"byte_end":6890390,"line_start":722,"line_end":722,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890391,"byte_end":6890437,"line_start":723,"line_end":723,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890438,"byte_end":6890471,"line_start":724,"line_end":724,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890472,"byte_end":6890479,"line_start":725,"line_end":725,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890480,"byte_end":6890491,"line_start":726,"line_end":726,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890492,"byte_end":6890509,"line_start":727,"line_end":727,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":604},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891049,"byte_end":6891068,"line_start":746,"line_end":746,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890668,"byte_end":6890711,"line_start":733,"line_end":733,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890712,"byte_end":6890715,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890716,"byte_end":6890732,"line_start":735,"line_end":735,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890733,"byte_end":6890740,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890741,"byte_end":6890764,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890765,"byte_end":6890807,"line_start":738,"line_end":738,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890808,"byte_end":6890850,"line_start":739,"line_end":739,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890851,"byte_end":6890899,"line_start":740,"line_end":740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890900,"byte_end":6890947,"line_start":741,"line_end":741,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890948,"byte_end":6890955,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890956,"byte_end":6890967,"line_start":743,"line_end":743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6890968,"byte_end":6890985,"line_start":744,"line_end":744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891491,"byte_end":6891509,"line_start":763,"line_end":763,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891146,"byte_end":6891168,"line_start":750,"line_end":750,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891169,"byte_end":6891172,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891173,"byte_end":6891189,"line_start":752,"line_end":752,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891190,"byte_end":6891197,"line_start":753,"line_end":753,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891198,"byte_end":6891221,"line_start":754,"line_end":754,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891222,"byte_end":6891264,"line_start":755,"line_end":755,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891265,"byte_end":6891307,"line_start":756,"line_end":756,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891308,"byte_end":6891355,"line_start":757,"line_end":757,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891356,"byte_end":6891389,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891390,"byte_end":6891397,"line_start":759,"line_end":759,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891398,"byte_end":6891409,"line_start":760,"line_end":760,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891410,"byte_end":6891427,"line_start":761,"line_end":761,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":606},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891971,"byte_end":6891991,"line_start":780,"line_end":780,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891588,"byte_end":6891632,"line_start":767,"line_end":767,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891633,"byte_end":6891636,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891637,"byte_end":6891653,"line_start":769,"line_end":769,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891654,"byte_end":6891661,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891662,"byte_end":6891685,"line_start":771,"line_end":771,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891686,"byte_end":6891728,"line_start":772,"line_end":772,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891729,"byte_end":6891771,"line_start":773,"line_end":773,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891772,"byte_end":6891821,"line_start":774,"line_end":774,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891822,"byte_end":6891869,"line_start":775,"line_end":775,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891870,"byte_end":6891877,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891878,"byte_end":6891889,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6891890,"byte_end":6891907,"line_start":778,"line_end":778,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":607},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892418,"byte_end":6892436,"line_start":797,"line_end":797,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892070,"byte_end":6892095,"line_start":784,"line_end":784,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892096,"byte_end":6892099,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892100,"byte_end":6892116,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892117,"byte_end":6892124,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892125,"byte_end":6892148,"line_start":788,"line_end":788,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892149,"byte_end":6892191,"line_start":789,"line_end":789,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892192,"byte_end":6892234,"line_start":790,"line_end":790,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892235,"byte_end":6892282,"line_start":791,"line_end":791,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892283,"byte_end":6892316,"line_start":792,"line_end":792,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892317,"byte_end":6892324,"line_start":793,"line_end":793,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892325,"byte_end":6892336,"line_start":794,"line_end":794,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892337,"byte_end":6892354,"line_start":795,"line_end":795,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":608},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892894,"byte_end":6892914,"line_start":814,"line_end":814,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892515,"byte_end":6892562,"line_start":801,"line_end":801,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892563,"byte_end":6892566,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892567,"byte_end":6892583,"line_start":803,"line_end":803,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892584,"byte_end":6892591,"line_start":804,"line_end":804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892592,"byte_end":6892615,"line_start":805,"line_end":805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892616,"byte_end":6892658,"line_start":806,"line_end":806,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892659,"byte_end":6892701,"line_start":807,"line_end":807,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892702,"byte_end":6892751,"line_start":808,"line_end":808,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892752,"byte_end":6892792,"line_start":809,"line_end":809,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892793,"byte_end":6892800,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892801,"byte_end":6892812,"line_start":811,"line_end":811,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892813,"byte_end":6892830,"line_start":812,"line_end":812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893340,"byte_end":6893358,"line_start":831,"line_end":831,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6892993,"byte_end":6893017,"line_start":818,"line_end":818,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893018,"byte_end":6893021,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893022,"byte_end":6893038,"line_start":820,"line_end":820,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893039,"byte_end":6893046,"line_start":821,"line_end":821,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893047,"byte_end":6893070,"line_start":822,"line_end":822,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893071,"byte_end":6893113,"line_start":823,"line_end":823,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893114,"byte_end":6893156,"line_start":824,"line_end":824,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893157,"byte_end":6893204,"line_start":825,"line_end":825,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893205,"byte_end":6893238,"line_start":826,"line_end":826,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893239,"byte_end":6893246,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893247,"byte_end":6893258,"line_start":828,"line_end":828,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893259,"byte_end":6893276,"line_start":829,"line_end":829,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":610},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893815,"byte_end":6893835,"line_start":848,"line_end":848,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893437,"byte_end":6893483,"line_start":835,"line_end":835,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893484,"byte_end":6893487,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893488,"byte_end":6893504,"line_start":837,"line_end":837,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893505,"byte_end":6893512,"line_start":838,"line_end":838,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893513,"byte_end":6893536,"line_start":839,"line_end":839,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893537,"byte_end":6893579,"line_start":840,"line_end":840,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893580,"byte_end":6893622,"line_start":841,"line_end":841,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893623,"byte_end":6893672,"line_start":842,"line_end":842,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893673,"byte_end":6893713,"line_start":843,"line_end":843,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893714,"byte_end":6893721,"line_start":844,"line_end":844,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893722,"byte_end":6893733,"line_start":845,"line_end":845,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893734,"byte_end":6893751,"line_start":846,"line_end":846,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894262,"byte_end":6894280,"line_start":865,"line_end":865,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893914,"byte_end":6893939,"line_start":852,"line_end":852,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893940,"byte_end":6893943,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893944,"byte_end":6893960,"line_start":854,"line_end":854,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893961,"byte_end":6893968,"line_start":855,"line_end":855,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893969,"byte_end":6893992,"line_start":856,"line_end":856,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6893993,"byte_end":6894035,"line_start":857,"line_end":857,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894036,"byte_end":6894078,"line_start":858,"line_end":858,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894079,"byte_end":6894126,"line_start":859,"line_end":859,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894127,"byte_end":6894160,"line_start":860,"line_end":860,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894161,"byte_end":6894168,"line_start":861,"line_end":861,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894169,"byte_end":6894180,"line_start":862,"line_end":862,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894181,"byte_end":6894198,"line_start":863,"line_end":863,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":612},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894745,"byte_end":6894765,"line_start":882,"line_end":882,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894359,"byte_end":6894406,"line_start":869,"line_end":869,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894407,"byte_end":6894410,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894411,"byte_end":6894427,"line_start":871,"line_end":871,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894428,"byte_end":6894435,"line_start":872,"line_end":872,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894436,"byte_end":6894459,"line_start":873,"line_end":873,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894460,"byte_end":6894502,"line_start":874,"line_end":874,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894503,"byte_end":6894545,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894546,"byte_end":6894595,"line_start":876,"line_end":876,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894596,"byte_end":6894643,"line_start":877,"line_end":877,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894644,"byte_end":6894651,"line_start":878,"line_end":878,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894652,"byte_end":6894663,"line_start":879,"line_end":879,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894664,"byte_end":6894681,"line_start":880,"line_end":880,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895191,"byte_end":6895209,"line_start":899,"line_end":899,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894844,"byte_end":6894868,"line_start":886,"line_end":886,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894869,"byte_end":6894872,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894873,"byte_end":6894889,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894890,"byte_end":6894897,"line_start":889,"line_end":889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894898,"byte_end":6894921,"line_start":890,"line_end":890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894922,"byte_end":6894964,"line_start":891,"line_end":891,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6894965,"byte_end":6895007,"line_start":892,"line_end":892,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895008,"byte_end":6895055,"line_start":893,"line_end":893,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895056,"byte_end":6895089,"line_start":894,"line_end":894,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895090,"byte_end":6895097,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895098,"byte_end":6895109,"line_start":896,"line_end":896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895110,"byte_end":6895127,"line_start":897,"line_end":897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":614},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895673,"byte_end":6895693,"line_start":916,"line_end":916,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895288,"byte_end":6895334,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895335,"byte_end":6895338,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895339,"byte_end":6895355,"line_start":905,"line_end":905,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895356,"byte_end":6895363,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895364,"byte_end":6895387,"line_start":907,"line_end":907,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895388,"byte_end":6895430,"line_start":908,"line_end":908,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895431,"byte_end":6895473,"line_start":909,"line_end":909,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895474,"byte_end":6895523,"line_start":910,"line_end":910,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895524,"byte_end":6895571,"line_start":911,"line_end":911,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895572,"byte_end":6895579,"line_start":912,"line_end":912,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895580,"byte_end":6895591,"line_start":913,"line_end":913,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895592,"byte_end":6895609,"line_start":914,"line_end":914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896150,"byte_end":6896173,"line_start":933,"line_end":933,"column_start":8,"column_end":31},"name":"cmp_ordinary_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d","value":"pub fn cmp_ordinary_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895772,"byte_end":6895817,"line_start":920,"line_end":920,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895818,"byte_end":6895821,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895822,"byte_end":6895838,"line_start":922,"line_end":922,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895839,"byte_end":6895846,"line_start":923,"line_end":923,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895847,"byte_end":6895870,"line_start":924,"line_end":924,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895871,"byte_end":6895918,"line_start":925,"line_end":925,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895919,"byte_end":6895961,"line_start":926,"line_end":926,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6895962,"byte_end":6896014,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896015,"byte_end":6896048,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896049,"byte_end":6896056,"line_start":929,"line_end":929,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896057,"byte_end":6896068,"line_start":930,"line_end":930,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896069,"byte_end":6896086,"line_start":931,"line_end":931,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896663,"byte_end":6896688,"line_start":950,"line_end":950,"column_start":8,"column_end":33},"name":"cmp_ordinary_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d_s","value":"pub fn cmp_ordinary_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896252,"byte_end":6896319,"line_start":937,"line_end":937,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896320,"byte_end":6896323,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896324,"byte_end":6896340,"line_start":939,"line_end":939,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896341,"byte_end":6896348,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896349,"byte_end":6896372,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896373,"byte_end":6896415,"line_start":942,"line_end":942,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896416,"byte_end":6896458,"line_start":943,"line_end":943,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896459,"byte_end":6896513,"line_start":944,"line_end":944,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896514,"byte_end":6896561,"line_start":945,"line_end":945,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896562,"byte_end":6896569,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896570,"byte_end":6896581,"line_start":947,"line_end":947,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896582,"byte_end":6896599,"line_start":948,"line_end":948,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897136,"byte_end":6897156,"line_start":967,"line_end":967,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896767,"byte_end":6896806,"line_start":954,"line_end":954,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896807,"byte_end":6896810,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896811,"byte_end":6896827,"line_start":956,"line_end":956,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896828,"byte_end":6896835,"line_start":957,"line_end":957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896836,"byte_end":6896859,"line_start":958,"line_end":958,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896860,"byte_end":6896907,"line_start":959,"line_end":959,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896908,"byte_end":6896950,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6896951,"byte_end":6897000,"line_start":961,"line_end":961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897001,"byte_end":6897034,"line_start":962,"line_end":962,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897035,"byte_end":6897042,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897043,"byte_end":6897054,"line_start":964,"line_end":964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897055,"byte_end":6897072,"line_start":965,"line_end":965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897644,"byte_end":6897666,"line_start":984,"line_end":984,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897237,"byte_end":6897298,"line_start":971,"line_end":971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897299,"byte_end":6897302,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897303,"byte_end":6897319,"line_start":973,"line_end":973,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897320,"byte_end":6897327,"line_start":974,"line_end":974,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897328,"byte_end":6897351,"line_start":975,"line_end":975,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897352,"byte_end":6897399,"line_start":976,"line_end":976,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897400,"byte_end":6897442,"line_start":977,"line_end":977,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897443,"byte_end":6897494,"line_start":978,"line_end":978,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897495,"byte_end":6897542,"line_start":979,"line_end":979,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897543,"byte_end":6897550,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897551,"byte_end":6897562,"line_start":981,"line_end":981,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897563,"byte_end":6897580,"line_start":982,"line_end":982,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898066,"byte_end":6898084,"line_start":1000,"line_end":1000,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897747,"byte_end":6897775,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897776,"byte_end":6897779,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897780,"byte_end":6897797,"line_start":990,"line_end":990,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897798,"byte_end":6897805,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897806,"byte_end":6897829,"line_start":992,"line_end":992,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897830,"byte_end":6897872,"line_start":993,"line_end":993,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897873,"byte_end":6897915,"line_start":994,"line_end":994,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897916,"byte_end":6897964,"line_start":995,"line_end":995,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897965,"byte_end":6897972,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897973,"byte_end":6897984,"line_start":997,"line_end":997,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6897985,"byte_end":6898002,"line_start":998,"line_end":998,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898489,"byte_end":6898507,"line_start":1016,"line_end":1016,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898154,"byte_end":6898198,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898199,"byte_end":6898202,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898203,"byte_end":6898220,"line_start":1006,"line_end":1006,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898221,"byte_end":6898228,"line_start":1007,"line_end":1007,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898229,"byte_end":6898252,"line_start":1008,"line_end":1008,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898253,"byte_end":6898295,"line_start":1009,"line_end":1009,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898296,"byte_end":6898338,"line_start":1010,"line_end":1010,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898339,"byte_end":6898387,"line_start":1011,"line_end":1011,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898388,"byte_end":6898395,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898396,"byte_end":6898407,"line_start":1013,"line_end":1013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898408,"byte_end":6898425,"line_start":1014,"line_end":1014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898900,"byte_end":6898918,"line_start":1032,"line_end":1032,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898577,"byte_end":6898609,"line_start":1020,"line_end":1020,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898610,"byte_end":6898613,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898614,"byte_end":6898631,"line_start":1022,"line_end":1022,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898632,"byte_end":6898639,"line_start":1023,"line_end":1023,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898640,"byte_end":6898663,"line_start":1024,"line_end":1024,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898664,"byte_end":6898706,"line_start":1025,"line_end":1025,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898707,"byte_end":6898749,"line_start":1026,"line_end":1026,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898750,"byte_end":6898798,"line_start":1027,"line_end":1027,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898799,"byte_end":6898806,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898807,"byte_end":6898818,"line_start":1029,"line_end":1029,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898819,"byte_end":6898836,"line_start":1030,"line_end":1030,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899320,"byte_end":6899338,"line_start":1048,"line_end":1048,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6898988,"byte_end":6899029,"line_start":1036,"line_end":1036,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899030,"byte_end":6899033,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899034,"byte_end":6899051,"line_start":1038,"line_end":1038,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899052,"byte_end":6899059,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899060,"byte_end":6899083,"line_start":1040,"line_end":1040,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899084,"byte_end":6899126,"line_start":1041,"line_end":1041,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899127,"byte_end":6899169,"line_start":1042,"line_end":1042,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899170,"byte_end":6899218,"line_start":1043,"line_end":1043,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899219,"byte_end":6899226,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899227,"byte_end":6899238,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899239,"byte_end":6899256,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899728,"byte_end":6899746,"line_start":1064,"line_end":1064,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899408,"byte_end":6899437,"line_start":1052,"line_end":1052,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899438,"byte_end":6899441,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899442,"byte_end":6899459,"line_start":1054,"line_end":1054,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899460,"byte_end":6899467,"line_start":1055,"line_end":1055,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899468,"byte_end":6899491,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899492,"byte_end":6899534,"line_start":1057,"line_end":1057,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899535,"byte_end":6899577,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899578,"byte_end":6899626,"line_start":1059,"line_end":1059,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899627,"byte_end":6899634,"line_start":1060,"line_end":1060,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899635,"byte_end":6899646,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899647,"byte_end":6899664,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900137,"byte_end":6900156,"line_start":1080,"line_end":1080,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899816,"byte_end":6899845,"line_start":1068,"line_end":1068,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899846,"byte_end":6899849,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899850,"byte_end":6899867,"line_start":1070,"line_end":1070,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899868,"byte_end":6899875,"line_start":1071,"line_end":1071,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899876,"byte_end":6899899,"line_start":1072,"line_end":1072,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899900,"byte_end":6899942,"line_start":1073,"line_end":1073,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899943,"byte_end":6899985,"line_start":1074,"line_end":1074,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6899986,"byte_end":6900035,"line_start":1075,"line_end":1075,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900036,"byte_end":6900043,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900044,"byte_end":6900055,"line_start":1077,"line_end":1077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900056,"byte_end":6900073,"line_start":1078,"line_end":1078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900677,"byte_end":6900715,"line_start":1097,"line_end":1097,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900227,"byte_end":6900283,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900284,"byte_end":6900291,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900292,"byte_end":6900315,"line_start":1086,"line_end":1086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900316,"byte_end":6900354,"line_start":1087,"line_end":1087,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900355,"byte_end":6900409,"line_start":1088,"line_end":1088,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900410,"byte_end":6900452,"line_start":1089,"line_end":1089,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900453,"byte_end":6900494,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900495,"byte_end":6900502,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900503,"byte_end":6900543,"line_start":1092,"line_end":1092,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900544,"byte_end":6900583,"line_start":1093,"line_end":1093,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900584,"byte_end":6900595,"line_start":1094,"line_end":1094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900596,"byte_end":6900613,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901228,"byte_end":6901258,"line_start":1114,"line_end":1114,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900781,"byte_end":6900833,"line_start":1101,"line_end":1101,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900834,"byte_end":6900841,"line_start":1102,"line_end":1102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900842,"byte_end":6900865,"line_start":1103,"line_end":1103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900866,"byte_end":6900904,"line_start":1104,"line_end":1104,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900905,"byte_end":6900951,"line_start":1105,"line_end":1105,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6900952,"byte_end":6901003,"line_start":1106,"line_end":1106,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901004,"byte_end":6901045,"line_start":1107,"line_end":1107,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901046,"byte_end":6901053,"line_start":1108,"line_end":1108,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901054,"byte_end":6901094,"line_start":1109,"line_end":1109,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901095,"byte_end":6901134,"line_start":1110,"line_end":1110,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901135,"byte_end":6901146,"line_start":1111,"line_end":1111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901147,"byte_end":6901164,"line_start":1112,"line_end":1112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901751,"byte_end":6901782,"line_start":1131,"line_end":1131,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901322,"byte_end":6901380,"line_start":1118,"line_end":1118,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901381,"byte_end":6901388,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901389,"byte_end":6901412,"line_start":1120,"line_end":1120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901413,"byte_end":6901455,"line_start":1121,"line_end":1121,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901456,"byte_end":6901503,"line_start":1122,"line_end":1122,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901504,"byte_end":6901535,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901536,"byte_end":6901568,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901569,"byte_end":6901576,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901577,"byte_end":6901617,"line_start":1126,"line_end":1126,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901618,"byte_end":6901657,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901658,"byte_end":6901669,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901670,"byte_end":6901687,"line_start":1129,"line_end":1129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902277,"byte_end":6902303,"line_start":1147,"line_end":1147,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901848,"byte_end":6901906,"line_start":1135,"line_end":1135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901907,"byte_end":6901914,"line_start":1136,"line_end":1136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901915,"byte_end":6901938,"line_start":1137,"line_end":1137,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901939,"byte_end":6901981,"line_start":1138,"line_end":1138,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6901982,"byte_end":6902024,"line_start":1139,"line_end":1139,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902025,"byte_end":6902097,"line_start":1140,"line_end":1140,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902098,"byte_end":6902105,"line_start":1141,"line_end":1141,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902106,"byte_end":6902143,"line_start":1142,"line_end":1142,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902144,"byte_end":6902183,"line_start":1143,"line_end":1143,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902184,"byte_end":6902195,"line_start":1144,"line_end":1144,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902196,"byte_end":6902213,"line_start":1145,"line_end":1145,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902785,"byte_end":6902815,"line_start":1164,"line_end":1164,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902364,"byte_end":6902406,"line_start":1151,"line_end":1151,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902407,"byte_end":6902414,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902415,"byte_end":6902438,"line_start":1153,"line_end":1153,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902439,"byte_end":6902490,"line_start":1154,"line_end":1154,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902491,"byte_end":6902537,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902538,"byte_end":6902569,"line_start":1156,"line_end":1156,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902570,"byte_end":6902602,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902603,"byte_end":6902610,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902611,"byte_end":6902651,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902652,"byte_end":6902691,"line_start":1160,"line_end":1160,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902692,"byte_end":6902703,"line_start":1161,"line_end":1161,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902704,"byte_end":6902721,"line_start":1162,"line_end":1162,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903319,"byte_end":6903352,"line_start":1180,"line_end":1180,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902880,"byte_end":6902938,"line_start":1168,"line_end":1168,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902939,"byte_end":6902946,"line_start":1169,"line_end":1169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902947,"byte_end":6902970,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6902971,"byte_end":6903022,"line_start":1171,"line_end":1171,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903023,"byte_end":6903072,"line_start":1172,"line_end":1172,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903073,"byte_end":6903139,"line_start":1173,"line_end":1173,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903140,"byte_end":6903147,"line_start":1174,"line_end":1174,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903148,"byte_end":6903185,"line_start":1175,"line_end":1175,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903186,"byte_end":6903225,"line_start":1176,"line_end":1176,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903226,"byte_end":6903237,"line_start":1177,"line_end":1177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903238,"byte_end":6903255,"line_start":1178,"line_end":1178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903698,"byte_end":6903718,"line_start":1194,"line_end":1194,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903414,"byte_end":6903456,"line_start":1184,"line_end":1184,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903457,"byte_end":6903464,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903465,"byte_end":6903488,"line_start":1186,"line_end":1186,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903489,"byte_end":6903531,"line_start":1187,"line_end":1187,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903532,"byte_end":6903568,"line_start":1188,"line_end":1188,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903569,"byte_end":6903596,"line_start":1189,"line_end":1189,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903597,"byte_end":6903604,"line_start":1190,"line_end":1190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903605,"byte_end":6903616,"line_start":1191,"line_end":1191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903617,"byte_end":6903634,"line_start":1192,"line_end":1192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904059,"byte_end":6904079,"line_start":1208,"line_end":1208,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903773,"byte_end":6903819,"line_start":1198,"line_end":1198,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903820,"byte_end":6903827,"line_start":1199,"line_end":1199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903828,"byte_end":6903851,"line_start":1200,"line_end":1200,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903852,"byte_end":6903894,"line_start":1201,"line_end":1201,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903895,"byte_end":6903931,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903932,"byte_end":6903957,"line_start":1203,"line_end":1203,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903958,"byte_end":6903965,"line_start":1204,"line_end":1204,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903966,"byte_end":6903977,"line_start":1205,"line_end":1205,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6903978,"byte_end":6903995,"line_start":1206,"line_end":1206,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904452,"byte_end":6904472,"line_start":1223,"line_end":1223,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904135,"byte_end":6904181,"line_start":1212,"line_end":1212,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904182,"byte_end":6904189,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904190,"byte_end":6904213,"line_start":1214,"line_end":1214,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904214,"byte_end":6904256,"line_start":1215,"line_end":1215,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904257,"byte_end":6904293,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904294,"byte_end":6904319,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904320,"byte_end":6904327,"line_start":1218,"line_end":1218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904328,"byte_end":6904339,"line_start":1219,"line_end":1219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904340,"byte_end":6904357,"line_start":1220,"line_end":1220,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904358,"byte_end":6904388,"line_start":1221,"line_end":1221,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905043,"byte_end":6905073,"line_start":1241,"line_end":1241,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904528,"byte_end":6904603,"line_start":1227,"line_end":1227,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904604,"byte_end":6904611,"line_start":1228,"line_end":1228,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904612,"byte_end":6904635,"line_start":1229,"line_end":1229,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904636,"byte_end":6904687,"line_start":1230,"line_end":1230,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904688,"byte_end":6904730,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904731,"byte_end":6904780,"line_start":1232,"line_end":1232,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904781,"byte_end":6904832,"line_start":1233,"line_end":1233,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904833,"byte_end":6904840,"line_start":1234,"line_end":1234,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904841,"byte_end":6904878,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904879,"byte_end":6904918,"line_start":1236,"line_end":1236,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904919,"byte_end":6904930,"line_start":1237,"line_end":1237,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904931,"byte_end":6904948,"line_start":1238,"line_end":1238,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6904949,"byte_end":6904979,"line_start":1239,"line_end":1239,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905430,"byte_end":6905450,"line_start":1255,"line_end":1255,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905148,"byte_end":6905194,"line_start":1245,"line_end":1245,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905195,"byte_end":6905202,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905203,"byte_end":6905226,"line_start":1247,"line_end":1247,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905227,"byte_end":6905265,"line_start":1248,"line_end":1248,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905266,"byte_end":6905302,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905303,"byte_end":6905328,"line_start":1250,"line_end":1250,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905329,"byte_end":6905336,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905337,"byte_end":6905348,"line_start":1252,"line_end":1252,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905349,"byte_end":6905366,"line_start":1253,"line_end":1253,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905820,"byte_end":6905840,"line_start":1270,"line_end":1270,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905509,"byte_end":6905555,"line_start":1259,"line_end":1259,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905556,"byte_end":6905563,"line_start":1260,"line_end":1260,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905564,"byte_end":6905587,"line_start":1261,"line_end":1261,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905588,"byte_end":6905624,"line_start":1262,"line_end":1262,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905625,"byte_end":6905661,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905662,"byte_end":6905687,"line_start":1264,"line_end":1264,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905688,"byte_end":6905695,"line_start":1265,"line_end":1265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905696,"byte_end":6905707,"line_start":1266,"line_end":1266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905708,"byte_end":6905725,"line_start":1267,"line_end":1267,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905726,"byte_end":6905756,"line_start":1268,"line_end":1268,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906314,"byte_end":6906341,"line_start":1286,"line_end":1286,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905899,"byte_end":6905964,"line_start":1274,"line_end":1274,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905965,"byte_end":6905972,"line_start":1275,"line_end":1275,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905973,"byte_end":6905996,"line_start":1276,"line_end":1276,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6905997,"byte_end":6906039,"line_start":1277,"line_end":1277,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906040,"byte_end":6906090,"line_start":1278,"line_end":1278,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906091,"byte_end":6906132,"line_start":1279,"line_end":1279,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906133,"byte_end":6906140,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906141,"byte_end":6906180,"line_start":1281,"line_end":1281,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906181,"byte_end":6906220,"line_start":1282,"line_end":1282,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906221,"byte_end":6906232,"line_start":1283,"line_end":1283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906233,"byte_end":6906250,"line_start":1284,"line_end":1284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906755,"byte_end":6906770,"line_start":1300,"line_end":1300,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906417,"byte_end":6906490,"line_start":1290,"line_end":1290,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906491,"byte_end":6906498,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906499,"byte_end":6906522,"line_start":1292,"line_end":1292,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906523,"byte_end":6906575,"line_start":1293,"line_end":1293,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906576,"byte_end":6906631,"line_start":1294,"line_end":1294,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906632,"byte_end":6906653,"line_start":1295,"line_end":1295,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906654,"byte_end":6906661,"line_start":1296,"line_end":1296,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906662,"byte_end":6906673,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906674,"byte_end":6906691,"line_start":1298,"line_end":1298,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907280,"byte_end":6907307,"line_start":1317,"line_end":1317,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906834,"byte_end":6906899,"line_start":1304,"line_end":1304,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906900,"byte_end":6906907,"line_start":1305,"line_end":1305,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906908,"byte_end":6906931,"line_start":1306,"line_end":1306,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906932,"byte_end":6906974,"line_start":1307,"line_end":1307,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6906975,"byte_end":6907025,"line_start":1308,"line_end":1308,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907026,"byte_end":6907067,"line_start":1309,"line_end":1309,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907068,"byte_end":6907075,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907076,"byte_end":6907115,"line_start":1311,"line_end":1311,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907116,"byte_end":6907155,"line_start":1312,"line_end":1312,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907156,"byte_end":6907167,"line_start":1313,"line_end":1313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907168,"byte_end":6907185,"line_start":1314,"line_end":1314,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907186,"byte_end":6907216,"line_start":1315,"line_end":1315,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907750,"byte_end":6907765,"line_start":1332,"line_end":1332,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907383,"byte_end":6907456,"line_start":1321,"line_end":1321,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907457,"byte_end":6907464,"line_start":1322,"line_end":1322,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907465,"byte_end":6907488,"line_start":1323,"line_end":1323,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907489,"byte_end":6907541,"line_start":1324,"line_end":1324,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907542,"byte_end":6907595,"line_start":1325,"line_end":1325,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907596,"byte_end":6907617,"line_start":1326,"line_end":1326,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907618,"byte_end":6907625,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907626,"byte_end":6907637,"line_start":1328,"line_end":1328,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907638,"byte_end":6907655,"line_start":1329,"line_end":1329,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907656,"byte_end":6907686,"line_start":1330,"line_end":1330,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908303,"byte_end":6908333,"line_start":1349,"line_end":1349,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907829,"byte_end":6907904,"line_start":1336,"line_end":1336,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907905,"byte_end":6907912,"line_start":1337,"line_end":1337,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907913,"byte_end":6907936,"line_start":1338,"line_end":1338,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907937,"byte_end":6907979,"line_start":1339,"line_end":1339,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6907980,"byte_end":6908031,"line_start":1340,"line_end":1340,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908032,"byte_end":6908081,"line_start":1341,"line_end":1341,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908082,"byte_end":6908123,"line_start":1342,"line_end":1342,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908124,"byte_end":6908131,"line_start":1343,"line_end":1343,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908132,"byte_end":6908169,"line_start":1344,"line_end":1344,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908170,"byte_end":6908209,"line_start":1345,"line_end":1345,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908210,"byte_end":6908221,"line_start":1346,"line_end":1346,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908222,"byte_end":6908239,"line_start":1347,"line_end":1347,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908754,"byte_end":6908777,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908410,"byte_end":6908486,"line_start":1353,"line_end":1353,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908487,"byte_end":6908494,"line_start":1354,"line_end":1354,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908495,"byte_end":6908518,"line_start":1355,"line_end":1355,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908519,"byte_end":6908561,"line_start":1356,"line_end":1356,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908562,"byte_end":6908601,"line_start":1357,"line_end":1357,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908602,"byte_end":6908652,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908653,"byte_end":6908660,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908661,"byte_end":6908672,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908673,"byte_end":6908690,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909164,"byte_end":6909186,"line_start":1377,"line_end":1377,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908844,"byte_end":6908888,"line_start":1367,"line_end":1367,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908889,"byte_end":6908896,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908897,"byte_end":6908920,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908921,"byte_end":6908972,"line_start":1370,"line_end":1370,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6908973,"byte_end":6909011,"line_start":1371,"line_end":1371,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909012,"byte_end":6909062,"line_start":1372,"line_end":1372,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909063,"byte_end":6909070,"line_start":1373,"line_end":1373,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909071,"byte_end":6909082,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909083,"byte_end":6909100,"line_start":1375,"line_end":1375,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909522,"byte_end":6909545,"line_start":1390,"line_end":1390,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909252,"byte_end":6909294,"line_start":1381,"line_end":1381,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909295,"byte_end":6909302,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909303,"byte_end":6909326,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909327,"byte_end":6909369,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909370,"byte_end":6909420,"line_start":1385,"line_end":1385,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909421,"byte_end":6909428,"line_start":1386,"line_end":1386,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909429,"byte_end":6909440,"line_start":1387,"line_end":1387,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909441,"byte_end":6909458,"line_start":1388,"line_end":1388,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909903,"byte_end":6909926,"line_start":1404,"line_end":1404,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909602,"byte_end":6909644,"line_start":1394,"line_end":1394,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909645,"byte_end":6909652,"line_start":1395,"line_end":1395,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909653,"byte_end":6909676,"line_start":1396,"line_end":1396,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909677,"byte_end":6909719,"line_start":1397,"line_end":1397,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909720,"byte_end":6909770,"line_start":1398,"line_end":1398,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909771,"byte_end":6909778,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909779,"byte_end":6909790,"line_start":1400,"line_end":1400,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909791,"byte_end":6909808,"line_start":1401,"line_end":1401,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909809,"byte_end":6909839,"line_start":1402,"line_end":1402,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910302,"byte_end":6910311,"line_start":1419,"line_end":1419,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6909983,"byte_end":6910004,"line_start":1408,"line_end":1408,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910005,"byte_end":6910012,"line_start":1409,"line_end":1409,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910013,"byte_end":6910036,"line_start":1410,"line_end":1410,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910037,"byte_end":6910081,"line_start":1411,"line_end":1411,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910082,"byte_end":6910127,"line_start":1412,"line_end":1412,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910128,"byte_end":6910167,"line_start":1413,"line_end":1413,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910168,"byte_end":6910200,"line_start":1414,"line_end":1414,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910201,"byte_end":6910208,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910209,"byte_end":6910220,"line_start":1416,"line_end":1416,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910221,"byte_end":6910238,"line_start":1417,"line_end":1417,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910734,"byte_end":6910745,"line_start":1434,"line_end":1434,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910387,"byte_end":6910432,"line_start":1423,"line_end":1423,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910433,"byte_end":6910440,"line_start":1424,"line_end":1424,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910441,"byte_end":6910464,"line_start":1425,"line_end":1425,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910465,"byte_end":6910509,"line_start":1426,"line_end":1426,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910510,"byte_end":6910557,"line_start":1427,"line_end":1427,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910558,"byte_end":6910599,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910600,"byte_end":6910632,"line_start":1429,"line_end":1429,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910633,"byte_end":6910640,"line_start":1430,"line_end":1430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910641,"byte_end":6910652,"line_start":1431,"line_end":1431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6910653,"byte_end":6910670,"line_start":1432,"line_end":1432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913321,"byte_end":6913331,"line_start":1510,"line_end":1510,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913032,"byte_end":6913072,"line_start":1500,"line_end":1500,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913073,"byte_end":6913080,"line_start":1501,"line_end":1501,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913081,"byte_end":6913104,"line_start":1502,"line_end":1502,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913105,"byte_end":6913149,"line_start":1503,"line_end":1503,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913150,"byte_end":6913177,"line_start":1504,"line_end":1504,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913178,"byte_end":6913219,"line_start":1505,"line_end":1505,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913220,"byte_end":6913227,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913228,"byte_end":6913239,"line_start":1507,"line_end":1507,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913240,"byte_end":6913257,"line_start":1508,"line_end":1508,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913785,"byte_end":6913805,"line_start":1525,"line_end":1525,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913422,"byte_end":6913481,"line_start":1514,"line_end":1514,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913482,"byte_end":6913489,"line_start":1515,"line_end":1515,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913490,"byte_end":6913513,"line_start":1516,"line_end":1516,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913514,"byte_end":6913530,"line_start":1517,"line_end":1517,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913531,"byte_end":6913568,"line_start":1518,"line_end":1518,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913569,"byte_end":6913638,"line_start":1519,"line_end":1519,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913639,"byte_end":6913646,"line_start":1520,"line_end":1520,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913647,"byte_end":6913658,"line_start":1521,"line_end":1521,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913659,"byte_end":6913676,"line_start":1522,"line_end":1522,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913677,"byte_end":6913721,"line_start":1523,"line_end":1523,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914223,"byte_end":6914239,"line_start":1540,"line_end":1540,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913865,"byte_end":6913923,"line_start":1529,"line_end":1529,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913924,"byte_end":6913931,"line_start":1530,"line_end":1530,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913932,"byte_end":6913955,"line_start":1531,"line_end":1531,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913956,"byte_end":6913972,"line_start":1532,"line_end":1532,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6913973,"byte_end":6914006,"line_start":1533,"line_end":1533,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914007,"byte_end":6914076,"line_start":1534,"line_end":1534,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914077,"byte_end":6914084,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914085,"byte_end":6914096,"line_start":1536,"line_end":1536,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914097,"byte_end":6914114,"line_start":1537,"line_end":1537,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914115,"byte_end":6914159,"line_start":1538,"line_end":1538,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914597,"byte_end":6914607,"line_start":1554,"line_end":1554,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914298,"byte_end":6914338,"line_start":1544,"line_end":1544,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914339,"byte_end":6914346,"line_start":1545,"line_end":1545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914347,"byte_end":6914370,"line_start":1546,"line_end":1546,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914371,"byte_end":6914409,"line_start":1547,"line_end":1547,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914410,"byte_end":6914437,"line_start":1548,"line_end":1548,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914438,"byte_end":6914495,"line_start":1549,"line_end":1549,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914496,"byte_end":6914503,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914504,"byte_end":6914515,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914516,"byte_end":6914533,"line_start":1552,"line_end":1552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915054,"byte_end":6915077,"line_start":1569,"line_end":1569,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914705,"byte_end":6914770,"line_start":1558,"line_end":1558,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914771,"byte_end":6914778,"line_start":1559,"line_end":1559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914779,"byte_end":6914802,"line_start":1560,"line_end":1560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914803,"byte_end":6914839,"line_start":1561,"line_end":1561,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914840,"byte_end":6914861,"line_start":1562,"line_end":1562,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914862,"byte_end":6914910,"line_start":1563,"line_end":1563,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914911,"byte_end":6914952,"line_start":1564,"line_end":1564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914953,"byte_end":6914960,"line_start":1565,"line_end":1565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914961,"byte_end":6914972,"line_start":1566,"line_end":1566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6914973,"byte_end":6914990,"line_start":1567,"line_end":1567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915446,"byte_end":6915462,"line_start":1583,"line_end":1583,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915152,"byte_end":6915192,"line_start":1573,"line_end":1573,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915193,"byte_end":6915200,"line_start":1574,"line_end":1574,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915201,"byte_end":6915224,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915225,"byte_end":6915261,"line_start":1576,"line_end":1576,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915262,"byte_end":6915295,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915296,"byte_end":6915344,"line_start":1578,"line_end":1578,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915345,"byte_end":6915352,"line_start":1579,"line_end":1579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915353,"byte_end":6915364,"line_start":1580,"line_end":1580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915365,"byte_end":6915382,"line_start":1581,"line_end":1581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915908,"byte_end":6915930,"line_start":1598,"line_end":1598,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915561,"byte_end":6915625,"line_start":1587,"line_end":1587,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915626,"byte_end":6915633,"line_start":1588,"line_end":1588,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915634,"byte_end":6915657,"line_start":1589,"line_end":1589,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915658,"byte_end":6915694,"line_start":1590,"line_end":1590,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915695,"byte_end":6915716,"line_start":1591,"line_end":1591,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915717,"byte_end":6915764,"line_start":1592,"line_end":1592,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915765,"byte_end":6915806,"line_start":1593,"line_end":1593,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915807,"byte_end":6915814,"line_start":1594,"line_end":1594,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915815,"byte_end":6915826,"line_start":1595,"line_end":1595,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6915827,"byte_end":6915844,"line_start":1596,"line_end":1596,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916352,"byte_end":6916370,"line_start":1612,"line_end":1612,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916005,"byte_end":6916065,"line_start":1602,"line_end":1602,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916066,"byte_end":6916073,"line_start":1603,"line_end":1603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916074,"byte_end":6916097,"line_start":1604,"line_end":1604,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916098,"byte_end":6916142,"line_start":1605,"line_end":1605,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916143,"byte_end":6916178,"line_start":1606,"line_end":1606,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916179,"byte_end":6916250,"line_start":1607,"line_end":1607,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916251,"byte_end":6916258,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916259,"byte_end":6916270,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916271,"byte_end":6916288,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916938,"byte_end":6916958,"line_start":1630,"line_end":1630,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916462,"byte_end":6916502,"line_start":1616,"line_end":1616,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916503,"byte_end":6916506,"line_start":1617,"line_end":1617,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916507,"byte_end":6916585,"line_start":1618,"line_end":1618,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916586,"byte_end":6916666,"line_start":1619,"line_end":1619,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916667,"byte_end":6916679,"line_start":1620,"line_end":1620,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916680,"byte_end":6916687,"line_start":1621,"line_end":1621,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916688,"byte_end":6916711,"line_start":1622,"line_end":1622,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916712,"byte_end":6916737,"line_start":1623,"line_end":1623,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916738,"byte_end":6916775,"line_start":1624,"line_end":1624,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916776,"byte_end":6916836,"line_start":1625,"line_end":1625,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916837,"byte_end":6916844,"line_start":1626,"line_end":1626,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916845,"byte_end":6916856,"line_start":1627,"line_end":1627,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6916857,"byte_end":6916874,"line_start":1628,"line_end":1628,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917584,"byte_end":6917604,"line_start":1649,"line_end":1649,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917056,"byte_end":6917096,"line_start":1634,"line_end":1634,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917097,"byte_end":6917100,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917101,"byte_end":6917179,"line_start":1636,"line_end":1636,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917180,"byte_end":6917253,"line_start":1637,"line_end":1637,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917254,"byte_end":6917266,"line_start":1638,"line_end":1638,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917267,"byte_end":6917274,"line_start":1639,"line_end":1639,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917275,"byte_end":6917298,"line_start":1640,"line_end":1640,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917299,"byte_end":6917367,"line_start":1641,"line_end":1641,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917368,"byte_end":6917405,"line_start":1642,"line_end":1642,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917406,"byte_end":6917445,"line_start":1643,"line_end":1643,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917446,"byte_end":6917453,"line_start":1644,"line_end":1644,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917454,"byte_end":6917465,"line_start":1645,"line_end":1645,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917466,"byte_end":6917483,"line_start":1646,"line_end":1646,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917484,"byte_end":6917520,"line_start":1647,"line_end":1647,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918185,"byte_end":6918213,"line_start":1665,"line_end":1665,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917709,"byte_end":6917787,"line_start":1653,"line_end":1653,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917788,"byte_end":6917827,"line_start":1654,"line_end":1654,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917828,"byte_end":6917835,"line_start":1655,"line_end":1655,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917836,"byte_end":6917859,"line_start":1656,"line_end":1656,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917860,"byte_end":6917918,"line_start":1657,"line_end":1657,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917919,"byte_end":6917980,"line_start":1658,"line_end":1658,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6917981,"byte_end":6918045,"line_start":1659,"line_end":1659,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918046,"byte_end":6918083,"line_start":1660,"line_end":1660,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918084,"byte_end":6918091,"line_start":1661,"line_end":1661,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918092,"byte_end":6918103,"line_start":1662,"line_end":1662,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918104,"byte_end":6918121,"line_start":1663,"line_end":1663,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918794,"byte_end":6918806,"line_start":1683,"line_end":1683,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,\n ]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918293,"byte_end":6918337,"line_start":1669,"line_end":1669,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918338,"byte_end":6918345,"line_start":1670,"line_end":1670,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918346,"byte_end":6918369,"line_start":1671,"line_end":1671,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918370,"byte_end":6918381,"line_start":1672,"line_end":1672,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918382,"byte_end":6918459,"line_start":1673,"line_end":1673,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918460,"byte_end":6918485,"line_start":1674,"line_end":1674,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918486,"byte_end":6918554,"line_start":1675,"line_end":1675,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918555,"byte_end":6918562,"line_start":1676,"line_end":1676,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918563,"byte_end":6918611,"line_start":1677,"line_end":1677,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918612,"byte_end":6918692,"line_start":1678,"line_end":1678,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918693,"byte_end":6918700,"line_start":1679,"line_end":1679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918701,"byte_end":6918712,"line_start":1680,"line_end":1680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918713,"byte_end":6918730,"line_start":1681,"line_end":1681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919287,"byte_end":6919300,"line_start":1698,"line_end":1698,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918884,"byte_end":6918929,"line_start":1687,"line_end":1687,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918930,"byte_end":6918937,"line_start":1688,"line_end":1688,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918938,"byte_end":6918961,"line_start":1689,"line_end":1689,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6918962,"byte_end":6919020,"line_start":1690,"line_end":1690,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919021,"byte_end":6919082,"line_start":1691,"line_end":1691,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919083,"byte_end":6919132,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919133,"byte_end":6919185,"line_start":1693,"line_end":1693,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919186,"byte_end":6919193,"line_start":1694,"line_end":1694,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919194,"byte_end":6919205,"line_start":1695,"line_end":1695,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919206,"byte_end":6919223,"line_start":1696,"line_end":1696,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919695,"byte_end":6919704,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919379,"byte_end":6919404,"line_start":1702,"line_end":1702,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919405,"byte_end":6919412,"line_start":1703,"line_end":1703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919413,"byte_end":6919436,"line_start":1704,"line_end":1704,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919437,"byte_end":6919479,"line_start":1705,"line_end":1705,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919480,"byte_end":6919522,"line_start":1706,"line_end":1706,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919523,"byte_end":6919562,"line_start":1707,"line_end":1707,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919563,"byte_end":6919593,"line_start":1708,"line_end":1708,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919594,"byte_end":6919601,"line_start":1709,"line_end":1709,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919602,"byte_end":6919613,"line_start":1710,"line_end":1710,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919614,"byte_end":6919631,"line_start":1711,"line_end":1711,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920123,"byte_end":6920134,"line_start":1728,"line_end":1728,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919780,"byte_end":6919828,"line_start":1717,"line_end":1717,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919829,"byte_end":6919836,"line_start":1718,"line_end":1718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919837,"byte_end":6919860,"line_start":1719,"line_end":1719,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919861,"byte_end":6919904,"line_start":1720,"line_end":1720,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919905,"byte_end":6919947,"line_start":1721,"line_end":1721,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919948,"byte_end":6919989,"line_start":1722,"line_end":1722,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6919990,"byte_end":6920021,"line_start":1723,"line_end":1723,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920022,"byte_end":6920029,"line_start":1724,"line_end":1724,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920030,"byte_end":6920041,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920042,"byte_end":6920059,"line_start":1726,"line_end":1726,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920693,"byte_end":6920705,"line_start":1745,"line_end":1745,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b =\n   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920210,"byte_end":6920254,"line_start":1732,"line_end":1732,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920255,"byte_end":6920262,"line_start":1733,"line_end":1733,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920263,"byte_end":6920286,"line_start":1734,"line_end":1734,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920287,"byte_end":6920298,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920299,"byte_end":6920376,"line_start":1736,"line_end":1736,"column_start":1,"column_end":78}},{"value":"/ let b =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920377,"byte_end":6920388,"line_start":1737,"line_end":1737,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920389,"byte_end":6920467,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920468,"byte_end":6920516,"line_start":1739,"line_end":1739,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920517,"byte_end":6920591,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920592,"byte_end":6920599,"line_start":1741,"line_end":1741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920600,"byte_end":6920611,"line_start":1742,"line_end":1742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920612,"byte_end":6920629,"line_start":1743,"line_end":1743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921189,"byte_end":6921202,"line_start":1760,"line_end":1760,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920783,"byte_end":6920828,"line_start":1749,"line_end":1749,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920829,"byte_end":6920836,"line_start":1750,"line_end":1750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920837,"byte_end":6920860,"line_start":1751,"line_end":1751,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920861,"byte_end":6920919,"line_start":1752,"line_end":1752,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920920,"byte_end":6920981,"line_start":1753,"line_end":1753,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6920982,"byte_end":6921031,"line_start":1754,"line_end":1754,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921032,"byte_end":6921087,"line_start":1755,"line_end":1755,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921088,"byte_end":6921095,"line_start":1756,"line_end":1756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921096,"byte_end":6921107,"line_start":1757,"line_end":1757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921108,"byte_end":6921125,"line_start":1758,"line_end":1758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921598,"byte_end":6921607,"line_start":1775,"line_end":1775,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921281,"byte_end":6921306,"line_start":1764,"line_end":1764,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921307,"byte_end":6921314,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921315,"byte_end":6921338,"line_start":1766,"line_end":1766,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921339,"byte_end":6921382,"line_start":1767,"line_end":1767,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921383,"byte_end":6921425,"line_start":1768,"line_end":1768,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921426,"byte_end":6921465,"line_start":1769,"line_end":1769,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921466,"byte_end":6921496,"line_start":1770,"line_end":1770,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921497,"byte_end":6921504,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921505,"byte_end":6921516,"line_start":1772,"line_end":1772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921517,"byte_end":6921534,"line_start":1773,"line_end":1773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922026,"byte_end":6922037,"line_start":1790,"line_end":1790,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921683,"byte_end":6921731,"line_start":1779,"line_end":1779,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921732,"byte_end":6921739,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921740,"byte_end":6921763,"line_start":1781,"line_end":1781,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921764,"byte_end":6921807,"line_start":1782,"line_end":1782,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921808,"byte_end":6921850,"line_start":1783,"line_end":1783,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921851,"byte_end":6921892,"line_start":1784,"line_end":1784,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921893,"byte_end":6921924,"line_start":1785,"line_end":1785,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921925,"byte_end":6921932,"line_start":1786,"line_end":1786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921933,"byte_end":6921944,"line_start":1787,"line_end":1787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6921945,"byte_end":6921962,"line_start":1788,"line_end":1788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922422,"byte_end":6922438,"line_start":1804,"line_end":1804,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922113,"byte_end":6922173,"line_start":1794,"line_end":1794,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922174,"byte_end":6922181,"line_start":1795,"line_end":1795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922182,"byte_end":6922205,"line_start":1796,"line_end":1796,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922206,"byte_end":6922242,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922243,"byte_end":6922275,"line_start":1798,"line_end":1798,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922276,"byte_end":6922320,"line_start":1799,"line_end":1799,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922321,"byte_end":6922328,"line_start":1800,"line_end":1800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922329,"byte_end":6922340,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922341,"byte_end":6922358,"line_start":1802,"line_end":1802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922873,"byte_end":6922899,"line_start":1819,"line_end":1819,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922503,"byte_end":6922577,"line_start":1808,"line_end":1808,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922578,"byte_end":6922585,"line_start":1809,"line_end":1809,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922586,"byte_end":6922609,"line_start":1810,"line_end":1810,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922610,"byte_end":6922646,"line_start":1811,"line_end":1811,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922647,"byte_end":6922683,"line_start":1812,"line_end":1812,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922684,"byte_end":6922729,"line_start":1813,"line_end":1813,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922730,"byte_end":6922771,"line_start":1814,"line_end":1814,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922772,"byte_end":6922779,"line_start":1815,"line_end":1815,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922780,"byte_end":6922791,"line_start":1816,"line_end":1816,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922792,"byte_end":6922809,"line_start":1817,"line_end":1817,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923403,"byte_end":6923421,"line_start":1837,"line_end":1837,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6922976,"byte_end":6923019,"line_start":1823,"line_end":1823,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923020,"byte_end":6923023,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923024,"byte_end":6923087,"line_start":1825,"line_end":1825,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923088,"byte_end":6923095,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923096,"byte_end":6923119,"line_start":1827,"line_end":1827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923120,"byte_end":6923145,"line_start":1828,"line_end":1828,"column_start":1,"column_end":26}},{"value":"/   0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923146,"byte_end":6923219,"line_start":1829,"line_end":1829,"column_start":1,"column_end":74}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923220,"byte_end":6923227,"line_start":1830,"line_end":1830,"column_start":1,"column_end":8}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923228,"byte_end":6923262,"line_start":1831,"line_end":1831,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923263,"byte_end":6923301,"line_start":1832,"line_end":1832,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923302,"byte_end":6923309,"line_start":1833,"line_end":1833,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923310,"byte_end":6923321,"line_start":1834,"line_end":1834,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923322,"byte_end":6923339,"line_start":1835,"line_end":1835,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923811,"byte_end":6923826,"line_start":1853,"line_end":1853,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923480,"byte_end":6923518,"line_start":1841,"line_end":1841,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923519,"byte_end":6923522,"line_start":1842,"line_end":1842,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923523,"byte_end":6923575,"line_start":1843,"line_end":1843,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923576,"byte_end":6923583,"line_start":1844,"line_end":1844,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923584,"byte_end":6923607,"line_start":1845,"line_end":1845,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923608,"byte_end":6923652,"line_start":1846,"line_end":1846,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923653,"byte_end":6923684,"line_start":1847,"line_end":1847,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923685,"byte_end":6923709,"line_start":1848,"line_end":1848,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923710,"byte_end":6923717,"line_start":1849,"line_end":1849,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923718,"byte_end":6923729,"line_start":1850,"line_end":1850,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923730,"byte_end":6923747,"line_start":1851,"line_end":1851,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924313,"byte_end":6924336,"line_start":1869,"line_end":1869,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923883,"byte_end":6923956,"line_start":1857,"line_end":1857,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923957,"byte_end":6923960,"line_start":1858,"line_end":1858,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923961,"byte_end":6923968,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923969,"byte_end":6923992,"line_start":1860,"line_end":1860,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6923993,"byte_end":6924038,"line_start":1861,"line_end":1861,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924039,"byte_end":6924084,"line_start":1862,"line_end":1862,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924085,"byte_end":6924144,"line_start":1863,"line_end":1863,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924145,"byte_end":6924211,"line_start":1864,"line_end":1864,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924212,"byte_end":6924219,"line_start":1865,"line_end":1865,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924220,"byte_end":6924231,"line_start":1866,"line_end":1866,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924232,"byte_end":6924249,"line_start":1867,"line_end":1867,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924738,"byte_end":6924747,"line_start":1884,"line_end":1884,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924415,"byte_end":6924436,"line_start":1873,"line_end":1873,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924437,"byte_end":6924444,"line_start":1874,"line_end":1874,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924445,"byte_end":6924468,"line_start":1875,"line_end":1875,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924469,"byte_end":6924513,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924514,"byte_end":6924559,"line_start":1877,"line_end":1877,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924560,"byte_end":6924599,"line_start":1878,"line_end":1878,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924600,"byte_end":6924636,"line_start":1879,"line_end":1879,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924637,"byte_end":6924644,"line_start":1880,"line_end":1880,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924645,"byte_end":6924656,"line_start":1881,"line_end":1881,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924657,"byte_end":6924674,"line_start":1882,"line_end":1882,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925172,"byte_end":6925183,"line_start":1899,"line_end":1899,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924823,"byte_end":6924868,"line_start":1888,"line_end":1888,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924869,"byte_end":6924876,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924877,"byte_end":6924900,"line_start":1890,"line_end":1890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924901,"byte_end":6924945,"line_start":1891,"line_end":1891,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924946,"byte_end":6924993,"line_start":1892,"line_end":1892,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6924994,"byte_end":6925035,"line_start":1893,"line_end":1893,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925036,"byte_end":6925070,"line_start":1894,"line_end":1894,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925071,"byte_end":6925078,"line_start":1895,"line_end":1895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925079,"byte_end":6925090,"line_start":1896,"line_end":1896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925091,"byte_end":6925108,"line_start":1897,"line_end":1897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925728,"byte_end":6925751,"line_start":1915,"line_end":1915,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925259,"byte_end":6925332,"line_start":1903,"line_end":1903,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925333,"byte_end":6925351,"line_start":1904,"line_end":1904,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925352,"byte_end":6925359,"line_start":1905,"line_end":1905,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925360,"byte_end":6925383,"line_start":1906,"line_end":1906,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925384,"byte_end":6925449,"line_start":1907,"line_end":1907,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925450,"byte_end":6925518,"line_start":1908,"line_end":1908,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925519,"byte_end":6925578,"line_start":1909,"line_end":1909,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925579,"byte_end":6925626,"line_start":1910,"line_end":1910,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925627,"byte_end":6925634,"line_start":1911,"line_end":1911,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925635,"byte_end":6925646,"line_start":1912,"line_end":1912,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925647,"byte_end":6925664,"line_start":1913,"line_end":1913,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926303,"byte_end":6926326,"line_start":1931,"line_end":1931,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925832,"byte_end":6925905,"line_start":1919,"line_end":1919,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925906,"byte_end":6925924,"line_start":1920,"line_end":1920,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925925,"byte_end":6925932,"line_start":1921,"line_end":1921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925933,"byte_end":6925956,"line_start":1922,"line_end":1922,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6925957,"byte_end":6926021,"line_start":1923,"line_end":1923,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926022,"byte_end":6926089,"line_start":1924,"line_end":1924,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926090,"byte_end":6926149,"line_start":1925,"line_end":1925,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926150,"byte_end":6926201,"line_start":1926,"line_end":1926,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926202,"byte_end":6926209,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926210,"byte_end":6926221,"line_start":1928,"line_end":1928,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926222,"byte_end":6926239,"line_start":1929,"line_end":1929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926890,"byte_end":6926912,"line_start":1947,"line_end":1947,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926407,"byte_end":6926479,"line_start":1935,"line_end":1935,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926480,"byte_end":6926498,"line_start":1936,"line_end":1936,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926499,"byte_end":6926506,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926507,"byte_end":6926530,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926531,"byte_end":6926596,"line_start":1939,"line_end":1939,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926597,"byte_end":6926665,"line_start":1940,"line_end":1940,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926666,"byte_end":6926724,"line_start":1941,"line_end":1941,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926725,"byte_end":6926788,"line_start":1942,"line_end":1942,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926789,"byte_end":6926796,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926797,"byte_end":6926808,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926809,"byte_end":6926826,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927306,"byte_end":6927317,"line_start":1962,"line_end":1962,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6926993,"byte_end":6927013,"line_start":1951,"line_end":1951,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927014,"byte_end":6927021,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927022,"byte_end":6927045,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927046,"byte_end":6927088,"line_start":1954,"line_end":1954,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927089,"byte_end":6927131,"line_start":1955,"line_end":1955,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927132,"byte_end":6927173,"line_start":1956,"line_end":1956,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927174,"byte_end":6927204,"line_start":1957,"line_end":1957,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927205,"byte_end":6927212,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927213,"byte_end":6927224,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927225,"byte_end":6927242,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927705,"byte_end":6927716,"line_start":1977,"line_end":1977,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927392,"byte_end":6927412,"line_start":1966,"line_end":1966,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927413,"byte_end":6927420,"line_start":1967,"line_end":1967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927421,"byte_end":6927444,"line_start":1968,"line_end":1968,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927445,"byte_end":6927483,"line_start":1969,"line_end":1969,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927484,"byte_end":6927522,"line_start":1970,"line_end":1970,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927523,"byte_end":6927570,"line_start":1971,"line_end":1971,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927571,"byte_end":6927603,"line_start":1972,"line_end":1972,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927604,"byte_end":6927611,"line_start":1973,"line_end":1973,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927612,"byte_end":6927623,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927624,"byte_end":6927641,"line_start":1975,"line_end":1975,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928239,"byte_end":6928259,"line_start":1992,"line_end":1992,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927794,"byte_end":6927852,"line_start":1981,"line_end":1981,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927853,"byte_end":6927860,"line_start":1982,"line_end":1982,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927861,"byte_end":6927884,"line_start":1983,"line_end":1983,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927885,"byte_end":6927939,"line_start":1984,"line_end":1984,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6927940,"byte_end":6928001,"line_start":1985,"line_end":1985,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928002,"byte_end":6928058,"line_start":1986,"line_end":1986,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928059,"byte_end":6928137,"line_start":1987,"line_end":1987,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928138,"byte_end":6928145,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928146,"byte_end":6928157,"line_start":1989,"line_end":1989,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928158,"byte_end":6928175,"line_start":1990,"line_end":1990,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928726,"byte_end":6928747,"line_start":2007,"line_end":2007,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928340,"byte_end":6928399,"line_start":1996,"line_end":1996,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928400,"byte_end":6928407,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928408,"byte_end":6928431,"line_start":1998,"line_end":1998,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928432,"byte_end":6928474,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928475,"byte_end":6928517,"line_start":2000,"line_end":2000,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928518,"byte_end":6928575,"line_start":2001,"line_end":2001,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928576,"byte_end":6928624,"line_start":2002,"line_end":2002,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928625,"byte_end":6928632,"line_start":2003,"line_end":2003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928633,"byte_end":6928644,"line_start":2004,"line_end":2004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928645,"byte_end":6928662,"line_start":2005,"line_end":2005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929307,"byte_end":6929327,"line_start":2025,"line_end":2025,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928828,"byte_end":6928886,"line_start":2011,"line_end":2011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928887,"byte_end":6928894,"line_start":2012,"line_end":2012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928895,"byte_end":6928918,"line_start":2013,"line_end":2013,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928919,"byte_end":6928977,"line_start":2014,"line_end":2014,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6928978,"byte_end":6929041,"line_start":2015,"line_end":2015,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929042,"byte_end":6929098,"line_start":2016,"line_end":2016,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929099,"byte_end":6929114,"line_start":2017,"line_end":2017,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929115,"byte_end":6929123,"line_start":2018,"line_end":2018,"column_start":1,"column_end":9}},{"value":"/   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929124,"byte_end":6929198,"line_start":2019,"line_end":2019,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929199,"byte_end":6929205,"line_start":2020,"line_end":2020,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929206,"byte_end":6929213,"line_start":2021,"line_end":2021,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929214,"byte_end":6929225,"line_start":2022,"line_end":2022,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929226,"byte_end":6929243,"line_start":2023,"line_end":2023,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930084,"byte_end":6930108,"line_start":2048,"line_end":2048,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929409,"byte_end":6929456,"line_start":2029,"line_end":2029,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929457,"byte_end":6929460,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929461,"byte_end":6929530,"line_start":2031,"line_end":2031,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929531,"byte_end":6929581,"line_start":2032,"line_end":2032,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929582,"byte_end":6929634,"line_start":2033,"line_end":2033,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929635,"byte_end":6929642,"line_start":2034,"line_end":2034,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929643,"byte_end":6929666,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929667,"byte_end":6929692,"line_start":2036,"line_end":2036,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929693,"byte_end":6929761,"line_start":2037,"line_end":2037,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929762,"byte_end":6929769,"line_start":2038,"line_end":2038,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929770,"byte_end":6929795,"line_start":2039,"line_end":2039,"column_start":1,"column_end":26}},{"value":"/   20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929796,"byte_end":6929878,"line_start":2040,"line_end":2040,"column_start":1,"column_end":83}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929879,"byte_end":6929886,"line_start":2041,"line_end":2041,"column_start":1,"column_end":8}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929887,"byte_end":6929947,"line_start":2042,"line_end":2042,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929948,"byte_end":6929982,"line_start":2043,"line_end":2043,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929983,"byte_end":6929990,"line_start":2044,"line_end":2044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6929991,"byte_end":6930002,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930003,"byte_end":6930020,"line_start":2046,"line_end":2046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930691,"byte_end":6930703,"line_start":2065,"line_end":2065,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930186,"byte_end":6930248,"line_start":2052,"line_end":2052,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930249,"byte_end":6930256,"line_start":2053,"line_end":2053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930257,"byte_end":6930280,"line_start":2054,"line_end":2054,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930281,"byte_end":6930292,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930293,"byte_end":6930370,"line_start":2056,"line_end":2056,"column_start":1,"column_end":78}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930371,"byte_end":6930453,"line_start":2057,"line_end":2057,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930454,"byte_end":6930511,"line_start":2058,"line_end":2058,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930512,"byte_end":6930519,"line_start":2059,"line_end":2059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930520,"byte_end":6930531,"line_start":2060,"line_end":2060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930532,"byte_end":6930549,"line_start":2061,"line_end":2061,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930550,"byte_end":6930586,"line_start":2062,"line_end":2062,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930587,"byte_end":6930627,"line_start":2063,"line_end":2063,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931360,"byte_end":6931373,"line_start":2084,"line_end":2084,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930918,"byte_end":6930980,"line_start":2072,"line_end":2072,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930981,"byte_end":6930988,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6930989,"byte_end":6931012,"line_start":2074,"line_end":2074,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931013,"byte_end":6931067,"line_start":2075,"line_end":2075,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931068,"byte_end":6931122,"line_start":2076,"line_end":2076,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931123,"byte_end":6931180,"line_start":2077,"line_end":2077,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931181,"byte_end":6931188,"line_start":2078,"line_end":2078,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931189,"byte_end":6931200,"line_start":2079,"line_end":2079,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931201,"byte_end":6931218,"line_start":2080,"line_end":2080,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931219,"byte_end":6931255,"line_start":2081,"line_end":2081,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931256,"byte_end":6931296,"line_start":2082,"line_end":2082,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931847,"byte_end":6931860,"line_start":2100,"line_end":2100,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931515,"byte_end":6931577,"line_start":2090,"line_end":2090,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931578,"byte_end":6931585,"line_start":2091,"line_end":2091,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931586,"byte_end":6931609,"line_start":2092,"line_end":2092,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931610,"byte_end":6931648,"line_start":2093,"line_end":2093,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931649,"byte_end":6931687,"line_start":2094,"line_end":2094,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931688,"byte_end":6931745,"line_start":2095,"line_end":2095,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931746,"byte_end":6931753,"line_start":2096,"line_end":2096,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931754,"byte_end":6931765,"line_start":2097,"line_end":2097,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931766,"byte_end":6931783,"line_start":2098,"line_end":2098,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932277,"byte_end":6932290,"line_start":2114,"line_end":2114,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6931953,"byte_end":6932015,"line_start":2104,"line_end":2104,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932016,"byte_end":6932023,"line_start":2105,"line_end":2105,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932024,"byte_end":6932047,"line_start":2106,"line_end":2106,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932048,"byte_end":6932084,"line_start":2107,"line_end":2107,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932085,"byte_end":6932117,"line_start":2108,"line_end":2108,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932118,"byte_end":6932175,"line_start":2109,"line_end":2109,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932176,"byte_end":6932183,"line_start":2110,"line_end":2110,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932184,"byte_end":6932195,"line_start":2111,"line_end":2111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932196,"byte_end":6932213,"line_start":2112,"line_end":2112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932678,"byte_end":6932687,"line_start":2128,"line_end":2128,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932362,"byte_end":6932424,"line_start":2118,"line_end":2118,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932425,"byte_end":6932432,"line_start":2119,"line_end":2119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932433,"byte_end":6932456,"line_start":2120,"line_end":2120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932457,"byte_end":6932499,"line_start":2121,"line_end":2121,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932500,"byte_end":6932532,"line_start":2122,"line_end":2122,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932533,"byte_end":6932576,"line_start":2123,"line_end":2123,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932577,"byte_end":6932584,"line_start":2124,"line_end":2124,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932585,"byte_end":6932596,"line_start":2125,"line_end":2125,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932597,"byte_end":6932614,"line_start":2126,"line_end":2126,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933055,"byte_end":6933066,"line_start":2142,"line_end":2142,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932755,"byte_end":6932804,"line_start":2132,"line_end":2132,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932805,"byte_end":6932812,"line_start":2133,"line_end":2133,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932813,"byte_end":6932836,"line_start":2134,"line_end":2134,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932837,"byte_end":6932879,"line_start":2135,"line_end":2135,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932880,"byte_end":6932909,"line_start":2136,"line_end":2136,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932910,"byte_end":6932953,"line_start":2137,"line_end":2137,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932954,"byte_end":6932961,"line_start":2138,"line_end":2138,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932962,"byte_end":6932973,"line_start":2139,"line_end":2139,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6932974,"byte_end":6932991,"line_start":2140,"line_end":2140,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933429,"byte_end":6933444,"line_start":2156,"line_end":2156,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933123,"byte_end":6933174,"line_start":2146,"line_end":2146,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933175,"byte_end":6933182,"line_start":2147,"line_end":2147,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933183,"byte_end":6933206,"line_start":2148,"line_end":2148,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933207,"byte_end":6933249,"line_start":2149,"line_end":2149,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933250,"byte_end":6933283,"line_start":2150,"line_end":2150,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933284,"byte_end":6933327,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933328,"byte_end":6933335,"line_start":2152,"line_end":2152,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933336,"byte_end":6933347,"line_start":2153,"line_end":2153,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933348,"byte_end":6933365,"line_start":2154,"line_end":2154,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933855,"byte_end":6933873,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933502,"byte_end":6933550,"line_start":2160,"line_end":2160,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933551,"byte_end":6933558,"line_start":2161,"line_end":2161,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933559,"byte_end":6933582,"line_start":2162,"line_end":2162,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933583,"byte_end":6933660,"line_start":2163,"line_end":2163,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933661,"byte_end":6933695,"line_start":2164,"line_end":2164,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933696,"byte_end":6933753,"line_start":2165,"line_end":2165,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933754,"byte_end":6933761,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933762,"byte_end":6933773,"line_start":2167,"line_end":2167,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933774,"byte_end":6933791,"line_start":2168,"line_end":2168,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934264,"byte_end":6934283,"line_start":2184,"line_end":2184,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933932,"byte_end":6933981,"line_start":2174,"line_end":2174,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933982,"byte_end":6933989,"line_start":2175,"line_end":2175,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6933990,"byte_end":6934013,"line_start":2176,"line_end":2176,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934014,"byte_end":6934068,"line_start":2177,"line_end":2177,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934069,"byte_end":6934104,"line_start":2178,"line_end":2178,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934105,"byte_end":6934162,"line_start":2179,"line_end":2179,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934163,"byte_end":6934170,"line_start":2180,"line_end":2180,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934171,"byte_end":6934182,"line_start":2181,"line_end":2181,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934183,"byte_end":6934200,"line_start":2182,"line_end":2182,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934660,"byte_end":6934679,"line_start":2198,"line_end":2198,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934344,"byte_end":6934393,"line_start":2188,"line_end":2188,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934394,"byte_end":6934401,"line_start":2189,"line_end":2189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934402,"byte_end":6934425,"line_start":2190,"line_end":2190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934426,"byte_end":6934464,"line_start":2191,"line_end":2191,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934465,"byte_end":6934500,"line_start":2192,"line_end":2192,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934501,"byte_end":6934558,"line_start":2193,"line_end":2193,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934559,"byte_end":6934566,"line_start":2194,"line_end":2194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934567,"byte_end":6934578,"line_start":2195,"line_end":2195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934579,"byte_end":6934596,"line_start":2196,"line_end":2196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935055,"byte_end":6935074,"line_start":2212,"line_end":2212,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934740,"byte_end":6934790,"line_start":2202,"line_end":2202,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934791,"byte_end":6934798,"line_start":2203,"line_end":2203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934799,"byte_end":6934822,"line_start":2204,"line_end":2204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934823,"byte_end":6934859,"line_start":2205,"line_end":2205,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934860,"byte_end":6934895,"line_start":2206,"line_end":2206,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934896,"byte_end":6934953,"line_start":2207,"line_end":2207,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934954,"byte_end":6934961,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934962,"byte_end":6934973,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6934974,"byte_end":6934991,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935662,"byte_end":6935683,"line_start":2231,"line_end":2231,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(\n   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n );\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935136,"byte_end":6935197,"line_start":2216,"line_end":2216,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935198,"byte_end":6935205,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935206,"byte_end":6935229,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935230,"byte_end":6935241,"line_start":2219,"line_end":2219,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935242,"byte_end":6935319,"line_start":2220,"line_end":2220,"column_start":1,"column_end":78}},{"value":"/ let b = set_reversed_i8_m128i(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935320,"byte_end":6935354,"line_start":2221,"line_end":2221,"column_start":1,"column_end":35}},{"value":"/   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935355,"byte_end":6935417,"line_start":2222,"line_end":2222,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935418,"byte_end":6935424,"line_start":2223,"line_end":2223,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935425,"byte_end":6935482,"line_start":2224,"line_end":2224,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935483,"byte_end":6935490,"line_start":2225,"line_end":2225,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935491,"byte_end":6935502,"line_start":2226,"line_end":2226,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935503,"byte_end":6935520,"line_start":2227,"line_end":2227,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935521,"byte_end":6935557,"line_start":2228,"line_end":2228,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935558,"byte_end":6935598,"line_start":2229,"line_end":2229,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936355,"byte_end":6936377,"line_start":2252,"line_end":2252,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935905,"byte_end":6935966,"line_start":2240,"line_end":2240,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935967,"byte_end":6935974,"line_start":2241,"line_end":2241,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935975,"byte_end":6935998,"line_start":2242,"line_end":2242,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6935999,"byte_end":6936053,"line_start":2243,"line_end":2243,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936054,"byte_end":6936117,"line_start":2244,"line_end":2244,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936118,"byte_end":6936175,"line_start":2245,"line_end":2245,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936176,"byte_end":6936183,"line_start":2246,"line_end":2246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936184,"byte_end":6936195,"line_start":2247,"line_end":2247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936196,"byte_end":6936213,"line_start":2248,"line_end":2248,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936214,"byte_end":6936250,"line_start":2249,"line_end":2249,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936251,"byte_end":6936291,"line_start":2250,"line_end":2250,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936860,"byte_end":6936882,"line_start":2268,"line_end":2268,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936520,"byte_end":6936581,"line_start":2258,"line_end":2258,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936582,"byte_end":6936589,"line_start":2259,"line_end":2259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936590,"byte_end":6936613,"line_start":2260,"line_end":2260,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936614,"byte_end":6936652,"line_start":2261,"line_end":2261,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936653,"byte_end":6936700,"line_start":2262,"line_end":2262,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936701,"byte_end":6936758,"line_start":2263,"line_end":2263,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936759,"byte_end":6936766,"line_start":2264,"line_end":2264,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936767,"byte_end":6936778,"line_start":2265,"line_end":2265,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936779,"byte_end":6936796,"line_start":2266,"line_end":2266,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937300,"byte_end":6937318,"line_start":2282,"line_end":2282,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6936976,"byte_end":6937037,"line_start":2272,"line_end":2272,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937038,"byte_end":6937045,"line_start":2273,"line_end":2273,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937046,"byte_end":6937069,"line_start":2274,"line_end":2274,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937070,"byte_end":6937112,"line_start":2275,"line_end":2275,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937113,"byte_end":6937154,"line_start":2276,"line_end":2276,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937155,"byte_end":6937198,"line_start":2277,"line_end":2277,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937199,"byte_end":6937206,"line_start":2278,"line_end":2278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937207,"byte_end":6937218,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937219,"byte_end":6937236,"line_start":2280,"line_end":2280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937602,"byte_end":6937614,"line_start":2295,"line_end":2295,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937387,"byte_end":6937406,"line_start":2286,"line_end":2286,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937407,"byte_end":6937414,"line_start":2287,"line_end":2287,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937415,"byte_end":6937438,"line_start":2288,"line_end":2288,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937439,"byte_end":6937466,"line_start":2289,"line_end":2289,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937467,"byte_end":6937500,"line_start":2290,"line_end":2290,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937501,"byte_end":6937508,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937509,"byte_end":6937520,"line_start":2292,"line_end":2292,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937521,"byte_end":6937538,"line_start":2293,"line_end":2293,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937895,"byte_end":6937907,"line_start":2308,"line_end":2308,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937671,"byte_end":6937691,"line_start":2299,"line_end":2299,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937692,"byte_end":6937699,"line_start":2300,"line_end":2300,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937700,"byte_end":6937723,"line_start":2301,"line_end":2301,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937724,"byte_end":6937751,"line_start":2302,"line_end":2302,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937752,"byte_end":6937793,"line_start":2303,"line_end":2303,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937794,"byte_end":6937801,"line_start":2304,"line_end":2304,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937802,"byte_end":6937813,"line_start":2305,"line_end":2305,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6937814,"byte_end":6937831,"line_start":2306,"line_end":2306,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942598,"byte_end":6942615,"line_start":2440,"line_end":2440,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942109,"byte_end":6942186,"line_start":2424,"line_end":2424,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942187,"byte_end":6942190,"line_start":2425,"line_end":2425,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942191,"byte_end":6942211,"line_start":2426,"line_end":2426,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942212,"byte_end":6942219,"line_start":2427,"line_end":2427,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942220,"byte_end":6942243,"line_start":2428,"line_end":2428,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942244,"byte_end":6942298,"line_start":2429,"line_end":2429,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942299,"byte_end":6942335,"line_start":2430,"line_end":2430,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942336,"byte_end":6942389,"line_start":2431,"line_end":2431,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942390,"byte_end":6942405,"line_start":2432,"line_end":2432,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942406,"byte_end":6942414,"line_start":2433,"line_end":2433,"column_start":1,"column_end":9}},{"value":"/   [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942415,"byte_end":6942489,"line_start":2434,"line_end":2434,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942490,"byte_end":6942496,"line_start":2435,"line_end":2435,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942497,"byte_end":6942504,"line_start":2436,"line_end":2436,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942505,"byte_end":6942516,"line_start":2437,"line_end":2437,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942517,"byte_end":6942534,"line_start":2438,"line_end":2438,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943125,"byte_end":6943142,"line_start":2457,"line_end":2457,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942702,"byte_end":6942779,"line_start":2444,"line_end":2444,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942780,"byte_end":6942783,"line_start":2445,"line_end":2445,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942784,"byte_end":6942804,"line_start":2446,"line_end":2446,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942805,"byte_end":6942812,"line_start":2447,"line_end":2447,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942813,"byte_end":6942836,"line_start":2448,"line_end":2448,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942837,"byte_end":6942879,"line_start":2449,"line_end":2449,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942880,"byte_end":6942916,"line_start":2450,"line_end":2450,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942917,"byte_end":6942970,"line_start":2451,"line_end":2451,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6942971,"byte_end":6943023,"line_start":2452,"line_end":2452,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943024,"byte_end":6943031,"line_start":2453,"line_end":2453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943032,"byte_end":6943043,"line_start":2454,"line_end":2454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943044,"byte_end":6943061,"line_start":2455,"line_end":2455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943630,"byte_end":6943647,"line_start":2474,"line_end":2474,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943229,"byte_end":6943306,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943307,"byte_end":6943310,"line_start":2462,"line_end":2462,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943311,"byte_end":6943331,"line_start":2463,"line_end":2463,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943332,"byte_end":6943339,"line_start":2464,"line_end":2464,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943340,"byte_end":6943363,"line_start":2465,"line_end":2465,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943364,"byte_end":6943400,"line_start":2466,"line_end":2466,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943401,"byte_end":6943437,"line_start":2467,"line_end":2467,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943438,"byte_end":6943491,"line_start":2468,"line_end":2468,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943492,"byte_end":6943528,"line_start":2469,"line_end":2469,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943529,"byte_end":6943536,"line_start":2470,"line_end":2470,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943537,"byte_end":6943548,"line_start":2471,"line_end":2471,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6943549,"byte_end":6943566,"line_start":2472,"line_end":2472,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945985,"byte_end":6945995,"line_start":2554,"line_end":2554,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945714,"byte_end":6945737,"line_start":2544,"line_end":2544,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945738,"byte_end":6945745,"line_start":2545,"line_end":2545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945746,"byte_end":6945769,"line_start":2546,"line_end":2546,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945770,"byte_end":6945814,"line_start":2547,"line_end":2547,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945815,"byte_end":6945852,"line_start":2548,"line_end":2548,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945853,"byte_end":6945883,"line_start":2549,"line_end":2549,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945884,"byte_end":6945891,"line_start":2550,"line_end":2550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945892,"byte_end":6945903,"line_start":2551,"line_end":2551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6945904,"byte_end":6945921,"line_start":2552,"line_end":2552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946409,"byte_end":6946421,"line_start":2569,"line_end":2569,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946057,"byte_end":6946114,"line_start":2558,"line_end":2558,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946115,"byte_end":6946122,"line_start":2559,"line_end":2559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946123,"byte_end":6946146,"line_start":2560,"line_end":2560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946147,"byte_end":6946189,"line_start":2561,"line_end":2561,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946190,"byte_end":6946233,"line_start":2562,"line_end":2562,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946234,"byte_end":6946265,"line_start":2563,"line_end":2563,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946266,"byte_end":6946307,"line_start":2564,"line_end":2564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946308,"byte_end":6946315,"line_start":2565,"line_end":2565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946316,"byte_end":6946327,"line_start":2566,"line_end":2566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946328,"byte_end":6946345,"line_start":2567,"line_end":2567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":718},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947006,"byte_end":6947023,"line_start":2589,"line_end":2589,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946498,"byte_end":6946576,"line_start":2573,"line_end":2573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946577,"byte_end":6946580,"line_start":2574,"line_end":2574,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946581,"byte_end":6946611,"line_start":2575,"line_end":2575,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946612,"byte_end":6946619,"line_start":2576,"line_end":2576,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946620,"byte_end":6946643,"line_start":2577,"line_end":2577,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946644,"byte_end":6946702,"line_start":2578,"line_end":2578,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946703,"byte_end":6946739,"line_start":2579,"line_end":2579,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946740,"byte_end":6946793,"line_start":2580,"line_end":2580,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946794,"byte_end":6946809,"line_start":2581,"line_end":2581,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946810,"byte_end":6946818,"line_start":2582,"line_end":2582,"column_start":1,"column_end":9}},{"value":"/   [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946819,"byte_end":6946897,"line_start":2583,"line_end":2583,"column_start":1,"column_end":79}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946898,"byte_end":6946904,"line_start":2584,"line_end":2584,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946905,"byte_end":6946912,"line_start":2585,"line_end":2585,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946913,"byte_end":6946924,"line_start":2586,"line_end":2586,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6946925,"byte_end":6946942,"line_start":2587,"line_end":2587,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947548,"byte_end":6947565,"line_start":2606,"line_end":2606,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947110,"byte_end":6947188,"line_start":2593,"line_end":2593,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947189,"byte_end":6947192,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947193,"byte_end":6947223,"line_start":2595,"line_end":2595,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947224,"byte_end":6947231,"line_start":2596,"line_end":2596,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947232,"byte_end":6947255,"line_start":2597,"line_end":2597,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947256,"byte_end":6947300,"line_start":2598,"line_end":2598,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947301,"byte_end":6947337,"line_start":2599,"line_end":2599,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947338,"byte_end":6947391,"line_start":2600,"line_end":2600,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947392,"byte_end":6947446,"line_start":2601,"line_end":2601,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947447,"byte_end":6947454,"line_start":2602,"line_end":2602,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947455,"byte_end":6947466,"line_start":2603,"line_end":2603,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6947467,"byte_end":6947484,"line_start":2604,"line_end":2604,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949646,"byte_end":6949663,"line_start":2683,"line_end":2683,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949088,"byte_end":6949166,"line_start":2659,"line_end":2659,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949167,"byte_end":6949170,"line_start":2660,"line_end":2660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949171,"byte_end":6949178,"line_start":2661,"line_end":2661,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949179,"byte_end":6949202,"line_start":2662,"line_end":2662,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949203,"byte_end":6949265,"line_start":2663,"line_end":2663,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949266,"byte_end":6949302,"line_start":2664,"line_end":2664,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949303,"byte_end":6949356,"line_start":2665,"line_end":2665,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949357,"byte_end":6949372,"line_start":2666,"line_end":2666,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949373,"byte_end":6949381,"line_start":2667,"line_end":2667,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949382,"byte_end":6949389,"line_start":2668,"line_end":2668,"column_start":1,"column_end":8}},{"value":"/     1_u16 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949390,"byte_end":6949409,"line_start":2669,"line_end":2669,"column_start":1,"column_end":20}},{"value":"/     2 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949410,"byte_end":6949425,"line_start":2670,"line_end":2670,"column_start":1,"column_end":16}},{"value":"/     3 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949426,"byte_end":6949441,"line_start":2671,"line_end":2671,"column_start":1,"column_end":16}},{"value":"/     4 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949442,"byte_end":6949457,"line_start":2672,"line_end":2672,"column_start":1,"column_end":16}},{"value":"/     100 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949458,"byte_end":6949475,"line_start":2673,"line_end":2673,"column_start":1,"column_end":18}},{"value":"/     200 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949476,"byte_end":6949493,"line_start":2674,"line_end":2674,"column_start":1,"column_end":18}},{"value":"/     300 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949494,"byte_end":6949511,"line_start":2675,"line_end":2675,"column_start":1,"column_end":18}},{"value":"/     400 >> 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949512,"byte_end":6949529,"line_start":2676,"line_end":2676,"column_start":1,"column_end":18}},{"value":"/   ]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949530,"byte_end":6949537,"line_start":2677,"line_end":2677,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949538,"byte_end":6949544,"line_start":2678,"line_end":2678,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949545,"byte_end":6949552,"line_start":2679,"line_end":2679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949553,"byte_end":6949564,"line_start":2680,"line_end":2680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949565,"byte_end":6949582,"line_start":2681,"line_end":2681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950162,"byte_end":6950179,"line_start":2699,"line_end":2699,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949750,"byte_end":6949828,"line_start":2687,"line_end":2687,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949829,"byte_end":6949832,"line_start":2688,"line_end":2688,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949833,"byte_end":6949840,"line_start":2689,"line_end":2689,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949841,"byte_end":6949864,"line_start":2690,"line_end":2690,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949865,"byte_end":6949911,"line_start":2691,"line_end":2691,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949912,"byte_end":6949948,"line_start":2692,"line_end":2692,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6949949,"byte_end":6950002,"line_start":2693,"line_end":2693,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950003,"byte_end":6950060,"line_start":2694,"line_end":2694,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950061,"byte_end":6950068,"line_start":2695,"line_end":2695,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950069,"byte_end":6950080,"line_start":2696,"line_end":2696,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950081,"byte_end":6950098,"line_start":2697,"line_end":2697,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950670,"byte_end":6950687,"line_start":2716,"line_end":2716,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950266,"byte_end":6950344,"line_start":2703,"line_end":2703,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950345,"byte_end":6950348,"line_start":2704,"line_end":2704,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950349,"byte_end":6950369,"line_start":2705,"line_end":2705,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950370,"byte_end":6950377,"line_start":2706,"line_end":2706,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950378,"byte_end":6950401,"line_start":2707,"line_end":2707,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950402,"byte_end":6950439,"line_start":2708,"line_end":2708,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950440,"byte_end":6950476,"line_start":2709,"line_end":2709,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950477,"byte_end":6950530,"line_start":2710,"line_end":2710,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950531,"byte_end":6950568,"line_start":2711,"line_end":2711,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950569,"byte_end":6950576,"line_start":2712,"line_end":2712,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950577,"byte_end":6950588,"line_start":2713,"line_end":2713,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6950589,"byte_end":6950606,"line_start":2714,"line_end":2714,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953447,"byte_end":6953458,"line_start":2814,"line_end":2814,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953117,"byte_end":6953161,"line_start":2803,"line_end":2803,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953162,"byte_end":6953169,"line_start":2804,"line_end":2804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953170,"byte_end":6953193,"line_start":2805,"line_end":2805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953194,"byte_end":6953238,"line_start":2806,"line_end":2806,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953239,"byte_end":6953270,"line_start":2807,"line_end":2807,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953271,"byte_end":6953298,"line_start":2808,"line_end":2808,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953299,"byte_end":6953324,"line_start":2809,"line_end":2809,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953325,"byte_end":6953357,"line_start":2810,"line_end":2810,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953358,"byte_end":6953365,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953366,"byte_end":6953383,"line_start":2812,"line_end":2812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953845,"byte_end":6953858,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953549,"byte_end":6953602,"line_start":2818,"line_end":2818,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953603,"byte_end":6953610,"line_start":2819,"line_end":2819,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953611,"byte_end":6953634,"line_start":2820,"line_end":2820,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953635,"byte_end":6953679,"line_start":2821,"line_end":2821,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953680,"byte_end":6953700,"line_start":2822,"line_end":2822,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953701,"byte_end":6953730,"line_start":2823,"line_end":2823,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953731,"byte_end":6953755,"line_start":2824,"line_end":2824,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953756,"byte_end":6953763,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953764,"byte_end":6953781,"line_start":2826,"line_end":2826,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954291,"byte_end":6954308,"line_start":2843,"line_end":2843,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6953933,"byte_end":6953999,"line_start":2832,"line_end":2832,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954000,"byte_end":6954007,"line_start":2833,"line_end":2833,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954008,"byte_end":6954031,"line_start":2834,"line_end":2834,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954032,"byte_end":6954076,"line_start":2835,"line_end":2835,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954077,"byte_end":6954108,"line_start":2836,"line_end":2836,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954109,"byte_end":6954142,"line_start":2837,"line_end":2837,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954143,"byte_end":6954168,"line_start":2838,"line_end":2838,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954169,"byte_end":6954201,"line_start":2839,"line_end":2839,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954202,"byte_end":6954209,"line_start":2840,"line_end":2840,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954210,"byte_end":6954227,"line_start":2841,"line_end":2841,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954730,"byte_end":6954741,"line_start":2858,"line_end":2858,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954400,"byte_end":6954444,"line_start":2847,"line_end":2847,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954445,"byte_end":6954452,"line_start":2848,"line_end":2848,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954453,"byte_end":6954476,"line_start":2849,"line_end":2849,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954477,"byte_end":6954515,"line_start":2850,"line_end":2850,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954516,"byte_end":6954547,"line_start":2851,"line_end":2851,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954548,"byte_end":6954575,"line_start":2852,"line_end":2852,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954576,"byte_end":6954607,"line_start":2853,"line_end":2853,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954608,"byte_end":6954640,"line_start":2854,"line_end":2854,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954641,"byte_end":6954648,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954649,"byte_end":6954666,"line_start":2856,"line_end":2856,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955118,"byte_end":6955136,"line_start":2872,"line_end":2872,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954816,"byte_end":6954870,"line_start":2862,"line_end":2862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954871,"byte_end":6954878,"line_start":2863,"line_end":2863,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954879,"byte_end":6954902,"line_start":2864,"line_end":2864,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954903,"byte_end":6954947,"line_start":2865,"line_end":2865,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954948,"byte_end":6954968,"line_start":2866,"line_end":2866,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6954969,"byte_end":6955003,"line_start":2867,"line_end":2867,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955004,"byte_end":6955028,"line_start":2868,"line_end":2868,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955029,"byte_end":6955036,"line_start":2869,"line_end":2869,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955037,"byte_end":6955054,"line_start":2870,"line_end":2870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955535,"byte_end":6955552,"line_start":2887,"line_end":2887,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955212,"byte_end":6955256,"line_start":2876,"line_end":2876,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955257,"byte_end":6955264,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955265,"byte_end":6955288,"line_start":2878,"line_end":2878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955289,"byte_end":6955325,"line_start":2879,"line_end":2879,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955326,"byte_end":6955348,"line_start":2880,"line_end":2880,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955349,"byte_end":6955382,"line_start":2881,"line_end":2881,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955383,"byte_end":6955408,"line_start":2882,"line_end":2882,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955409,"byte_end":6955416,"line_start":2883,"line_end":2883,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955417,"byte_end":6955434,"line_start":2884,"line_end":2884,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955435,"byte_end":6955471,"line_start":2885,"line_end":2885,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955986,"byte_end":6956006,"line_start":2902,"line_end":2902,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955647,"byte_end":6955691,"line_start":2891,"line_end":2891,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955692,"byte_end":6955699,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955700,"byte_end":6955723,"line_start":2893,"line_end":2893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955724,"byte_end":6955768,"line_start":2894,"line_end":2894,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955769,"byte_end":6955800,"line_start":2895,"line_end":2895,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955801,"byte_end":6955837,"line_start":2896,"line_end":2896,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955838,"byte_end":6955863,"line_start":2897,"line_end":2897,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955864,"byte_end":6955896,"line_start":2898,"line_end":2898,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955897,"byte_end":6955904,"line_start":2899,"line_end":2899,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6955905,"byte_end":6955922,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956408,"byte_end":6956429,"line_start":2916,"line_end":2916,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956098,"byte_end":6956142,"line_start":2906,"line_end":2906,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956143,"byte_end":6956150,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956151,"byte_end":6956174,"line_start":2908,"line_end":2908,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956175,"byte_end":6956219,"line_start":2909,"line_end":2909,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956220,"byte_end":6956247,"line_start":2910,"line_end":2910,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956248,"byte_end":6956285,"line_start":2911,"line_end":2911,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956286,"byte_end":6956318,"line_start":2912,"line_end":2912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956319,"byte_end":6956326,"line_start":2913,"line_end":2913,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956327,"byte_end":6956344,"line_start":2914,"line_end":2914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956911,"byte_end":6956932,"line_start":2931,"line_end":2931,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956511,"byte_end":6956555,"line_start":2920,"line_end":2920,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956556,"byte_end":6956563,"line_start":2921,"line_end":2921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956564,"byte_end":6956587,"line_start":2922,"line_end":2922,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956588,"byte_end":6956599,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956600,"byte_end":6956677,"line_start":2924,"line_end":2924,"column_start":1,"column_end":78}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956678,"byte_end":6956705,"line_start":2925,"line_end":2925,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956706,"byte_end":6956743,"line_start":2926,"line_end":2926,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956744,"byte_end":6956821,"line_start":2927,"line_end":2927,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956822,"byte_end":6956829,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6956830,"byte_end":6956847,"line_start":2929,"line_end":2929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957550,"byte_end":6957562,"line_start":2952,"line_end":2952,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957024,"byte_end":6957064,"line_start":2935,"line_end":2935,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957065,"byte_end":6957072,"line_start":2936,"line_end":2936,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957073,"byte_end":6957096,"line_start":2937,"line_end":2937,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957097,"byte_end":6957108,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957109,"byte_end":6957186,"line_start":2939,"line_end":2939,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957187,"byte_end":6957212,"line_start":2940,"line_end":2940,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957213,"byte_end":6957283,"line_start":2941,"line_end":2941,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957284,"byte_end":6957291,"line_start":2942,"line_end":2942,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957292,"byte_end":6957340,"line_start":2943,"line_end":2943,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957341,"byte_end":6957356,"line_start":2944,"line_end":2944,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957357,"byte_end":6957365,"line_start":2945,"line_end":2945,"column_start":1,"column_end":9}},{"value":"/   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957366,"byte_end":6957441,"line_start":2946,"line_end":2946,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957442,"byte_end":6957448,"line_start":2947,"line_end":2947,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957449,"byte_end":6957456,"line_start":2948,"line_end":2948,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957457,"byte_end":6957468,"line_start":2949,"line_end":2949,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957469,"byte_end":6957486,"line_start":2950,"line_end":2950,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958048,"byte_end":6958061,"line_start":2967,"line_end":2967,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957640,"byte_end":6957681,"line_start":2956,"line_end":2956,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957682,"byte_end":6957689,"line_start":2957,"line_end":2957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957690,"byte_end":6957713,"line_start":2958,"line_end":2958,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957714,"byte_end":6957772,"line_start":2959,"line_end":2959,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957773,"byte_end":6957838,"line_start":2960,"line_end":2960,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957839,"byte_end":6957888,"line_start":2961,"line_end":2961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957889,"byte_end":6957946,"line_start":2962,"line_end":2962,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957947,"byte_end":6957954,"line_start":2963,"line_end":2963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957955,"byte_end":6957966,"line_start":2964,"line_end":2964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6957967,"byte_end":6957984,"line_start":2965,"line_end":2965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958488,"byte_end":6958501,"line_start":2982,"line_end":2982,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958140,"byte_end":6958181,"line_start":2971,"line_end":2971,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958182,"byte_end":6958189,"line_start":2972,"line_end":2972,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958190,"byte_end":6958213,"line_start":2973,"line_end":2973,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958214,"byte_end":6958252,"line_start":2974,"line_end":2974,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958253,"byte_end":6958295,"line_start":2975,"line_end":2975,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958296,"byte_end":6958345,"line_start":2976,"line_end":2976,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958346,"byte_end":6958386,"line_start":2977,"line_end":2977,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958387,"byte_end":6958394,"line_start":2978,"line_end":2978,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958395,"byte_end":6958406,"line_start":2979,"line_end":2979,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958407,"byte_end":6958424,"line_start":2980,"line_end":2980,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958916,"byte_end":6958929,"line_start":2997,"line_end":2997,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958580,"byte_end":6958621,"line_start":2986,"line_end":2986,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958622,"byte_end":6958629,"line_start":2987,"line_end":2987,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958630,"byte_end":6958653,"line_start":2988,"line_end":2988,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958654,"byte_end":6958692,"line_start":2989,"line_end":2989,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958693,"byte_end":6958733,"line_start":2990,"line_end":2990,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958734,"byte_end":6958783,"line_start":2991,"line_end":2991,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958784,"byte_end":6958814,"line_start":2992,"line_end":2992,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958815,"byte_end":6958822,"line_start":2993,"line_end":2993,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958823,"byte_end":6958834,"line_start":2994,"line_end":2994,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6958835,"byte_end":6958852,"line_start":2995,"line_end":2995,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959327,"byte_end":6959336,"line_start":3012,"line_end":3012,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959008,"byte_end":6959029,"line_start":3001,"line_end":3001,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959030,"byte_end":6959037,"line_start":3002,"line_end":3002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959038,"byte_end":6959061,"line_start":3003,"line_end":3003,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959062,"byte_end":6959106,"line_start":3004,"line_end":3004,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959107,"byte_end":6959152,"line_start":3005,"line_end":3005,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959153,"byte_end":6959192,"line_start":3006,"line_end":3006,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959193,"byte_end":6959225,"line_start":3007,"line_end":3007,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959226,"byte_end":6959233,"line_start":3008,"line_end":3008,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959234,"byte_end":6959245,"line_start":3009,"line_end":3009,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959246,"byte_end":6959263,"line_start":3010,"line_end":3010,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959759,"byte_end":6959770,"line_start":3027,"line_end":3027,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959412,"byte_end":6959457,"line_start":3016,"line_end":3016,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959458,"byte_end":6959465,"line_start":3017,"line_end":3017,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959466,"byte_end":6959489,"line_start":3018,"line_end":3018,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959490,"byte_end":6959534,"line_start":3019,"line_end":3019,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959535,"byte_end":6959582,"line_start":3020,"line_end":3020,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959583,"byte_end":6959624,"line_start":3021,"line_end":3021,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959625,"byte_end":6959657,"line_start":3022,"line_end":3022,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959658,"byte_end":6959665,"line_start":3023,"line_end":3023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959666,"byte_end":6959677,"line_start":3024,"line_end":3024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959678,"byte_end":6959695,"line_start":3025,"line_end":3025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960399,"byte_end":6960422,"line_start":3048,"line_end":3048,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([\n   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959846,"byte_end":6959897,"line_start":3031,"line_end":3031,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959898,"byte_end":6959905,"line_start":3032,"line_end":3032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959906,"byte_end":6959929,"line_start":3033,"line_end":3033,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959930,"byte_end":6959941,"line_start":3034,"line_end":3034,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6959942,"byte_end":6960024,"line_start":3035,"line_end":3035,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960025,"byte_end":6960050,"line_start":3036,"line_end":3036,"column_start":1,"column_end":26}},{"value":"/   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960051,"byte_end":6960120,"line_start":3037,"line_end":3037,"column_start":1,"column_end":70}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960121,"byte_end":6960128,"line_start":3038,"line_end":3038,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960129,"byte_end":6960188,"line_start":3039,"line_end":3039,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960189,"byte_end":6960204,"line_start":3040,"line_end":3040,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960205,"byte_end":6960213,"line_start":3041,"line_end":3041,"column_start":1,"column_end":9}},{"value":"/   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960214,"byte_end":6960290,"line_start":3042,"line_end":3042,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960291,"byte_end":6960297,"line_start":3043,"line_end":3043,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960298,"byte_end":6960305,"line_start":3044,"line_end":3044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960306,"byte_end":6960317,"line_start":3045,"line_end":3045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960318,"byte_end":6960335,"line_start":3046,"line_end":3046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960940,"byte_end":6960964,"line_start":3063,"line_end":3063,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960501,"byte_end":6960553,"line_start":3052,"line_end":3052,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960554,"byte_end":6960561,"line_start":3053,"line_end":3053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960562,"byte_end":6960585,"line_start":3054,"line_end":3054,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960586,"byte_end":6960644,"line_start":3055,"line_end":3055,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960645,"byte_end":6960715,"line_start":3056,"line_end":3056,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960716,"byte_end":6960776,"line_start":3057,"line_end":3057,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960777,"byte_end":6960838,"line_start":3058,"line_end":3058,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960839,"byte_end":6960846,"line_start":3059,"line_end":3059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960847,"byte_end":6960858,"line_start":3060,"line_end":3060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6960859,"byte_end":6960876,"line_start":3061,"line_end":3061,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961554,"byte_end":6961577,"line_start":3080,"line_end":3080,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b =\n   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961044,"byte_end":6961095,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961096,"byte_end":6961103,"line_start":3068,"line_end":3068,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961104,"byte_end":6961127,"line_start":3069,"line_end":3069,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961128,"byte_end":6961139,"line_start":3070,"line_end":3070,"column_start":1,"column_end":12}},{"value":"/   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961140,"byte_end":6961221,"line_start":3071,"line_end":3071,"column_start":1,"column_end":82}},{"value":"/ let b =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961222,"byte_end":6961233,"line_start":3072,"line_end":3072,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961234,"byte_end":6961316,"line_start":3073,"line_end":3073,"column_start":1,"column_end":83}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961317,"byte_end":6961376,"line_start":3074,"line_end":3074,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961377,"byte_end":6961452,"line_start":3075,"line_end":3075,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961453,"byte_end":6961460,"line_start":3076,"line_end":3076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961461,"byte_end":6961472,"line_start":3077,"line_end":3077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961473,"byte_end":6961490,"line_start":3078,"line_end":3078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962101,"byte_end":6962125,"line_start":3095,"line_end":3095,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961656,"byte_end":6961708,"line_start":3084,"line_end":3084,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961709,"byte_end":6961716,"line_start":3085,"line_end":3085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961717,"byte_end":6961740,"line_start":3086,"line_end":3086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961741,"byte_end":6961811,"line_start":3087,"line_end":3087,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961812,"byte_end":6961884,"line_start":3088,"line_end":3088,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961885,"byte_end":6961945,"line_start":3089,"line_end":3089,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6961946,"byte_end":6961999,"line_start":3090,"line_end":3090,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962000,"byte_end":6962007,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962008,"byte_end":6962019,"line_start":3092,"line_end":3092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962020,"byte_end":6962037,"line_start":3093,"line_end":3093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962751,"byte_end":6962771,"line_start":3116,"line_end":3116,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962205,"byte_end":6962262,"line_start":3099,"line_end":3099,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962263,"byte_end":6962270,"line_start":3100,"line_end":3100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962271,"byte_end":6962294,"line_start":3101,"line_end":3101,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962295,"byte_end":6962306,"line_start":3102,"line_end":3102,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962307,"byte_end":6962384,"line_start":3103,"line_end":3103,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962385,"byte_end":6962410,"line_start":3104,"line_end":3104,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962411,"byte_end":6962481,"line_start":3105,"line_end":3105,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962482,"byte_end":6962489,"line_start":3106,"line_end":3106,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962490,"byte_end":6962546,"line_start":3107,"line_end":3107,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962547,"byte_end":6962562,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962563,"byte_end":6962571,"line_start":3109,"line_end":3109,"column_start":1,"column_end":9}},{"value":"/   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962572,"byte_end":6962642,"line_start":3110,"line_end":3110,"column_start":1,"column_end":71}},{"value":"/ );","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962643,"byte_end":6962649,"line_start":3111,"line_end":3111,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962650,"byte_end":6962657,"line_start":3112,"line_end":3112,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962658,"byte_end":6962669,"line_start":3113,"line_end":3113,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962670,"byte_end":6962687,"line_start":3114,"line_end":3114,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963281,"byte_end":6963302,"line_start":3131,"line_end":3131,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962854,"byte_end":6962912,"line_start":3120,"line_end":3120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962913,"byte_end":6962920,"line_start":3121,"line_end":3121,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962921,"byte_end":6962944,"line_start":3122,"line_end":3122,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6962945,"byte_end":6963003,"line_start":3123,"line_end":3123,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963004,"byte_end":6963065,"line_start":3124,"line_end":3124,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963066,"byte_end":6963123,"line_start":3125,"line_end":3125,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963124,"byte_end":6963179,"line_start":3126,"line_end":3126,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963180,"byte_end":6963187,"line_start":3127,"line_end":3127,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963188,"byte_end":6963199,"line_start":3128,"line_end":3128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963200,"byte_end":6963217,"line_start":3129,"line_end":3129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963747,"byte_end":6963768,"line_start":3146,"line_end":3146,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963386,"byte_end":6963444,"line_start":3135,"line_end":3135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963445,"byte_end":6963452,"line_start":3136,"line_end":3136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963453,"byte_end":6963476,"line_start":3137,"line_end":3137,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963477,"byte_end":6963515,"line_start":3138,"line_end":3138,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963516,"byte_end":6963554,"line_start":3139,"line_end":3139,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963555,"byte_end":6963612,"line_start":3140,"line_end":3140,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963613,"byte_end":6963645,"line_start":3141,"line_end":3141,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963646,"byte_end":6963653,"line_start":3142,"line_end":3142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963654,"byte_end":6963665,"line_start":3143,"line_end":3143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963666,"byte_end":6963683,"line_start":3144,"line_end":3144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964210,"byte_end":6964231,"line_start":3161,"line_end":3161,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963852,"byte_end":6963910,"line_start":3150,"line_end":3150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963911,"byte_end":6963918,"line_start":3151,"line_end":3151,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963919,"byte_end":6963942,"line_start":3152,"line_end":3152,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963943,"byte_end":6963981,"line_start":3153,"line_end":3153,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6963982,"byte_end":6964022,"line_start":3154,"line_end":3154,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964023,"byte_end":6964080,"line_start":3155,"line_end":3155,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964081,"byte_end":6964108,"line_start":3156,"line_end":3156,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964109,"byte_end":6964116,"line_start":3157,"line_end":3157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964117,"byte_end":6964128,"line_start":3158,"line_end":3158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964129,"byte_end":6964146,"line_start":3159,"line_end":3159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964673,"byte_end":6964690,"line_start":3176,"line_end":3176,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964315,"byte_end":6964367,"line_start":3165,"line_end":3165,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964368,"byte_end":6964375,"line_start":3166,"line_end":3166,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964376,"byte_end":6964399,"line_start":3167,"line_end":3167,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964400,"byte_end":6964444,"line_start":3168,"line_end":3168,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964445,"byte_end":6964490,"line_start":3169,"line_end":3169,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964491,"byte_end":6964538,"line_start":3170,"line_end":3170,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964539,"byte_end":6964571,"line_start":3171,"line_end":3171,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964572,"byte_end":6964579,"line_start":3172,"line_end":3172,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964580,"byte_end":6964591,"line_start":3173,"line_end":3173,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964592,"byte_end":6964609,"line_start":3174,"line_end":3174,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965293,"byte_end":6965312,"line_start":3194,"line_end":3194,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964771,"byte_end":6964827,"line_start":3180,"line_end":3180,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964828,"byte_end":6964835,"line_start":3181,"line_end":3181,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964836,"byte_end":6964859,"line_start":3182,"line_end":3182,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964860,"byte_end":6964871,"line_start":3183,"line_end":3183,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964872,"byte_end":6964949,"line_start":3184,"line_end":3184,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964950,"byte_end":6964975,"line_start":3185,"line_end":3185,"column_start":1,"column_end":26}},{"value":"/   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6964976,"byte_end":6965050,"line_start":3186,"line_end":3186,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965051,"byte_end":6965058,"line_start":3187,"line_end":3187,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965059,"byte_end":6965114,"line_start":3188,"line_end":3188,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965115,"byte_end":6965191,"line_start":3189,"line_end":3189,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965192,"byte_end":6965199,"line_start":3190,"line_end":3190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965200,"byte_end":6965211,"line_start":3191,"line_end":3191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965212,"byte_end":6965229,"line_start":3192,"line_end":3192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965809,"byte_end":6965829,"line_start":3209,"line_end":3209,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965395,"byte_end":6965452,"line_start":3198,"line_end":3198,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965453,"byte_end":6965460,"line_start":3199,"line_end":3199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965461,"byte_end":6965484,"line_start":3200,"line_end":3200,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965485,"byte_end":6965543,"line_start":3201,"line_end":3201,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965544,"byte_end":6965605,"line_start":3202,"line_end":3202,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965606,"byte_end":6965662,"line_start":3203,"line_end":3203,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965663,"byte_end":6965707,"line_start":3204,"line_end":3204,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965708,"byte_end":6965715,"line_start":3205,"line_end":3205,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965716,"byte_end":6965727,"line_start":3206,"line_end":3206,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965728,"byte_end":6965745,"line_start":3207,"line_end":3207,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966272,"byte_end":6966292,"line_start":3224,"line_end":3224,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965913,"byte_end":6965970,"line_start":3213,"line_end":3213,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965971,"byte_end":6965978,"line_start":3214,"line_end":3214,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6965979,"byte_end":6966002,"line_start":3215,"line_end":3215,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966003,"byte_end":6966041,"line_start":3216,"line_end":3216,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966042,"byte_end":6966080,"line_start":3217,"line_end":3217,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966081,"byte_end":6966137,"line_start":3218,"line_end":3218,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966138,"byte_end":6966170,"line_start":3219,"line_end":3219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966171,"byte_end":6966178,"line_start":3220,"line_end":3220,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966179,"byte_end":6966190,"line_start":3221,"line_end":3221,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966191,"byte_end":6966208,"line_start":3222,"line_end":3222,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966736,"byte_end":6966756,"line_start":3239,"line_end":3239,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966376,"byte_end":6966433,"line_start":3228,"line_end":3228,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966434,"byte_end":6966441,"line_start":3229,"line_end":3229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966442,"byte_end":6966465,"line_start":3230,"line_end":3230,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966466,"byte_end":6966504,"line_start":3231,"line_end":3231,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966505,"byte_end":6966545,"line_start":3232,"line_end":3232,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966546,"byte_end":6966602,"line_start":3233,"line_end":3233,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966603,"byte_end":6966634,"line_start":3234,"line_end":3234,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966635,"byte_end":6966642,"line_start":3235,"line_end":3235,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966643,"byte_end":6966654,"line_start":3236,"line_end":3236,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966655,"byte_end":6966672,"line_start":3237,"line_end":3237,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967197,"byte_end":6967213,"line_start":3254,"line_end":3254,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966840,"byte_end":6966891,"line_start":3243,"line_end":3243,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966892,"byte_end":6966899,"line_start":3244,"line_end":3244,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966900,"byte_end":6966923,"line_start":3245,"line_end":3245,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966924,"byte_end":6966968,"line_start":3246,"line_end":3246,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6966969,"byte_end":6967014,"line_start":3247,"line_end":3247,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967015,"byte_end":6967061,"line_start":3248,"line_end":3248,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967062,"byte_end":6967095,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967096,"byte_end":6967103,"line_start":3250,"line_end":3250,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967104,"byte_end":6967115,"line_start":3251,"line_end":3251,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967116,"byte_end":6967133,"line_start":3252,"line_end":3252,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967608,"byte_end":6967620,"line_start":3269,"line_end":3269,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967294,"byte_end":6967314,"line_start":3258,"line_end":3258,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967315,"byte_end":6967322,"line_start":3259,"line_end":3259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967323,"byte_end":6967346,"line_start":3260,"line_end":3260,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967347,"byte_end":6967389,"line_start":3261,"line_end":3261,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967390,"byte_end":6967432,"line_start":3262,"line_end":3262,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967433,"byte_end":6967475,"line_start":3263,"line_end":3263,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967476,"byte_end":6967506,"line_start":3264,"line_end":3264,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967507,"byte_end":6967514,"line_start":3265,"line_end":3265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967515,"byte_end":6967526,"line_start":3266,"line_end":3266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967527,"byte_end":6967544,"line_start":3267,"line_end":3267,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6968010,"byte_end":6968022,"line_start":3284,"line_end":3284,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967696,"byte_end":6967716,"line_start":3273,"line_end":3273,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967717,"byte_end":6967724,"line_start":3274,"line_end":3274,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967725,"byte_end":6967748,"line_start":3275,"line_end":3275,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967749,"byte_end":6967787,"line_start":3276,"line_end":3276,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967788,"byte_end":6967826,"line_start":3277,"line_end":3277,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967827,"byte_end":6967875,"line_start":3278,"line_end":3278,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967876,"byte_end":6967908,"line_start":3279,"line_end":3279,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967909,"byte_end":6967916,"line_start":3280,"line_end":3280,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967917,"byte_end":6967928,"line_start":3281,"line_end":3281,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6967929,"byte_end":6967946,"line_start":3282,"line_end":3282,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":10563,"byte_end":10585,"line_start":238,"line_end":238,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11430,"byte_end":11454,"line_start":258,"line_end":258,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":39},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":11745,"byte_end":11758,"line_start":270,"line_end":270,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":12089,"byte_end":12102,"line_start":283,"line_end":283,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":12051,"byte_end":12079,"line_start":282,"line_end":282,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781816,"byte_end":6781820,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781883,"byte_end":6781887,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781973,"byte_end":6781977,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782123,"byte_end":6782127,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783145,"byte_end":6783149,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783244,"byte_end":6783248,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783270,"byte_end":6783274,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783402,"byte_end":6783406,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784004,"byte_end":6784008,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784470,"byte_end":6784474,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784963,"byte_end":6784967,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6785464,"byte_end":6785468,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6785929,"byte_end":6785933,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6786394,"byte_end":6786398,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6786899,"byte_end":6786903,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6787401,"byte_end":6787405,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788813,"byte_end":6788818,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788881,"byte_end":6788886,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788973,"byte_end":6788978,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789127,"byte_end":6789132,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790147,"byte_end":6790152,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790247,"byte_end":6790252,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790274,"byte_end":6790279,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790407,"byte_end":6790412,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791012,"byte_end":6791017,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791432,"byte_end":6791437,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791883,"byte_end":6791888,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6792350,"byte_end":6792355,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6792770,"byte_end":6792775,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6793190,"byte_end":6793195,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6793663,"byte_end":6793668,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6794133,"byte_end":6794138,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795651,"byte_end":6795656,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795719,"byte_end":6795724,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795811,"byte_end":6795816,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795975,"byte_end":6795980,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796075,"byte_end":6796080,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796102,"byte_end":6796107,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796245,"byte_end":6796250,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796536,"byte_end":6796541,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796838,"byte_end":6796843,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797129,"byte_end":6797134,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797431,"byte_end":6797436,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797722,"byte_end":6797727,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798024,"byte_end":6798029,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798315,"byte_end":6798320,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798614,"byte_end":6798619,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798889,"byte_end":6798894,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6799229,"byte_end":6799234,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6799695,"byte_end":6799700,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6800194,"byte_end":6800199,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6800653,"byte_end":6800658,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6801124,"byte_end":6801129,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6801595,"byte_end":6801600,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6802058,"byte_end":6802063,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6802518,"byte_end":6802523,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803998,"byte_end":6804002,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804065,"byte_end":6804069,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804155,"byte_end":6804159,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804305,"byte_end":6804309,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805323,"byte_end":6805327,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805422,"byte_end":6805426,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805448,"byte_end":6805452,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805580,"byte_end":6805584,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6806182,"byte_end":6806186,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6806668,"byte_end":6806672,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6807173,"byte_end":6807177,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6807686,"byte_end":6807690,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6808171,"byte_end":6808175,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6808656,"byte_end":6808660,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6809173,"byte_end":6809177,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6809687,"byte_end":6809691,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811110,"byte_end":6811115,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811178,"byte_end":6811183,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811270,"byte_end":6811275,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811424,"byte_end":6811429,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812444,"byte_end":6812449,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812544,"byte_end":6812549,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812571,"byte_end":6812576,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812704,"byte_end":6812709,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6813309,"byte_end":6813314,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6813729,"byte_end":6813734,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6814180,"byte_end":6814185,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6814647,"byte_end":6814652,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815067,"byte_end":6815072,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815487,"byte_end":6815492,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815960,"byte_end":6815965,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6816430,"byte_end":6816435,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817948,"byte_end":6817953,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818016,"byte_end":6818021,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818108,"byte_end":6818113,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818272,"byte_end":6818277,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818372,"byte_end":6818377,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818399,"byte_end":6818404,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818542,"byte_end":6818547,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818833,"byte_end":6818838,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819136,"byte_end":6819141,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819430,"byte_end":6819435,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819734,"byte_end":6819739,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820025,"byte_end":6820030,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820327,"byte_end":6820332,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820618,"byte_end":6820623,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820922,"byte_end":6820927,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6821212,"byte_end":6821217,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6821562,"byte_end":6821567,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6822040,"byte_end":6822045,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6822551,"byte_end":6822556,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6823022,"byte_end":6823027,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6823513,"byte_end":6823518,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824004,"byte_end":6824009,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824479,"byte_end":6824484,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824951,"byte_end":6824956,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865030,"byte_end":6865034,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865178,"byte_end":6865182,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865293,"byte_end":6865297,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865450,"byte_end":6865454,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865567,"byte_end":6865571,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865721,"byte_end":6865725,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865838,"byte_end":6865842,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865995,"byte_end":6865999,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866110,"byte_end":6866114,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866258,"byte_end":6866262,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866370,"byte_end":6866374,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866518,"byte_end":6866522,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866630,"byte_end":6866634,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866772,"byte_end":6866776,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867139,"byte_end":6867143,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867287,"byte_end":6867291,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867405,"byte_end":6867409,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6968753,"byte_end":6968758,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6968903,"byte_end":6968908,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969019,"byte_end":6969024,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969178,"byte_end":6969183,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969296,"byte_end":6969301,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969452,"byte_end":6969457,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969570,"byte_end":6969575,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969729,"byte_end":6969734,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969845,"byte_end":6969850,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969995,"byte_end":6970000,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970108,"byte_end":6970113,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970258,"byte_end":6970263,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970371,"byte_end":6970376,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970516,"byte_end":6970521,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970885,"byte_end":6970890,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971035,"byte_end":6971040,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971154,"byte_end":6971159,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971569,"byte_end":6971574,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971728,"byte_end":6971733,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971846,"byte_end":6971851,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972002,"byte_end":6972007,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972120,"byte_end":6972125,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972279,"byte_end":6972284,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972395,"byte_end":6972400,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972752,"byte_end":6972757,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6973107,"byte_end":6973112,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/lib.rs","byte_start":7113,"byte_end":7131,"line_start":138,"line_end":138,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":32}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781816,"byte_end":6781820,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":44},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781883,"byte_end":6781887,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":44},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6781973,"byte_end":6781977,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":44},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6782123,"byte_end":6782127,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783145,"byte_end":6783149,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783244,"byte_end":6783248,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783270,"byte_end":6783274,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6783402,"byte_end":6783406,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784004,"byte_end":6784008,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784470,"byte_end":6784474,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6784963,"byte_end":6784967,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6785464,"byte_end":6785468,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6785929,"byte_end":6785933,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6786394,"byte_end":6786398,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6786899,"byte_end":6786903,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128_.rs","byte_start":6787401,"byte_end":6787405,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788813,"byte_end":6788818,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":90},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788881,"byte_end":6788886,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":90},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6788973,"byte_end":6788978,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":90},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6789127,"byte_end":6789132,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790147,"byte_end":6790152,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790247,"byte_end":6790252,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790274,"byte_end":6790279,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6790407,"byte_end":6790412,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791012,"byte_end":6791017,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791432,"byte_end":6791437,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6791883,"byte_end":6791888,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6792350,"byte_end":6792355,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6792770,"byte_end":6792775,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6793190,"byte_end":6793195,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6793663,"byte_end":6793668,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128d_.rs","byte_start":6794133,"byte_end":6794138,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795651,"byte_end":6795656,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":136},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795719,"byte_end":6795724,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":136},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795811,"byte_end":6795816,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":136},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6795975,"byte_end":6795980,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796075,"byte_end":6796080,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796102,"byte_end":6796107,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796245,"byte_end":6796250,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796536,"byte_end":6796541,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6796838,"byte_end":6796843,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797129,"byte_end":6797134,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797431,"byte_end":6797436,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6797722,"byte_end":6797727,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798024,"byte_end":6798029,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798315,"byte_end":6798320,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798614,"byte_end":6798619,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6798889,"byte_end":6798894,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6799229,"byte_end":6799234,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6799695,"byte_end":6799700,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6800194,"byte_end":6800199,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6800653,"byte_end":6800658,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6801124,"byte_end":6801129,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6801595,"byte_end":6801600,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6802058,"byte_end":6802063,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m128i_.rs","byte_start":6802518,"byte_end":6802523,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6803998,"byte_end":6804002,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":238},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804065,"byte_end":6804069,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":238},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804155,"byte_end":6804159,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":238},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6804305,"byte_end":6804309,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805323,"byte_end":6805327,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805422,"byte_end":6805426,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805448,"byte_end":6805452,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6805580,"byte_end":6805584,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6806182,"byte_end":6806186,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6806668,"byte_end":6806672,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6807173,"byte_end":6807177,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6807686,"byte_end":6807690,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6808171,"byte_end":6808175,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6808656,"byte_end":6808660,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6809173,"byte_end":6809177,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256_.rs","byte_start":6809687,"byte_end":6809691,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":238},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811110,"byte_end":6811115,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":284},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811178,"byte_end":6811183,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":284},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811270,"byte_end":6811275,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":284},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6811424,"byte_end":6811429,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812444,"byte_end":6812449,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812544,"byte_end":6812549,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812571,"byte_end":6812576,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6812704,"byte_end":6812709,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6813309,"byte_end":6813314,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6813729,"byte_end":6813734,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6814180,"byte_end":6814185,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6814647,"byte_end":6814652,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815067,"byte_end":6815072,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815487,"byte_end":6815492,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6815960,"byte_end":6815965,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256d_.rs","byte_start":6816430,"byte_end":6816435,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":284},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6817948,"byte_end":6817953,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":330},"to":{"krate":4,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818016,"byte_end":6818021,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":330},"to":{"krate":4,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818108,"byte_end":6818113,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":330},"to":{"krate":4,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818272,"byte_end":6818277,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818372,"byte_end":6818377,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818399,"byte_end":6818404,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818542,"byte_end":6818547,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6818833,"byte_end":6818838,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819136,"byte_end":6819141,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819430,"byte_end":6819435,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6819734,"byte_end":6819739,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820025,"byte_end":6820030,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820327,"byte_end":6820332,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820618,"byte_end":6820623,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6820922,"byte_end":6820927,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6821212,"byte_end":6821217,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6821562,"byte_end":6821567,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6822040,"byte_end":6822045,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6822551,"byte_end":6822556,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6840}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6823022,"byte_end":6823027,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6848}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6823513,"byte_end":6823518,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6850}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824004,"byte_end":6824009,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6842}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824479,"byte_end":6824484,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6844}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/m256i_.rs","byte_start":6824951,"byte_end":6824956,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":6838}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865030,"byte_end":6865034,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865178,"byte_end":6865182,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865293,"byte_end":6865297,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2192}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865450,"byte_end":6865454,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2219}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865567,"byte_end":6865571,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2197}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865721,"byte_end":6865725,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2223}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865838,"byte_end":6865842,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2202}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6865995,"byte_end":6865999,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2227}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866110,"byte_end":6866114,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866258,"byte_end":6866262,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866370,"byte_end":6866374,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866518,"byte_end":6866522,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866630,"byte_end":6866634,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6866772,"byte_end":6866776,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2188}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867139,"byte_end":6867143,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867287,"byte_end":6867291,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse.rs","byte_start":6867405,"byte_end":6867409,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":44},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6968753,"byte_end":6968758,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6968903,"byte_end":6968908,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969019,"byte_end":6969024,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2192}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969178,"byte_end":6969183,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2219}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969296,"byte_end":6969301,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2197}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969452,"byte_end":6969457,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2223}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969570,"byte_end":6969575,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2202}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969729,"byte_end":6969734,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2227}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969845,"byte_end":6969850,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6969995,"byte_end":6970000,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970108,"byte_end":6970113,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970258,"byte_end":6970263,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970371,"byte_end":6970376,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970516,"byte_end":6970521,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2188}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6970885,"byte_end":6970890,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971035,"byte_end":6971040,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971154,"byte_end":6971159,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971569,"byte_end":6971574,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2192}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971728,"byte_end":6971733,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2219}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6971846,"byte_end":6971851,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2197}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972002,"byte_end":6972007,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2223}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972120,"byte_end":6972125,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2202}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972279,"byte_end":6972284,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2227}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972395,"byte_end":6972400,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2188}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6972752,"byte_end":6972757,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.5.2/src/x86_x64/sse2.rs","byte_start":6973107,"byte_end":6973112,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":1795}}]}