{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1","program":"/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck_derive\"","--cfg","feature=\"derive\"","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=d40d380c3f339def","-C","extra-filename=-d40d380c3f339def","--out-dir","/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","-L","dependency=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps","--extern","bytemuck_derive=/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libbytemuck_derive-2d175579bec0ba58.so","--cap-lints","allow","--error-format=json","--sysroot","/home/sna/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/sna/project/koompi-desktop/desktop/target/rls/debug/deps/libbytemuck-d40d380c3f339def.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[13300038299743649120,10384484905238779108]},"crate_root":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src","external_crates":[{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","num":5,"id":{"name":"bytemuck_derive","disambiguator":[6247392092230105806,8163925577197420074]}}],"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":0,"byte_end":14045,"line_start":1,"line_end":450,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1894,"byte_end":1898,"line_start":51,"line_end":51,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2300,"byte_end":2301,"line_start":67,"line_end":67,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2336,"byte_end":2337,"line_start":70,"line_end":70,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2362,"byte_end":2363,"line_start":73,"line_end":73,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2402,"byte_end":2403,"line_start":76,"line_end":76,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2440,"byte_end":2441,"line_start":79,"line_end":79,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2482,"byte_end":2483,"line_start":82,"line_end":82,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":114},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2539,"byte_end":2549,"line_start":85,"line_end":85,"column_start":27,"column_end":37},"alias_span":null,"name":"Contiguous","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":111},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2551,"byte_end":2554,"line_start":85,"line_end":85,"column_start":39,"column_end":42},"alias_span":null,"name":"Pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":113},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2556,"byte_end":2574,"line_start":85,"line_end":85,"column_start":44,"column_end":62},"alias_span":null,"name":"TransparentWrapper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":112},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2576,"byte_end":2584,"line_start":85,"line_end":85,"column_start":64,"column_end":72},"alias_span":null,"name":"Zeroable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":0,"byte_end":14045,"line_start":1,"line_end":450,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":609},{"krate":0,"index":630},{"krate":0,"index":628},{"krate":0,"index":627},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":618},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":35,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":110,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":114,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":128,"byte_end":131,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":132,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":206,"byte_end":220,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":221,"byte_end":224,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":225,"byte_end":248,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":249,"byte_end":277,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":278,"byte_end":310,"line_start":13,"line_end":13,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":311,"byte_end":343,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":344,"byte_end":384,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":385,"byte_end":388,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":389,"byte_end":464,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":465,"byte_end":544,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":545,"byte_end":625,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":626,"byte_end":705,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":706,"byte_end":724,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":725,"byte_end":728,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":729,"byte_end":756,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":757,"byte_end":760,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":761,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":833,"byte_end":873,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":874,"byte_end":877,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":878,"byte_end":953,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":954,"byte_end":1031,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1032,"byte_end":1109,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1110,"byte_end":1155,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1156,"byte_end":1159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1160,"byte_end":1175,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1176,"byte_end":1179,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1180,"byte_end":1260,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1261,"byte_end":1340,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1341,"byte_end":1420,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":1421,"byte_end":1491,"line_start":38,"line_end":38,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":642},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":49}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2182,"byte_end":2220,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14497,"byte_end":14536,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14538,"byte_end":14585,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14586,"byte_end":14589,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14590,"byte_end":14670,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module!","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14671,"byte_end":14708,"line_start":6,"line_end":6,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14912,"byte_end":14920,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"pub fn cast_box<A: Pod, B: Pod>(Box<A>) -> Box<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14835,"byte_end":14894,"line_start":17,"line_end":17,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":14895,"byte_end":14904,"line_start":18,"line_end":18,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15367,"byte_end":15379,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"pub fn try_cast_box<A: Pod, B: Pod>(Box<A>)\n-> Result<Box<B>, (PodCastError, Box<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15019,"byte_end":15089,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15090,"byte_end":15093,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15094,"byte_end":15161,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15162,"byte_end":15165,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15166,"byte_end":15180,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15181,"byte_end":15184,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15185,"byte_end":15259,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15260,"byte_end":15276,"line_start":30,"line_end":30,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15277,"byte_end":15349,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15350,"byte_end":15359,"line_start":32,"line_end":32,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16245,"byte_end":16259,"line_start":58,"line_end":58,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"pub fn try_zeroed_box<T: Zeroable>() -> Result<Box<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15825,"byte_end":15892,"line_start":47,"line_end":47,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15893,"byte_end":15896,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15897,"byte_end":15972,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":15973,"byte_end":16052,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16053,"byte_end":16126,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16127,"byte_end":16164,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16165,"byte_end":16168,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16169,"byte_end":16183,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16184,"byte_end":16187,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16188,"byte_end":16227,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":16228,"byte_end":16237,"line_start":57,"line_end":57,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17384,"byte_end":17394,"line_start":88,"line_end":88,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"pub fn zeroed_box<T: Zeroable>() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17319,"byte_end":17366,"line_start":86,"line_end":86,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17367,"byte_end":17376,"line_start":87,"line_end":87,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17868,"byte_end":17888,"line_start":103,"line_end":103,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"pub fn try_zeroed_slice_box<T: Zeroable>(usize) -> Result<Box<[T]>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17453,"byte_end":17515,"line_start":92,"line_end":92,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17516,"byte_end":17519,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17520,"byte_end":17595,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17596,"byte_end":17675,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17676,"byte_end":17749,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17750,"byte_end":17787,"line_start":97,"line_end":97,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17788,"byte_end":17791,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17792,"byte_end":17806,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17807,"byte_end":17810,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17811,"byte_end":17850,"line_start":101,"line_end":101,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":17851,"byte_end":17860,"line_start":102,"line_end":102,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":18964,"byte_end":18980,"line_start":134,"line_end":134,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"pub fn zeroed_slice_box<T: Zeroable>(usize) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":18881,"byte_end":18956,"line_start":133,"line_end":133,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":42},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19143,"byte_end":19151,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"pub fn cast_vec<A: Pod, B: Pod>(Vec<A>) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19066,"byte_end":19125,"line_start":138,"line_end":138,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19126,"byte_end":19135,"line_start":139,"line_end":139,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19766,"byte_end":19778,"line_start":157,"line_end":157,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"pub fn try_cast_vec<A: Pod, B: Pod>(Vec<A>)\n-> Result<Vec<B>, (PodCastError, Vec<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19250,"byte_end":19318,"line_start":144,"line_end":144,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19319,"byte_end":19322,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19323,"byte_end":19390,"line_start":146,"line_end":146,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19391,"byte_end":19394,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19395,"byte_end":19409,"line_start":148,"line_end":148,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19410,"byte_end":19413,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19414,"byte_end":19488,"line_start":150,"line_end":150,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19489,"byte_end":19505,"line_start":151,"line_end":151,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Vec` must have the exact same size.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19506,"byte_end":19578,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ * In the future this second restriction might be lessened by having the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19579,"byte_end":19654,"line_start":153,"line_end":153,"column_start":1,"column_end":76}},{"value":"/   capacity and length get adjusted during transmutation, but for now it's","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19655,"byte_end":19732,"line_start":154,"line_end":154,"column_start":1,"column_end":78}},{"value":"/   absolute.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19733,"byte_end":19748,"line_start":155,"line_end":155,"column_start":1,"column_end":16}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":19749,"byte_end":19758,"line_start":156,"line_end":156,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21642,"byte_end":21660,"line_start":200,"line_end":200,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"pub fn pod_collect_to_vec<A: Pod, B: Pod>(&[A]) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21041,"byte_end":21116,"line_start":184,"line_end":184,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21117,"byte_end":21120,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21121,"byte_end":21198,"line_start":186,"line_end":186,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21199,"byte_end":21202,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21203,"byte_end":21281,"line_start":188,"line_end":188,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21282,"byte_end":21285,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21286,"byte_end":21297,"line_start":190,"line_end":190,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21298,"byte_end":21320,"line_start":191,"line_end":191,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21321,"byte_end":21364,"line_start":192,"line_end":192,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21365,"byte_end":21429,"line_start":193,"line_end":193,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21430,"byte_end":21469,"line_start":194,"line_end":194,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21470,"byte_end":21538,"line_start":195,"line_end":195,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21539,"byte_end":21551,"line_start":196,"line_end":196,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21552,"byte_end":21620,"line_start":197,"line_end":197,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21621,"byte_end":21626,"line_start":198,"line_end":198,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/allocation.rs","byte_start":21627,"byte_end":21634,"line_start":199,"line_end":199,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22848,"byte_end":22856,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22390,"byte_end":22441,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22442,"byte_end":22476,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22477,"byte_end":22480,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22481,"byte_end":22544,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22545,"byte_end":22601,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22602,"byte_end":22605,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22606,"byte_end":22619,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22620,"byte_end":22623,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22624,"byte_end":22665,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22666,"byte_end":22713,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22714,"byte_end":22787,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22788,"byte_end":22830,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23136,"byte_end":23142,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22868,"byte_end":22908,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22911,"byte_end":22914,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22917,"byte_end":22992,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22995,"byte_end":23073,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23076,"byte_end":23118,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23121,"byte_end":23130,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28160,"byte_end":28163,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":26864,"byte_end":26902,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":26903,"byte_end":26906,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":26907,"byte_end":26984,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":26985,"byte_end":27064,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27065,"byte_end":27145,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27146,"byte_end":27164,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27165,"byte_end":27168,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27169,"byte_end":27245,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27246,"byte_end":27317,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27318,"byte_end":27392,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27393,"byte_end":27411,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27412,"byte_end":27415,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27416,"byte_end":27429,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27430,"byte_end":27433,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27434,"byte_end":27474,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27475,"byte_end":27522,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27523,"byte_end":27601,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27602,"byte_end":27630,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27631,"byte_end":27708,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27709,"byte_end":27789,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27790,"byte_end":27870,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27871,"byte_end":27886,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27887,"byte_end":27941,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":27942,"byte_end":28017,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28018,"byte_end":28097,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28098,"byte_end":28142,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33578,"byte_end":33588,"line_start":79,"line_end":79,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30610,"byte_end":30638,"line_start":4,"line_end":4,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30639,"byte_end":30642,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30643,"byte_end":30718,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30719,"byte_end":30785,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30786,"byte_end":30830,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30831,"byte_end":30834,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30835,"byte_end":30914,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30915,"byte_end":30995,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":30996,"byte_end":31058,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31059,"byte_end":31062,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31063,"byte_end":31141,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31142,"byte_end":31217,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31218,"byte_end":31246,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31247,"byte_end":31250,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31251,"byte_end":31264,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31265,"byte_end":31268,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31269,"byte_end":31276,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31277,"byte_end":31308,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31309,"byte_end":31324,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31325,"byte_end":31369,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31370,"byte_end":31384,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31385,"byte_end":31397,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31398,"byte_end":31410,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31411,"byte_end":31423,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31424,"byte_end":31436,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31437,"byte_end":31449,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31450,"byte_end":31455,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31456,"byte_end":31492,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31493,"byte_end":31513,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31514,"byte_end":31555,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31556,"byte_end":31597,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31598,"byte_end":31603,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31604,"byte_end":31658,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31659,"byte_end":31702,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31703,"byte_end":31744,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31745,"byte_end":31752,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31753,"byte_end":31765,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31766,"byte_end":31769,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31770,"byte_end":31843,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31844,"byte_end":31857,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31858,"byte_end":31861,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31862,"byte_end":31939,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":31940,"byte_end":32019,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32020,"byte_end":32074,"line_start":47,"line_end":47,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32075,"byte_end":32078,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32079,"byte_end":32159,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32160,"byte_end":32182,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32183,"byte_end":32186,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32187,"byte_end":32267,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32268,"byte_end":32324,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32325,"byte_end":32328,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32329,"byte_end":32404,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32405,"byte_end":32477,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32478,"byte_end":32547,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32548,"byte_end":32551,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32552,"byte_end":32630,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32631,"byte_end":32707,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32708,"byte_end":32719,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32720,"byte_end":32723,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32724,"byte_end":32796,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32797,"byte_end":32875,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32876,"byte_end":32952,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":32953,"byte_end":33032,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33033,"byte_end":33036,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33037,"byte_end":33109,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33110,"byte_end":33175,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33176,"byte_end":33179,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33180,"byte_end":33257,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33258,"byte_end":33280,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33281,"byte_end":33284,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33285,"byte_end":33364,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33365,"byte_end":33398,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33399,"byte_end":33402,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33403,"byte_end":33480,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33481,"byte_end":33560,"line_start":78,"line_end":78,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":204},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34413,"byte_end":34416,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33609,"byte_end":33680,"line_start":80,"line_end":80,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33683,"byte_end":33692,"line_start":81,"line_end":81,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33695,"byte_end":33698,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33701,"byte_end":33773,"line_start":83,"line_end":83,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33776,"byte_end":33842,"line_start":84,"line_end":84,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33845,"byte_end":33913,"line_start":85,"line_end":85,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33916,"byte_end":33958,"line_start":86,"line_end":86,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33961,"byte_end":33964,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33967,"byte_end":34040,"line_start":88,"line_end":88,"column_start":3,"column_end":76}},{"value":"/   use `type Int = u8`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34043,"byte_end":34069,"line_start":89,"line_end":89,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34072,"byte_end":34075,"line_start":90,"line_end":90,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34078,"byte_end":34147,"line_start":91,"line_end":91,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34150,"byte_end":34226,"line_start":92,"line_end":92,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34229,"byte_end":34298,"line_start":93,"line_end":93,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34301,"byte_end":34339,"line_start":94,"line_end":94,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34342,"byte_end":34345,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34348,"byte_end":34405,"line_start":96,"line_end":96,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":205},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34507,"byte_end":34516,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34433,"byte_end":34498,"line_start":99,"line_end":99,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":206},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34606,"byte_end":34615,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34532,"byte_end":34597,"line_start":102,"line_end":102,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35280,"byte_end":35292,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34631,"byte_end":34699,"line_start":105,"line_end":105,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34702,"byte_end":34765,"line_start":106,"line_end":106,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34768,"byte_end":34771,"line_start":107,"line_end":107,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34774,"byte_end":34848,"line_start":108,"line_end":108,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34851,"byte_end":34918,"line_start":109,"line_end":109,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34921,"byte_end":34989,"line_start":110,"line_end":110,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34992,"byte_end":34995,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":34998,"byte_end":35010,"line_start":112,"line_end":112,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35013,"byte_end":35016,"line_start":113,"line_end":113,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35019,"byte_end":35092,"line_start":114,"line_end":114,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35095,"byte_end":35141,"line_start":115,"line_end":115,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35144,"byte_end":35147,"line_start":116,"line_end":116,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35150,"byte_end":35224,"line_start":117,"line_end":117,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35227,"byte_end":35262,"line_start":118,"line_end":118,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":35265,"byte_end":35274,"line_start":119,"line_end":119,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36843,"byte_end":36855,"line_start":155,"line_end":155,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36159,"byte_end":36234,"line_start":139,"line_end":139,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36237,"byte_end":36313,"line_start":140,"line_end":140,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36316,"byte_end":36328,"line_start":141,"line_end":141,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36331,"byte_end":36334,"line_start":142,"line_end":142,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36337,"byte_end":36411,"line_start":143,"line_end":143,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36414,"byte_end":36481,"line_start":144,"line_end":144,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36484,"byte_end":36552,"line_start":145,"line_end":145,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36555,"byte_end":36558,"line_start":146,"line_end":146,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36561,"byte_end":36573,"line_start":147,"line_end":147,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36576,"byte_end":36579,"line_start":148,"line_end":148,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36582,"byte_end":36655,"line_start":149,"line_end":149,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36658,"byte_end":36704,"line_start":150,"line_end":150,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36707,"byte_end":36710,"line_start":151,"line_end":151,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36713,"byte_end":36787,"line_start":152,"line_end":152,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36790,"byte_end":36825,"line_start":153,"line_end":153,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":36828,"byte_end":36837,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46718,"byte_end":46736,"line_start":83,"line_end":83,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Wrapped: ?Sized>","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"decl_id":null,"docs":" A trait which indicates that a type is a `repr(transparent)` wrapper around\n the `Wrapped` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `repr(transparent)` wrapper around","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":43910,"byte_end":43989,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the `Wrapped` value.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":43990,"byte_end":44014,"line_start":4,"line_end":4,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44015,"byte_end":44018,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely creating references to `T` from those to the `Wrapped`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44019,"byte_end":44096,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ type, using the `wrap_ref` and `wrap_mut` functions.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44097,"byte_end":44153,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44154,"byte_end":44157,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44158,"byte_end":44170,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44171,"byte_end":44174,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44175,"byte_end":44244,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44245,"byte_end":44248,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Wrapped>`:","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44249,"byte_end":44322,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44323,"byte_end":44326,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ 1. Wrapper must be a `#[repr(transparent)]` wrapper around `Wrapped`. This","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44327,"byte_end":44405,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/    either means that it must be a `#[repr(transparent)]` struct which","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44406,"byte_end":44479,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/    contains a either a field of type `Wrapped` (or a field of some other","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44480,"byte_end":44556,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/    transparent wrapper for `Wrapped`) as the only non-ZST field.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44557,"byte_end":44625,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44626,"byte_end":44629,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Wrapped` field must be trivially","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44630,"byte_end":44698,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/    constructable ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44699,"byte_end":44774,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44775,"byte_end":44778,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44779,"byte_end":44853,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/    `Wrapped`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44854,"byte_end":44871,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44872,"byte_end":44950,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":44951,"byte_end":45029,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45030,"byte_end":45033,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 4. The `wrap_ref` and `wrap_mut` functions on `TransparentWrapper` may not","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45034,"byte_end":45112,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/    be overridden.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45113,"byte_end":45134,"line_start":29,"line_end":29,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45135,"byte_end":45138,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45139,"byte_end":45153,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45154,"byte_end":45157,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the wrapped type which","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45158,"byte_end":45235,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ are required for safety, it's responsible for ensuring those still hold --","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45236,"byte_end":45314,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ this generally requires preventing access to instances of the wrapped type,","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45315,"byte_end":45394,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ as implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45395,"byte_end":45467,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45468,"byte_end":45505,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45506,"byte_end":45509,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45510,"byte_end":45588,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45589,"byte_end":45657,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45658,"byte_end":45661,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45662,"byte_end":45676,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45677,"byte_end":45680,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45681,"byte_end":45693,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45694,"byte_end":45697,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45698,"byte_end":45705,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45706,"byte_end":45743,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45744,"byte_end":45768,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45769,"byte_end":45798,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45799,"byte_end":45802,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45803,"byte_end":45827,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45828,"byte_end":45861,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45862,"byte_end":45865,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45866,"byte_end":45929,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45930,"byte_end":45933,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45934,"byte_end":45993,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":45994,"byte_end":46032,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ let wrapped_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46033,"byte_end":46095,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46096,"byte_end":46099,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46100,"byte_end":46127,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46128,"byte_end":46174,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/ let wrapped_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46175,"byte_end":46249,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46250,"byte_end":46253,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # let _ = (wrapped_ref, wrapped_mut); // silence warnings","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46254,"byte_end":46315,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46316,"byte_end":46323,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46324,"byte_end":46327,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46328,"byte_end":46367,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46368,"byte_end":46371,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46372,"byte_end":46379,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46380,"byte_end":46417,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46418,"byte_end":46421,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46422,"byte_end":46446,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46447,"byte_end":46472,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46473,"byte_end":46476,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46477,"byte_end":46535,"line_start":75,"line_end":75,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46536,"byte_end":46539,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46540,"byte_end":46583,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46584,"byte_end":46617,"line_start":78,"line_end":78,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46618,"byte_end":46621,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46622,"byte_end":46652,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46653,"byte_end":46692,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46693,"byte_end":46700,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47111,"byte_end":47119,"line_start":91,"line_end":91,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Wrapped) -> &Self","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Convert a reference to a wrapped type into a reference to the wrapper.","sig":null,"attributes":[{"value":"/ Convert a reference to a wrapped type into a reference to the wrapper.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46758,"byte_end":46832,"line_start":84,"line_end":84,"column_start":3,"column_end":77}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46835,"byte_end":46838,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_ref(...)` in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46841,"byte_end":46916,"line_start":86,"line_end":86,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46919,"byte_end":46994,"line_start":87,"line_end":87,"column_start":3,"column_end":78}},{"value":"/ implement `TransparentWrapper<_>` for your type you **must not** override","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":46997,"byte_end":47074,"line_start":88,"line_end":88,"column_start":3,"column_end":80}},{"value":"/ this method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47077,"byte_end":47093,"line_start":89,"line_end":89,"column_start":3,"column_end":19}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47096,"byte_end":47105,"line_start":90,"line_end":90,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":48268,"byte_end":48276,"line_start":116,"line_end":116,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Wrapped) -> &mut Self","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Convert a mut reference to a wrapped type into a mut reference to the\n wrapper.","sig":null,"attributes":[{"value":"/ Convert a mut reference to a wrapped type into a mut reference to the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47907,"byte_end":47980,"line_start":109,"line_end":109,"column_start":3,"column_end":76}},{"value":"/ wrapper.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47983,"byte_end":47995,"line_start":110,"line_end":110,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":47998,"byte_end":48001,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_mut(...)` in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":48004,"byte_end":48079,"line_start":112,"line_end":112,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you implement","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":48082,"byte_end":48167,"line_start":113,"line_end":113,"column_start":3,"column_end":88}},{"value":"/ `TransparentWrapper<_>` for your type you **must not** override this method.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":48170,"byte_end":48250,"line_start":114,"line_end":114,"column_start":3,"column_end":83}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":48253,"byte_end":48262,"line_start":115,"line_end":115,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3625,"byte_end":3633,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3416,"byte_end":3450,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3451,"byte_end":3454,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3455,"byte_end":3533,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3534,"byte_end":3607,"line_start":112,"line_end":112,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3608,"byte_end":3617,"line_start":113,"line_end":113,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":231},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4048,"byte_end":4060,"line_start":130,"line_end":130,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3831,"byte_end":3873,"line_start":125,"line_end":125,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3874,"byte_end":3877,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3878,"byte_end":3956,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":3957,"byte_end":4030,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4031,"byte_end":4040,"line_start":129,"line_end":129,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4404,"byte_end":4414,"line_start":147,"line_end":147,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4274,"byte_end":4308,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4309,"byte_end":4312,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4313,"byte_end":4326,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4327,"byte_end":4330,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4331,"byte_end":4386,"line_start":145,"line_end":145,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4387,"byte_end":4396,"line_start":146,"line_end":146,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":235},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4687,"byte_end":4701,"line_start":160,"line_end":160,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4545,"byte_end":4587,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4588,"byte_end":4591,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4592,"byte_end":4605,"line_start":156,"line_end":156,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4606,"byte_end":4609,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4610,"byte_end":4669,"line_start":158,"line_end":158,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4670,"byte_end":4679,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5042,"byte_end":5056,"line_start":174,"line_end":174,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4848,"byte_end":4882,"line_start":167,"line_end":167,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4883,"byte_end":4886,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4887,"byte_end":4901,"line_start":169,"line_end":169,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4902,"byte_end":4905,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4906,"byte_end":4955,"line_start":171,"line_end":171,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":4956,"byte_end":5024,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5025,"byte_end":5034,"line_start":173,"line_end":173,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5563,"byte_end":5581,"line_start":191,"line_end":191,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5361,"byte_end":5403,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5404,"byte_end":5407,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5408,"byte_end":5422,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5423,"byte_end":5426,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5427,"byte_end":5476,"line_start":188,"line_end":188,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5477,"byte_end":5545,"line_start":189,"line_end":189,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5546,"byte_end":5555,"line_start":190,"line_end":190,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":610},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6179,"byte_end":6219,"line_start":208,"line_end":208,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6056,"byte_end":6128,"line_start":206,"line_end":206,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6131,"byte_end":6176,"line_start":207,"line_end":207,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":612},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6405,"byte_end":6429,"line_start":212,"line_end":212,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6223,"byte_end":6291,"line_start":209,"line_end":209,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6294,"byte_end":6369,"line_start":210,"line_end":210,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6372,"byte_end":6402,"line_start":211,"line_end":211,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":614},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6650,"byte_end":6662,"line_start":216,"line_end":216,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6433,"byte_end":6508,"line_start":213,"line_end":213,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6511,"byte_end":6584,"line_start":214,"line_end":214,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6587,"byte_end":6647,"line_start":215,"line_end":215,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":616},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6953,"byte_end":6970,"line_start":223,"line_end":223,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6666,"byte_end":6740,"line_start":217,"line_end":217,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6743,"byte_end":6774,"line_start":218,"line_end":218,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6777,"byte_end":6780,"line_start":219,"line_end":219,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6783,"byte_end":6859,"line_start":220,"line_end":220,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6862,"byte_end":6937,"line_start":221,"line_end":221,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6940,"byte_end":6950,"line_start":222,"line_end":222,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":609},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":6039,"byte_end":6051,"line_start":205,"line_end":205,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n\n    /// You tried to cast a slice to an element type with a higher alignment\n    /// requirement but the slice wasn't aligned.\n    TargetAlignmentGreaterAndInputNotAligned,\n\n    /// If the element size changes then the output slice changes length\n    /// accordingly. If the output slice wouldn't be a whole number of elements\n    /// then the conversion fails.\n    OutputSliceWouldHaveSlop,\n\n    /// When casting a slice you can't convert between ZST elements and non-ZST\n    /// elements. When casting an individual `T`, `&T`, or `&mut T` value the\n    /// source size and destination size must be an exact match.\n    SizeMismatch,\n\n    /// For this type of cast the alignments must be exactly the same and they\n    /// were not so now you're sad.\n    ///\n    /// This error is generated **only** by operations that cast allocated types\n    /// (such as `Box` and `Vec`), because in that case the alignment must stay\n    /// exact.\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":5905,"byte_end":5978,"line_start":203,"line_end":203,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7340,"byte_end":7344,"line_start":239,"line_end":239,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7201,"byte_end":7222,"line_start":233,"line_end":233,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7223,"byte_end":7226,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7227,"byte_end":7240,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7241,"byte_end":7244,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7245,"byte_end":7322,"line_start":237,"line_end":237,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7323,"byte_end":7332,"line_start":238,"line_end":238,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7664,"byte_end":7672,"line_start":253,"line_end":253,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7538,"byte_end":7570,"line_start":247,"line_end":247,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7571,"byte_end":7574,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7575,"byte_end":7588,"line_start":249,"line_end":249,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7589,"byte_end":7592,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7593,"byte_end":7646,"line_start":251,"line_end":251,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7647,"byte_end":7656,"line_start":252,"line_end":252,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8192,"byte_end":8200,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8074,"byte_end":8098,"line_start":268,"line_end":268,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8099,"byte_end":8102,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8103,"byte_end":8116,"line_start":270,"line_end":270,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8117,"byte_end":8120,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8121,"byte_end":8174,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8175,"byte_end":8184,"line_start":273,"line_end":273,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8718,"byte_end":8728,"line_start":295,"line_end":295,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8594,"byte_end":8622,"line_start":289,"line_end":289,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8623,"byte_end":8626,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8627,"byte_end":8640,"line_start":291,"line_end":291,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8641,"byte_end":8644,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8645,"byte_end":8700,"line_start":293,"line_end":293,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8701,"byte_end":8710,"line_start":294,"line_end":294,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9004,"byte_end":9018,"line_start":308,"line_end":308,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8868,"byte_end":8904,"line_start":302,"line_end":302,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8905,"byte_end":8908,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8909,"byte_end":8922,"line_start":304,"line_end":304,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8923,"byte_end":8926,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8927,"byte_end":8986,"line_start":306,"line_end":306,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":8987,"byte_end":8996,"line_start":307,"line_end":307,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9249,"byte_end":9261,"line_start":317,"line_end":317,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9174,"byte_end":9231,"line_start":315,"line_end":315,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9232,"byte_end":9241,"line_start":316,"line_end":316,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9430,"byte_end":9446,"line_start":323,"line_end":323,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9351,"byte_end":9412,"line_start":321,"line_end":321,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9413,"byte_end":9422,"line_start":322,"line_end":322,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9948,"byte_end":9956,"line_start":340,"line_end":340,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9561,"byte_end":9590,"line_start":329,"line_end":329,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9591,"byte_end":9594,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9595,"byte_end":9672,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9673,"byte_end":9752,"line_start":332,"line_end":332,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9753,"byte_end":9831,"line_start":333,"line_end":333,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9832,"byte_end":9851,"line_start":334,"line_end":334,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9852,"byte_end":9855,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9856,"byte_end":9870,"line_start":336,"line_end":336,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9871,"byte_end":9874,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9875,"byte_end":9930,"line_start":338,"line_end":338,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":9931,"byte_end":9940,"line_start":339,"line_end":339,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10344,"byte_end":10356,"line_start":355,"line_end":355,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10151,"byte_end":10187,"line_start":348,"line_end":348,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10188,"byte_end":10191,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10192,"byte_end":10206,"line_start":350,"line_end":350,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10207,"byte_end":10210,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10211,"byte_end":10263,"line_start":352,"line_end":352,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10264,"byte_end":10326,"line_start":353,"line_end":353,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10327,"byte_end":10336,"line_start":354,"line_end":354,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10934,"byte_end":10946,"line_start":373,"line_end":373,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10832,"byte_end":10876,"line_start":369,"line_end":369,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10877,"byte_end":10880,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10881,"byte_end":10916,"line_start":371,"line_end":371,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":10917,"byte_end":10926,"line_start":372,"line_end":372,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":12186,"byte_end":12200,"line_start":403,"line_end":403,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11428,"byte_end":11501,"line_start":387,"line_end":387,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11502,"byte_end":11505,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11506,"byte_end":11565,"line_start":389,"line_end":389,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11566,"byte_end":11635,"line_start":390,"line_end":390,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11636,"byte_end":11639,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11640,"byte_end":11654,"line_start":392,"line_end":392,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11655,"byte_end":11658,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11659,"byte_end":11739,"line_start":394,"line_end":394,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11740,"byte_end":11760,"line_start":395,"line_end":395,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11761,"byte_end":11838,"line_start":396,"line_end":396,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11839,"byte_end":11915,"line_start":397,"line_end":397,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11916,"byte_end":11996,"line_start":398,"line_end":398,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":11997,"byte_end":12021,"line_start":399,"line_end":399,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":12022,"byte_end":12147,"line_start":400,"line_end":400,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":12148,"byte_end":12168,"line_start":401,"line_end":401,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":12169,"byte_end":12178,"line_start":402,"line_end":402,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":276},"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13163,"byte_end":13181,"line_start":427,"line_end":427,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13017,"byte_end":13089,"line_start":422,"line_end":422,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13090,"byte_end":13102,"line_start":423,"line_end":423,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13103,"byte_end":13106,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13107,"byte_end":13145,"line_start":425,"line_end":425,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":13146,"byte_end":13155,"line_start":426,"line_end":426,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23783,"byte_end":23791,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23824,"byte_end":23830,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23870,"byte_end":23876,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23917,"byte_end":23923,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23964,"byte_end":23970,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24011,"byte_end":24017,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24059,"byte_end":24065,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24108,"byte_end":24114,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24154,"byte_end":24160,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24201,"byte_end":24207,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24248,"byte_end":24254,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24295,"byte_end":24301,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24343,"byte_end":24349,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24474,"byte_end":24480,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24534,"byte_end":24545,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24590,"byte_end":24602,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26322,"byte_end":26329,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26397,"byte_end":26403,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26471,"byte_end":26478,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26546,"byte_end":26553,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26621,"byte_end":26627,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26695,"byte_end":26702,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28631,"byte_end":28639,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28667,"byte_end":28673,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28708,"byte_end":28714,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28750,"byte_end":28756,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28792,"byte_end":28798,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28834,"byte_end":28840,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28877,"byte_end":28883,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28921,"byte_end":28927,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28962,"byte_end":28968,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29004,"byte_end":29010,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29046,"byte_end":29052,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29088,"byte_end":29094,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29131,"byte_end":29137,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29274,"byte_end":29280,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29324,"byte_end":29335,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29370,"byte_end":29382,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30094,"byte_end":30101,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30164,"byte_end":30170,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30233,"byte_end":30240,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30303,"byte_end":30310,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30373,"byte_end":30379,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30442,"byte_end":30449,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":49120,"byte_end":49128,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7002,"byte_end":7014,"line_start":225,"line_end":225,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":2229,"byte_end":2239,"line_start":65,"line_end":65,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":13}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":22858,"byte_end":22863,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23783,"byte_end":23791,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":16283},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23824,"byte_end":23830,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23870,"byte_end":23876,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23917,"byte_end":23923,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":23964,"byte_end":23970,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24011,"byte_end":24017,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24059,"byte_end":24065,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24108,"byte_end":24114,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24154,"byte_end":24160,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24201,"byte_end":24207,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24248,"byte_end":24254,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24295,"byte_end":24301,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24343,"byte_end":24349,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24474,"byte_end":24480,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24534,"byte_end":24545,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":2089},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":24590,"byte_end":24602,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":19900},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26322,"byte_end":26329,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":40038},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26397,"byte_end":26403,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":40047},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26471,"byte_end":26478,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":40058},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26546,"byte_end":26553,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":40067},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26621,"byte_end":26627,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":40078},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/zeroable.rs","byte_start":26695,"byte_end":26702,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":40093},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28165,"byte_end":28173,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":55},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28176,"byte_end":28180,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28631,"byte_end":28639,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":16283},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28667,"byte_end":28673,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28708,"byte_end":28714,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28750,"byte_end":28756,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28792,"byte_end":28798,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28834,"byte_end":28840,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28877,"byte_end":28883,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28921,"byte_end":28927,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":28962,"byte_end":28968,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29004,"byte_end":29010,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29046,"byte_end":29052,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29088,"byte_end":29094,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29131,"byte_end":29137,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29274,"byte_end":29280,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":34376},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29324,"byte_end":29335,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":2089},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":29370,"byte_end":29382,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":19900},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30094,"byte_end":30101,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":40038},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30164,"byte_end":30170,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":40047},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30233,"byte_end":30240,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":40058},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30303,"byte_end":30310,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":40067},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30373,"byte_end":30379,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":40078},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/pod.rs","byte_start":30442,"byte_end":30449,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":40093},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/contiguous.rs","byte_start":33590,"byte_end":33594,"line_start":79,"line_end":79,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":203}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/transparent.rs","byte_start":49120,"byte_end":49128,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":16283},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/sna/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.5.1/src/lib.rs","byte_start":7002,"byte_end":7014,"line_start":225,"line_end":225,"column_start":29,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":609},"to":{"krate":1,"index":6836}}]}